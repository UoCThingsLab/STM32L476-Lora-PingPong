
Accelerometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  080080d0  080080d0  000180d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083b8  080083b8  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  080083b8  080083b8  000183b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083c0  080083c0  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080083c0  080083c0  000183c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080083c8  080083c8  000183c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080083d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005cc  200000a8  08008478  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000674  08008478  00020674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027333  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004c84  00000000  00000000  0004740b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000dfdc  00000000  00000000  0004c08f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000014e8  00000000  00000000  0005a070  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000015e0  00000000  00000000  0005b558  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002e4cb  00000000  00000000  0005cb38  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00017215  00000000  00000000  0008b003  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00111374  00000000  00000000  000a2218  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001b358c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d48  00000000  00000000  001b3608  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  001b7350  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080080b8 	.word	0x080080b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	080080b8 	.word	0x080080b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b70:	f000 b972 	b.w	8000e58 <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9e08      	ldr	r6, [sp, #32]
 8000b92:	4604      	mov	r4, r0
 8000b94:	4688      	mov	r8, r1
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d14b      	bne.n	8000c32 <__udivmoddi4+0xa6>
 8000b9a:	428a      	cmp	r2, r1
 8000b9c:	4615      	mov	r5, r2
 8000b9e:	d967      	bls.n	8000c70 <__udivmoddi4+0xe4>
 8000ba0:	fab2 f282 	clz	r2, r2
 8000ba4:	b14a      	cbz	r2, 8000bba <__udivmoddi4+0x2e>
 8000ba6:	f1c2 0720 	rsb	r7, r2, #32
 8000baa:	fa01 f302 	lsl.w	r3, r1, r2
 8000bae:	fa20 f707 	lsr.w	r7, r0, r7
 8000bb2:	4095      	lsls	r5, r2
 8000bb4:	ea47 0803 	orr.w	r8, r7, r3
 8000bb8:	4094      	lsls	r4, r2
 8000bba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bbe:	0c23      	lsrs	r3, r4, #16
 8000bc0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bc4:	fa1f fc85 	uxth.w	ip, r5
 8000bc8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bcc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bd0:	fb07 f10c 	mul.w	r1, r7, ip
 8000bd4:	4299      	cmp	r1, r3
 8000bd6:	d909      	bls.n	8000bec <__udivmoddi4+0x60>
 8000bd8:	18eb      	adds	r3, r5, r3
 8000bda:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000bde:	f080 811b 	bcs.w	8000e18 <__udivmoddi4+0x28c>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 8118 	bls.w	8000e18 <__udivmoddi4+0x28c>
 8000be8:	3f02      	subs	r7, #2
 8000bea:	442b      	add	r3, r5
 8000bec:	1a5b      	subs	r3, r3, r1
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bf4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bfc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c00:	45a4      	cmp	ip, r4
 8000c02:	d909      	bls.n	8000c18 <__udivmoddi4+0x8c>
 8000c04:	192c      	adds	r4, r5, r4
 8000c06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c0a:	f080 8107 	bcs.w	8000e1c <__udivmoddi4+0x290>
 8000c0e:	45a4      	cmp	ip, r4
 8000c10:	f240 8104 	bls.w	8000e1c <__udivmoddi4+0x290>
 8000c14:	3802      	subs	r0, #2
 8000c16:	442c      	add	r4, r5
 8000c18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c1c:	eba4 040c 	sub.w	r4, r4, ip
 8000c20:	2700      	movs	r7, #0
 8000c22:	b11e      	cbz	r6, 8000c2c <__udivmoddi4+0xa0>
 8000c24:	40d4      	lsrs	r4, r2
 8000c26:	2300      	movs	r3, #0
 8000c28:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2c:	4639      	mov	r1, r7
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0xbe>
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	f000 80eb 	beq.w	8000e12 <__udivmoddi4+0x286>
 8000c3c:	2700      	movs	r7, #0
 8000c3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c42:	4638      	mov	r0, r7
 8000c44:	4639      	mov	r1, r7
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f783 	clz	r7, r3
 8000c4e:	2f00      	cmp	r7, #0
 8000c50:	d147      	bne.n	8000ce2 <__udivmoddi4+0x156>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0xd0>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80fa 	bhi.w	8000e50 <__udivmoddi4+0x2c4>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	4698      	mov	r8, r3
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d0e0      	beq.n	8000c2c <__udivmoddi4+0xa0>
 8000c6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c6e:	e7dd      	b.n	8000c2c <__udivmoddi4+0xa0>
 8000c70:	b902      	cbnz	r2, 8000c74 <__udivmoddi4+0xe8>
 8000c72:	deff      	udf	#255	; 0xff
 8000c74:	fab2 f282 	clz	r2, r2
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	f040 808f 	bne.w	8000d9c <__udivmoddi4+0x210>
 8000c7e:	1b49      	subs	r1, r1, r5
 8000c80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c84:	fa1f f885 	uxth.w	r8, r5
 8000c88:	2701      	movs	r7, #1
 8000c8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c8e:	0c23      	lsrs	r3, r4, #16
 8000c90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c98:	fb08 f10c 	mul.w	r1, r8, ip
 8000c9c:	4299      	cmp	r1, r3
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x124>
 8000ca0:	18eb      	adds	r3, r5, r3
 8000ca2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x122>
 8000ca8:	4299      	cmp	r1, r3
 8000caa:	f200 80cd 	bhi.w	8000e48 <__udivmoddi4+0x2bc>
 8000cae:	4684      	mov	ip, r0
 8000cb0:	1a59      	subs	r1, r3, r1
 8000cb2:	b2a3      	uxth	r3, r4
 8000cb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cc0:	fb08 f800 	mul.w	r8, r8, r0
 8000cc4:	45a0      	cmp	r8, r4
 8000cc6:	d907      	bls.n	8000cd8 <__udivmoddi4+0x14c>
 8000cc8:	192c      	adds	r4, r5, r4
 8000cca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x14a>
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	f200 80b6 	bhi.w	8000e42 <__udivmoddi4+0x2b6>
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	eba4 0408 	sub.w	r4, r4, r8
 8000cdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ce0:	e79f      	b.n	8000c22 <__udivmoddi4+0x96>
 8000ce2:	f1c7 0c20 	rsb	ip, r7, #32
 8000ce6:	40bb      	lsls	r3, r7
 8000ce8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cf0:	fa01 f407 	lsl.w	r4, r1, r7
 8000cf4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cf8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d00:	4325      	orrs	r5, r4
 8000d02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d06:	0c2c      	lsrs	r4, r5, #16
 8000d08:	fb08 3319 	mls	r3, r8, r9, r3
 8000d0c:	fa1f fa8e 	uxth.w	sl, lr
 8000d10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d14:	fb09 f40a 	mul.w	r4, r9, sl
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d22:	d90b      	bls.n	8000d3c <__udivmoddi4+0x1b0>
 8000d24:	eb1e 0303 	adds.w	r3, lr, r3
 8000d28:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d2c:	f080 8087 	bcs.w	8000e3e <__udivmoddi4+0x2b2>
 8000d30:	429c      	cmp	r4, r3
 8000d32:	f240 8084 	bls.w	8000e3e <__udivmoddi4+0x2b2>
 8000d36:	f1a9 0902 	sub.w	r9, r9, #2
 8000d3a:	4473      	add	r3, lr
 8000d3c:	1b1b      	subs	r3, r3, r4
 8000d3e:	b2ad      	uxth	r5, r5
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3310 	mls	r3, r8, r0, r3
 8000d48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d50:	45a2      	cmp	sl, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x1da>
 8000d54:	eb1e 0404 	adds.w	r4, lr, r4
 8000d58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d5c:	d26b      	bcs.n	8000e36 <__udivmoddi4+0x2aa>
 8000d5e:	45a2      	cmp	sl, r4
 8000d60:	d969      	bls.n	8000e36 <__udivmoddi4+0x2aa>
 8000d62:	3802      	subs	r0, #2
 8000d64:	4474      	add	r4, lr
 8000d66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d6e:	eba4 040a 	sub.w	r4, r4, sl
 8000d72:	454c      	cmp	r4, r9
 8000d74:	46c2      	mov	sl, r8
 8000d76:	464b      	mov	r3, r9
 8000d78:	d354      	bcc.n	8000e24 <__udivmoddi4+0x298>
 8000d7a:	d051      	beq.n	8000e20 <__udivmoddi4+0x294>
 8000d7c:	2e00      	cmp	r6, #0
 8000d7e:	d069      	beq.n	8000e54 <__udivmoddi4+0x2c8>
 8000d80:	ebb1 050a 	subs.w	r5, r1, sl
 8000d84:	eb64 0403 	sbc.w	r4, r4, r3
 8000d88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d8c:	40fd      	lsrs	r5, r7
 8000d8e:	40fc      	lsrs	r4, r7
 8000d90:	ea4c 0505 	orr.w	r5, ip, r5
 8000d94:	e9c6 5400 	strd	r5, r4, [r6]
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e747      	b.n	8000c2c <__udivmoddi4+0xa0>
 8000d9c:	f1c2 0320 	rsb	r3, r2, #32
 8000da0:	fa20 f703 	lsr.w	r7, r0, r3
 8000da4:	4095      	lsls	r5, r2
 8000da6:	fa01 f002 	lsl.w	r0, r1, r2
 8000daa:	fa21 f303 	lsr.w	r3, r1, r3
 8000dae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db2:	4338      	orrs	r0, r7
 8000db4:	0c01      	lsrs	r1, r0, #16
 8000db6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dba:	fa1f f885 	uxth.w	r8, r5
 8000dbe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc6:	fb07 f308 	mul.w	r3, r7, r8
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd0:	d907      	bls.n	8000de2 <__udivmoddi4+0x256>
 8000dd2:	1869      	adds	r1, r5, r1
 8000dd4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000dd8:	d22f      	bcs.n	8000e3a <__udivmoddi4+0x2ae>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d92d      	bls.n	8000e3a <__udivmoddi4+0x2ae>
 8000dde:	3f02      	subs	r7, #2
 8000de0:	4429      	add	r1, r5
 8000de2:	1acb      	subs	r3, r1, r3
 8000de4:	b281      	uxth	r1, r0
 8000de6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df2:	fb00 f308 	mul.w	r3, r0, r8
 8000df6:	428b      	cmp	r3, r1
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x27e>
 8000dfa:	1869      	adds	r1, r5, r1
 8000dfc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e00:	d217      	bcs.n	8000e32 <__udivmoddi4+0x2a6>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d915      	bls.n	8000e32 <__udivmoddi4+0x2a6>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4429      	add	r1, r5
 8000e0a:	1ac9      	subs	r1, r1, r3
 8000e0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e10:	e73b      	b.n	8000c8a <__udivmoddi4+0xfe>
 8000e12:	4637      	mov	r7, r6
 8000e14:	4630      	mov	r0, r6
 8000e16:	e709      	b.n	8000c2c <__udivmoddi4+0xa0>
 8000e18:	4607      	mov	r7, r0
 8000e1a:	e6e7      	b.n	8000bec <__udivmoddi4+0x60>
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	e6fb      	b.n	8000c18 <__udivmoddi4+0x8c>
 8000e20:	4541      	cmp	r1, r8
 8000e22:	d2ab      	bcs.n	8000d7c <__udivmoddi4+0x1f0>
 8000e24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e28:	eb69 020e 	sbc.w	r2, r9, lr
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	4613      	mov	r3, r2
 8000e30:	e7a4      	b.n	8000d7c <__udivmoddi4+0x1f0>
 8000e32:	4660      	mov	r0, ip
 8000e34:	e7e9      	b.n	8000e0a <__udivmoddi4+0x27e>
 8000e36:	4618      	mov	r0, r3
 8000e38:	e795      	b.n	8000d66 <__udivmoddi4+0x1da>
 8000e3a:	4667      	mov	r7, ip
 8000e3c:	e7d1      	b.n	8000de2 <__udivmoddi4+0x256>
 8000e3e:	4681      	mov	r9, r0
 8000e40:	e77c      	b.n	8000d3c <__udivmoddi4+0x1b0>
 8000e42:	3802      	subs	r0, #2
 8000e44:	442c      	add	r4, r5
 8000e46:	e747      	b.n	8000cd8 <__udivmoddi4+0x14c>
 8000e48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e4c:	442b      	add	r3, r5
 8000e4e:	e72f      	b.n	8000cb0 <__udivmoddi4+0x124>
 8000e50:	4638      	mov	r0, r7
 8000e52:	e708      	b.n	8000c66 <__udivmoddi4+0xda>
 8000e54:	4637      	mov	r7, r6
 8000e56:	e6e9      	b.n	8000c2c <__udivmoddi4+0xa0>

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <GetFskBandwidthRegValue>:
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	e009      	b.n	8000e74 <GetFskBandwidthRegValue+0x18>
 8000e60:	e7fe      	b.n	8000e60 <GetFskBandwidthRegValue+0x4>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
        {
            return FskBandwidths[i].RegValue;
 8000e62:	4b12      	ldr	r3, [pc, #72]	; (8000eac <GetFskBandwidthRegValue+0x50>)
 8000e64:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000e68:	7918      	ldrb	r0, [r3, #4]
        }
    }
    // ERROR: Value not found
    while( 1 );
}
 8000e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e6e:	4770      	bx	lr
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8000e70:	3301      	adds	r3, #1
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	2b14      	cmp	r3, #20
 8000e76:	d817      	bhi.n	8000ea8 <GetFskBandwidthRegValue+0x4c>
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4a0c      	ldr	r2, [pc, #48]	; (8000eac <GetFskBandwidthRegValue+0x50>)
 8000e7c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000e80:	4282      	cmp	r2, r0
 8000e82:	d8f5      	bhi.n	8000e70 <GetFskBandwidthRegValue+0x14>
{
 8000e84:	b410      	push	{r4}
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8000e86:	1c5a      	adds	r2, r3, #1
 8000e88:	4c08      	ldr	r4, [pc, #32]	; (8000eac <GetFskBandwidthRegValue+0x50>)
 8000e8a:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	d8e7      	bhi.n	8000e62 <GetFskBandwidthRegValue+0x6>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8000e92:	3301      	adds	r3, #1
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b14      	cmp	r3, #20
 8000e98:	d8e2      	bhi.n	8000e60 <GetFskBandwidthRegValue+0x4>
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4a03      	ldr	r2, [pc, #12]	; (8000eac <GetFskBandwidthRegValue+0x50>)
 8000e9e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000ea2:	4282      	cmp	r2, r0
 8000ea4:	d8f5      	bhi.n	8000e92 <GetFskBandwidthRegValue+0x36>
 8000ea6:	e7ee      	b.n	8000e86 <GetFskBandwidthRegValue+0x2a>
 8000ea8:	e7fe      	b.n	8000ea8 <GetFskBandwidthRegValue+0x4c>
 8000eaa:	bf00      	nop
 8000eac:	080080d0 	.word	0x080080d0

08000eb0 <SX1276OnDio4Irq>:
    }
}

void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
 8000eb0:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <SX1276OnDio4Irq+0x18>)
 8000eb2:	795b      	ldrb	r3, [r3, #5]
 8000eb4:	b93b      	cbnz	r3, 8000ec6 <SX1276OnDio4Irq+0x16>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8000eb6:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <SX1276OnDio4Irq+0x18>)
 8000eb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ebc:	b91b      	cbnz	r3, 8000ec6 <SX1276OnDio4Irq+0x16>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8000ebe:	4b02      	ldr	r3, [pc, #8]	; (8000ec8 <SX1276OnDio4Irq+0x18>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8000ec6:	4770      	bx	lr
 8000ec8:	200005ac 	.word	0x200005ac

08000ecc <SX1276BoardInit>:
    LoRaBoardCallbacks =callbacks;
 8000ecc:	4b01      	ldr	r3, [pc, #4]	; (8000ed4 <SX1276BoardInit+0x8>)
 8000ece:	6018      	str	r0, [r3, #0]
}
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	200000c4 	.word	0x200000c4

08000ed8 <SX1276GetStatus>:
}
 8000ed8:	4b01      	ldr	r3, [pc, #4]	; (8000ee0 <SX1276GetStatus+0x8>)
 8000eda:	7918      	ldrb	r0, [r3, #4]
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	200005ac 	.word	0x200005ac

08000ee4 <SX1276Reset>:
{
 8000ee4:	b530      	push	{r4, r5, lr}
 8000ee6:	b087      	sub	sp, #28
    GPIO_InitTypeDef initStruct = { 0 };
 8000ee8:	2500      	movs	r5, #0
 8000eea:	9501      	str	r5, [sp, #4]
 8000eec:	9503      	str	r5, [sp, #12]
 8000eee:	9505      	str	r5, [sp, #20]
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8000ef0:	2401      	movs	r4, #1
 8000ef2:	9402      	str	r4, [sp, #8]
    initStruct.Speed = GPIO_SPEED_HIGH;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	9304      	str	r3, [sp, #16]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8000ef8:	aa01      	add	r2, sp, #4
 8000efa:	4621      	mov	r1, r4
 8000efc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f00:	f004 fefe 	bl	8005d00 <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 0 );
 8000f04:	462a      	mov	r2, r5
 8000f06:	4621      	mov	r1, r4
 8000f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0c:	f004 ff74 	bl	8005df8 <HW_GPIO_Write>
    DelayMs( 1 );
 8000f10:	4620      	mov	r0, r4
 8000f12:	f005 fd80 	bl	8006a16 <HAL_Delay>
    initStruct.Mode = GPIO_NOPULL;
 8000f16:	9502      	str	r5, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8000f18:	aa01      	add	r2, sp, #4
 8000f1a:	4621      	mov	r1, r4
 8000f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f20:	f004 feee 	bl	8005d00 <HW_GPIO_Init>
    DelayMs( 6 );
 8000f24:	2006      	movs	r0, #6
 8000f26:	f005 fd76 	bl	8006a16 <HAL_Delay>
}
 8000f2a:	b007      	add	sp, #28
 8000f2c:	bd30      	pop	{r4, r5, pc}
	...

08000f30 <SX1276WriteBuffer>:
{
 8000f30:	b570      	push	{r4, r5, r6, lr}
 8000f32:	4604      	mov	r4, r0
 8000f34:	460e      	mov	r6, r1
 8000f36:	4615      	mov	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2140      	movs	r1, #64	; 0x40
 8000f3c:	480a      	ldr	r0, [pc, #40]	; (8000f68 <SX1276WriteBuffer+0x38>)
 8000f3e:	f004 ff5b 	bl	8005df8 <HW_GPIO_Write>
    HW_SPI_InOut( addr | 0x80 );
 8000f42:	f044 0080 	orr.w	r0, r4, #128	; 0x80
 8000f46:	f005 fa29 	bl	800639c <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 8000f4a:	2400      	movs	r4, #0
 8000f4c:	e004      	b.n	8000f58 <SX1276WriteBuffer+0x28>
        HW_SPI_InOut( buffer[i] );
 8000f4e:	5d30      	ldrb	r0, [r6, r4]
 8000f50:	f005 fa24 	bl	800639c <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 8000f54:	3401      	adds	r4, #1
 8000f56:	b2e4      	uxtb	r4, r4
 8000f58:	42ac      	cmp	r4, r5
 8000f5a:	d3f8      	bcc.n	8000f4e <SX1276WriteBuffer+0x1e>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2140      	movs	r1, #64	; 0x40
 8000f60:	4801      	ldr	r0, [pc, #4]	; (8000f68 <SX1276WriteBuffer+0x38>)
 8000f62:	f004 ff49 	bl	8005df8 <HW_GPIO_Write>
}
 8000f66:	bd70      	pop	{r4, r5, r6, pc}
 8000f68:	48000400 	.word	0x48000400

08000f6c <SX1276Write>:
{
 8000f6c:	b500      	push	{lr}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	ab02      	add	r3, sp, #8
 8000f72:	f803 1d01 	strb.w	r1, [r3, #-1]!
    SX1276WriteBuffer( addr, &data, 1 );
 8000f76:	2201      	movs	r2, #1
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f7ff ffd9 	bl	8000f30 <SX1276WriteBuffer>
}
 8000f7e:	b003      	add	sp, #12
 8000f80:	f85d fb04 	ldr.w	pc, [sp], #4

08000f84 <SX1276SetChannel>:
{
 8000f84:	b510      	push	{r4, lr}
    SX1276.Settings.Channel = freq;
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <SX1276SetChannel+0x48>)
 8000f88:	6098      	str	r0, [r3, #8]
    SX_FREQ_TO_CHANNEL( channel, freq );
 8000f8a:	4a11      	ldr	r2, [pc, #68]	; (8000fd0 <SX1276SetChannel+0x4c>)
 8000f8c:	fba2 1300 	umull	r1, r3, r2, r0
 8000f90:	0b1b      	lsrs	r3, r3, #12
 8000f92:	f643 5409 	movw	r4, #15625	; 0x3d09
 8000f96:	fb04 0013 	mls	r0, r4, r3, r0
 8000f9a:	f641 6484 	movw	r4, #7812	; 0x1e84
 8000f9e:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 8000fa2:	fba2 2404 	umull	r2, r4, r2, r4
 8000fa6:	0b24      	lsrs	r4, r4, #12
 8000fa8:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 8000fac:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8000fb0:	2006      	movs	r0, #6
 8000fb2:	f7ff ffdb 	bl	8000f6c <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8000fb6:	f3c4 2107 	ubfx	r1, r4, #8, #8
 8000fba:	2007      	movs	r0, #7
 8000fbc:	f7ff ffd6 	bl	8000f6c <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8000fc0:	b2e1      	uxtb	r1, r4
 8000fc2:	2008      	movs	r0, #8
 8000fc4:	f7ff ffd2 	bl	8000f6c <SX1276Write>
}
 8000fc8:	bd10      	pop	{r4, pc}
 8000fca:	bf00      	nop
 8000fcc:	200005ac 	.word	0x200005ac
 8000fd0:	431bde83 	.word	0x431bde83

08000fd4 <SX1276ReadBuffer>:
{
 8000fd4:	b570      	push	{r4, r5, r6, lr}
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	460e      	mov	r6, r1
 8000fda:	4615      	mov	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2140      	movs	r1, #64	; 0x40
 8000fe0:	480b      	ldr	r0, [pc, #44]	; (8001010 <SX1276ReadBuffer+0x3c>)
 8000fe2:	f004 ff09 	bl	8005df8 <HW_GPIO_Write>
    HW_SPI_InOut( addr & 0x7F );
 8000fe6:	f004 007f 	and.w	r0, r4, #127	; 0x7f
 8000fea:	f005 f9d7 	bl	800639c <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 8000fee:	2400      	movs	r4, #0
 8000ff0:	e005      	b.n	8000ffe <SX1276ReadBuffer+0x2a>
        buffer[i] = HW_SPI_InOut( 0 );
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f005 f9d2 	bl	800639c <HW_SPI_InOut>
 8000ff8:	5530      	strb	r0, [r6, r4]
    for( i = 0; i < size; i++ )
 8000ffa:	3401      	adds	r4, #1
 8000ffc:	b2e4      	uxtb	r4, r4
 8000ffe:	42ac      	cmp	r4, r5
 8001000:	d3f7      	bcc.n	8000ff2 <SX1276ReadBuffer+0x1e>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8001002:	2201      	movs	r2, #1
 8001004:	2140      	movs	r1, #64	; 0x40
 8001006:	4802      	ldr	r0, [pc, #8]	; (8001010 <SX1276ReadBuffer+0x3c>)
 8001008:	f004 fef6 	bl	8005df8 <HW_GPIO_Write>
}
 800100c:	bd70      	pop	{r4, r5, r6, pc}
 800100e:	bf00      	nop
 8001010:	48000400 	.word	0x48000400

08001014 <SX1276Read>:
{
 8001014:	b500      	push	{lr}
 8001016:	b083      	sub	sp, #12
    SX1276ReadBuffer( addr, &data, 1 );
 8001018:	2201      	movs	r2, #1
 800101a:	f10d 0107 	add.w	r1, sp, #7
 800101e:	f7ff ffd9 	bl	8000fd4 <SX1276ReadBuffer>
}
 8001022:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001026:	b003      	add	sp, #12
 8001028:	f85d fb04 	ldr.w	pc, [sp], #4

0800102c <RxChainCalibration>:
{
 800102c:	b538      	push	{r3, r4, r5, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800102e:	2009      	movs	r0, #9
 8001030:	f7ff fff0 	bl	8001014 <SX1276Read>
 8001034:	4605      	mov	r5, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8001036:	2006      	movs	r0, #6
 8001038:	f7ff ffec 	bl	8001014 <SX1276Read>
 800103c:	0404      	lsls	r4, r0, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800103e:	2007      	movs	r0, #7
 8001040:	f7ff ffe8 	bl	8001014 <SX1276Read>
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8001044:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 8001048:	2008      	movs	r0, #8
 800104a:	f7ff ffe3 	bl	8001014 <SX1276Read>
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800104e:	4320      	orrs	r0, r4
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8001050:	0a04      	lsrs	r4, r0, #8
 8001052:	f643 5209 	movw	r2, #15625	; 0x3d09
 8001056:	b2c3      	uxtb	r3, r0
 8001058:	fb02 f303 	mul.w	r3, r2, r3
 800105c:	3380      	adds	r3, #128	; 0x80
 800105e:	0a1b      	lsrs	r3, r3, #8
 8001060:	fb02 3404 	mla	r4, r2, r4, r3
    SX1276Write( REG_PACONFIG, 0x00 );
 8001064:	2100      	movs	r1, #0
 8001066:	2009      	movs	r0, #9
 8001068:	f7ff ff80 	bl	8000f6c <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800106c:	203b      	movs	r0, #59	; 0x3b
 800106e:	f7ff ffd1 	bl	8001014 <SX1276Read>
 8001072:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8001076:	b2c9      	uxtb	r1, r1
 8001078:	203b      	movs	r0, #59	; 0x3b
 800107a:	f7ff ff77 	bl	8000f6c <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800107e:	203b      	movs	r0, #59	; 0x3b
 8001080:	f7ff ffc8 	bl	8001014 <SX1276Read>
 8001084:	f010 0f20 	tst.w	r0, #32
 8001088:	d1f9      	bne.n	800107e <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
 800108a:	480d      	ldr	r0, [pc, #52]	; (80010c0 <RxChainCalibration+0x94>)
 800108c:	f7ff ff7a 	bl	8000f84 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8001090:	203b      	movs	r0, #59	; 0x3b
 8001092:	f7ff ffbf 	bl	8001014 <SX1276Read>
 8001096:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 800109a:	b2c9      	uxtb	r1, r1
 800109c:	203b      	movs	r0, #59	; 0x3b
 800109e:	f7ff ff65 	bl	8000f6c <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80010a2:	203b      	movs	r0, #59	; 0x3b
 80010a4:	f7ff ffb6 	bl	8001014 <SX1276Read>
 80010a8:	f010 0f20 	tst.w	r0, #32
 80010ac:	d1f9      	bne.n	80010a2 <RxChainCalibration+0x76>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 80010ae:	4629      	mov	r1, r5
 80010b0:	2009      	movs	r0, #9
 80010b2:	f7ff ff5b 	bl	8000f6c <SX1276Write>
    SX1276SetChannel( initialFreq );
 80010b6:	4620      	mov	r0, r4
 80010b8:	f7ff ff64 	bl	8000f84 <SX1276SetChannel>
}
 80010bc:	bd38      	pop	{r3, r4, r5, pc}
 80010be:	bf00      	nop
 80010c0:	33bca100 	.word	0x33bca100
 80010c4:	00000000 	.word	0x00000000

080010c8 <SX1276GetTimeOnAir>:
{
 80010c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010cc:	4689      	mov	r9, r1
    switch( modem )
 80010ce:	b118      	cbz	r0, 80010d8 <SX1276GetTimeOnAir+0x10>
 80010d0:	2801      	cmp	r0, #1
 80010d2:	d05b      	beq.n	800118c <SX1276GetTimeOnAir+0xc4>
    uint32_t airTime = 0;
 80010d4:	2000      	movs	r0, #0
    return airTime;
 80010d6:	e04d      	b.n	8001174 <SX1276GetTimeOnAir+0xac>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80010d8:	4c87      	ldr	r4, [pc, #540]	; (80012f8 <SX1276GetTimeOnAir+0x230>)
 80010da:	8c25      	ldrh	r5, [r4, #32]
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80010dc:	2027      	movs	r0, #39	; 0x27
 80010de:	f7ff ff99 	bl	8001014 <SX1276Read>
 80010e2:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 80010e6:	3001      	adds	r0, #1
 80010e8:	4428      	add	r0, r5
 80010ea:	f7ff fa13 	bl	8000514 <__aeabi_i2d>
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80010ee:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d040      	beq.n	8001178 <SX1276GetTimeOnAir+0xb0>
 80010f6:	2200      	movs	r2, #0
 80010f8:	2300      	movs	r3, #0
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80010fa:	f7ff f8bf 	bl	800027c <__adddf3>
 80010fe:	4604      	mov	r4, r0
 8001100:	460d      	mov	r5, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8001102:	2030      	movs	r0, #48	; 0x30
 8001104:	f7ff ff86 	bl	8001014 <SX1276Read>
 8001108:	f030 03f9 	bics.w	r3, r0, #249	; 0xf9
 800110c:	d037      	beq.n	800117e <SX1276GetTimeOnAir+0xb6>
 800110e:	2200      	movs	r2, #0
 8001110:	4b7a      	ldr	r3, [pc, #488]	; (80012fc <SX1276GetTimeOnAir+0x234>)
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8001112:	4620      	mov	r0, r4
 8001114:	4629      	mov	r1, r5
 8001116:	f7ff f8b1 	bl	800027c <__adddf3>
 800111a:	4604      	mov	r4, r0
 800111c:	460d      	mov	r5, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 800111e:	4648      	mov	r0, r9
 8001120:	f7ff f9f8 	bl	8000514 <__aeabi_i2d>
 8001124:	4622      	mov	r2, r4
 8001126:	462b      	mov	r3, r5
 8001128:	f7ff f8a8 	bl	800027c <__adddf3>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 800112c:	4b72      	ldr	r3, [pc, #456]	; (80012f8 <SX1276GetTimeOnAir+0x230>)
 800112e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001132:	bb3b      	cbnz	r3, 8001184 <SX1276GetTimeOnAir+0xbc>
 8001134:	2200      	movs	r2, #0
 8001136:	2300      	movs	r3, #0
                                     pktLen +
 8001138:	f7ff f8a0 	bl	800027c <__adddf3>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800113c:	2200      	movs	r2, #0
 800113e:	4b70      	ldr	r3, [pc, #448]	; (8001300 <SX1276GetTimeOnAir+0x238>)
 8001140:	f7ff fa52 	bl	80005e8 <__aeabi_dmul>
 8001144:	4604      	mov	r4, r0
 8001146:	460d      	mov	r5, r1
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8001148:	4b6b      	ldr	r3, [pc, #428]	; (80012f8 <SX1276GetTimeOnAir+0x230>)
 800114a:	69d8      	ldr	r0, [r3, #28]
 800114c:	f7ff f9d2 	bl	80004f4 <__aeabi_ui2d>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4620      	mov	r0, r4
 8001156:	4629      	mov	r1, r5
 8001158:	f7ff fb70 	bl	800083c <__aeabi_ddiv>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800115c:	2200      	movs	r2, #0
 800115e:	4b69      	ldr	r3, [pc, #420]	; (8001304 <SX1276GetTimeOnAir+0x23c>)
 8001160:	f7ff fa42 	bl	80005e8 <__aeabi_dmul>
 8001164:	ec41 0b10 	vmov	d0, r0, r1
 8001168:	f006 ff4e 	bl	8008008 <round>
 800116c:	ec51 0b10 	vmov	r0, r1, d0
 8001170:	f7ff fcd4 	bl	8000b1c <__aeabi_d2uiz>
}
 8001174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8001178:	2200      	movs	r2, #0
 800117a:	4b60      	ldr	r3, [pc, #384]	; (80012fc <SX1276GetTimeOnAir+0x234>)
 800117c:	e7bd      	b.n	80010fa <SX1276GetTimeOnAir+0x32>
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 800117e:	2200      	movs	r2, #0
 8001180:	2300      	movs	r3, #0
 8001182:	e7c6      	b.n	8001112 <SX1276GetTimeOnAir+0x4a>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8001184:	2200      	movs	r2, #0
 8001186:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800118a:	e7d5      	b.n	8001138 <SX1276GetTimeOnAir+0x70>
            switch( SX1276.Settings.LoRa.Bandwidth )
 800118c:	4b5a      	ldr	r3, [pc, #360]	; (80012f8 <SX1276GetTimeOnAir+0x230>)
 800118e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001190:	2b08      	cmp	r3, #8
 8001192:	f000 808c 	beq.w	80012ae <SX1276GetTimeOnAir+0x1e6>
 8001196:	2b09      	cmp	r3, #9
 8001198:	f000 808d 	beq.w	80012b6 <SX1276GetTimeOnAir+0x1ee>
 800119c:	2b07      	cmp	r3, #7
 800119e:	f000 808e 	beq.w	80012be <SX1276GetTimeOnAir+0x1f6>
            double bw = 0.0;
 80011a2:	2400      	movs	r4, #0
 80011a4:	2500      	movs	r5, #0
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 80011a6:	f8df 8150 	ldr.w	r8, [pc, #336]	; 80012f8 <SX1276GetTimeOnAir+0x230>
 80011aa:	f8d8 a048 	ldr.w	sl, [r8, #72]	; 0x48
 80011ae:	2001      	movs	r0, #1
 80011b0:	fa00 f00a 	lsl.w	r0, r0, sl
 80011b4:	f7ff f9ae 	bl	8000514 <__aeabi_i2d>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4620      	mov	r0, r4
 80011be:	4629      	mov	r1, r5
 80011c0:	f7ff fb3c 	bl	800083c <__aeabi_ddiv>
            double ts = 1 / rs;
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	2000      	movs	r0, #0
 80011ca:	494c      	ldr	r1, [pc, #304]	; (80012fc <SX1276GetTimeOnAir+0x234>)
 80011cc:	f7ff fb36 	bl	800083c <__aeabi_ddiv>
 80011d0:	4604      	mov	r4, r0
 80011d2:	460d      	mov	r5, r1
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 80011d4:	f8b8 004e 	ldrh.w	r0, [r8, #78]	; 0x4e
 80011d8:	f7ff f99c 	bl	8000514 <__aeabi_i2d>
 80011dc:	2200      	movs	r2, #0
 80011de:	4b4a      	ldr	r3, [pc, #296]	; (8001308 <SX1276GetTimeOnAir+0x240>)
 80011e0:	f7ff f84c 	bl	800027c <__adddf3>
 80011e4:	4622      	mov	r2, r4
 80011e6:	462b      	mov	r3, r5
 80011e8:	f7ff f9fe 	bl	80005e8 <__aeabi_dmul>
 80011ec:	4606      	mov	r6, r0
 80011ee:	460f      	mov	r7, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80011f0:	ea4f 008a 	mov.w	r0, sl, lsl #2
 80011f4:	ebc0 00c9 	rsb	r0, r0, r9, lsl #3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 80011f8:	f898 3052 	ldrb.w	r3, [r8, #82]	; 0x52
 80011fc:	eb00 1003 	add.w	r0, r0, r3, lsl #4
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8001200:	f898 3050 	ldrb.w	r3, [r8, #80]	; 0x50
 8001204:	2b00      	cmp	r3, #0
 8001206:	d05e      	beq.n	80012c6 <SX1276GetTimeOnAir+0x1fe>
 8001208:	2314      	movs	r3, #20
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 800120a:	1ac0      	subs	r0, r0, r3
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800120c:	301c      	adds	r0, #28
 800120e:	f7ff f971 	bl	80004f4 <__aeabi_ui2d>
 8001212:	4680      	mov	r8, r0
 8001214:	4689      	mov	r9, r1
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8001216:	4b38      	ldr	r3, [pc, #224]	; (80012f8 <SX1276GetTimeOnAir+0x230>)
 8001218:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800121c:	2b00      	cmp	r3, #0
 800121e:	d054      	beq.n	80012ca <SX1276GetTimeOnAir+0x202>
 8001220:	2002      	movs	r0, #2
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8001222:	ebaa 0000 	sub.w	r0, sl, r0
 8001226:	0080      	lsls	r0, r0, #2
 8001228:	f7ff f964 	bl	80004f4 <__aeabi_ui2d>
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4640      	mov	r0, r8
 8001232:	4649      	mov	r1, r9
 8001234:	f7ff fb02 	bl	800083c <__aeabi_ddiv>
 8001238:	ec41 0b10 	vmov	d0, r0, r1
 800123c:	f006 fde0 	bl	8007e00 <ceil>
 8001240:	ec59 8b10 	vmov	r8, r9, d0
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 8001244:	4b2c      	ldr	r3, [pc, #176]	; (80012f8 <SX1276GetTimeOnAir+0x230>)
 8001246:	f893 004d 	ldrb.w	r0, [r3, #77]	; 0x4d
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 800124a:	3004      	adds	r0, #4
 800124c:	f7ff f962 	bl	8000514 <__aeabi_i2d>
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4640      	mov	r0, r8
 8001256:	4649      	mov	r1, r9
 8001258:	f7ff f9c6 	bl	80005e8 <__aeabi_dmul>
 800125c:	4680      	mov	r8, r0
 800125e:	4689      	mov	r9, r1
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8001260:	2200      	movs	r2, #0
 8001262:	2300      	movs	r3, #0
 8001264:	f7ff fc50 	bl	8000b08 <__aeabi_dcmpgt>
 8001268:	b388      	cbz	r0, 80012ce <SX1276GetTimeOnAir+0x206>
 800126a:	2200      	movs	r2, #0
 800126c:	4b24      	ldr	r3, [pc, #144]	; (8001300 <SX1276GetTimeOnAir+0x238>)
 800126e:	4640      	mov	r0, r8
 8001270:	4649      	mov	r1, r9
 8001272:	f7ff f803 	bl	800027c <__adddf3>
            double tPayload = nPayload * ts;
 8001276:	4622      	mov	r2, r4
 8001278:	462b      	mov	r3, r5
 800127a:	f7ff f9b5 	bl	80005e8 <__aeabi_dmul>
            double tOnAir = tPreamble + tPayload;
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4630      	mov	r0, r6
 8001284:	4639      	mov	r1, r7
 8001286:	f7fe fff9 	bl	800027c <__adddf3>
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 800128a:	2200      	movs	r2, #0
 800128c:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <SX1276GetTimeOnAir+0x23c>)
 800128e:	f7ff f9ab 	bl	80005e8 <__aeabi_dmul>
 8001292:	a311      	add	r3, pc, #68	; (adr r3, 80012d8 <SX1276GetTimeOnAir+0x210>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7fe fff0 	bl	800027c <__adddf3>
 800129c:	ec41 0b10 	vmov	d0, r0, r1
 80012a0:	f006 fe2e 	bl	8007f00 <floor>
 80012a4:	ec51 0b10 	vmov	r0, r1, d0
 80012a8:	f7ff fc38 	bl	8000b1c <__aeabi_d2uiz>
        break;
 80012ac:	e762      	b.n	8001174 <SX1276GetTimeOnAir+0xac>
                bw = 250000;
 80012ae:	a50c      	add	r5, pc, #48	; (adr r5, 80012e0 <SX1276GetTimeOnAir+0x218>)
 80012b0:	e9d5 4500 	ldrd	r4, r5, [r5]
                break;
 80012b4:	e777      	b.n	80011a6 <SX1276GetTimeOnAir+0xde>
                bw = 500000;
 80012b6:	a50c      	add	r5, pc, #48	; (adr r5, 80012e8 <SX1276GetTimeOnAir+0x220>)
 80012b8:	e9d5 4500 	ldrd	r4, r5, [r5]
                break;
 80012bc:	e773      	b.n	80011a6 <SX1276GetTimeOnAir+0xde>
                bw = 125000;
 80012be:	a50c      	add	r5, pc, #48	; (adr r5, 80012f0 <SX1276GetTimeOnAir+0x228>)
 80012c0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80012c4:	e76f      	b.n	80011a6 <SX1276GetTimeOnAir+0xde>
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 80012c6:	2300      	movs	r3, #0
 80012c8:	e79f      	b.n	800120a <SX1276GetTimeOnAir+0x142>
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80012ca:	2000      	movs	r0, #0
 80012cc:	e7a9      	b.n	8001222 <SX1276GetTimeOnAir+0x15a>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 80012ce:	2000      	movs	r0, #0
 80012d0:	490b      	ldr	r1, [pc, #44]	; (8001300 <SX1276GetTimeOnAir+0x238>)
 80012d2:	e7d0      	b.n	8001276 <SX1276GetTimeOnAir+0x1ae>
 80012d4:	f3af 8000 	nop.w
 80012d8:	d916872b 	.word	0xd916872b
 80012dc:	3feff7ce 	.word	0x3feff7ce
 80012e0:	00000000 	.word	0x00000000
 80012e4:	410e8480 	.word	0x410e8480
 80012e8:	00000000 	.word	0x00000000
 80012ec:	411e8480 	.word	0x411e8480
 80012f0:	00000000 	.word	0x00000000
 80012f4:	40fe8480 	.word	0x40fe8480
 80012f8:	200005ac 	.word	0x200005ac
 80012fc:	3ff00000 	.word	0x3ff00000
 8001300:	40200000 	.word	0x40200000
 8001304:	408f4000 	.word	0x408f4000
 8001308:	40110000 	.word	0x40110000

0800130c <SX1276ReadRssi>:
{
 800130c:	b508      	push	{r3, lr}
    switch( modem )
 800130e:	b120      	cbz	r0, 800131a <SX1276ReadRssi+0xe>
 8001310:	2801      	cmp	r0, #1
 8001312:	d00a      	beq.n	800132a <SX1276ReadRssi+0x1e>
        rssi = -1;
 8001314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001318:	e006      	b.n	8001328 <SX1276ReadRssi+0x1c>
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800131a:	2011      	movs	r0, #17
 800131c:	f7ff fe7a 	bl	8001014 <SX1276Read>
 8001320:	f3c0 0047 	ubfx	r0, r0, #1, #8
 8001324:	4240      	negs	r0, r0
 8001326:	b200      	sxth	r0, r0
}
 8001328:	bd08      	pop	{r3, pc}
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <SX1276ReadRssi+0x44>)
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <SX1276ReadRssi+0x48>)
 8001330:	429a      	cmp	r2, r3
 8001332:	d806      	bhi.n	8001342 <SX1276ReadRssi+0x36>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8001334:	201b      	movs	r0, #27
 8001336:	f7ff fe6d 	bl	8001014 <SX1276Read>
 800133a:	b280      	uxth	r0, r0
 800133c:	38a4      	subs	r0, #164	; 0xa4
 800133e:	b200      	sxth	r0, r0
 8001340:	e7f2      	b.n	8001328 <SX1276ReadRssi+0x1c>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8001342:	201b      	movs	r0, #27
 8001344:	f7ff fe66 	bl	8001014 <SX1276Read>
 8001348:	b280      	uxth	r0, r0
 800134a:	389d      	subs	r0, #157	; 0x9d
 800134c:	b200      	sxth	r0, r0
 800134e:	e7eb      	b.n	8001328 <SX1276ReadRssi+0x1c>
 8001350:	200005ac 	.word	0x200005ac
 8001354:	1f4add40 	.word	0x1f4add40

08001358 <SX1276SetOpMode>:
{
 8001358:	b538      	push	{r3, r4, r5, lr}
    if( opMode == RF_OPMODE_SLEEP )
 800135a:	4605      	mov	r5, r0
 800135c:	b1c0      	cbz	r0, 8001390 <SX1276SetOpMode+0x38>
      LoRaBoardCallbacks->SX1276BoardSetXO( SET ); 
 800135e:	4c17      	ldr	r4, [pc, #92]	; (80013bc <SX1276SetOpMode+0x64>)
 8001360:	6823      	ldr	r3, [r4, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2001      	movs	r0, #1
 8001366:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( false );
 8001368:	6823      	ldr	r3, [r4, #0]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	2000      	movs	r0, #0
 800136e:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
 8001370:	6823      	ldr	r3, [r4, #0]
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	4628      	mov	r0, r5
 8001376:	4798      	blx	r3
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8001378:	2001      	movs	r0, #1
 800137a:	f7ff fe4b 	bl	8001014 <SX1276Read>
 800137e:	b241      	sxtb	r1, r0
 8001380:	f021 0107 	bic.w	r1, r1, #7
 8001384:	4329      	orrs	r1, r5
 8001386:	b2c9      	uxtb	r1, r1
 8001388:	2001      	movs	r0, #1
 800138a:	f7ff fdef 	bl	8000f6c <SX1276Write>
}
 800138e:	bd38      	pop	{r3, r4, r5, pc}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8001390:	2001      	movs	r0, #1
 8001392:	f7ff fe3f 	bl	8001014 <SX1276Read>
 8001396:	b241      	sxtb	r1, r0
 8001398:	f021 0107 	bic.w	r1, r1, #7
 800139c:	4329      	orrs	r1, r5
 800139e:	b2c9      	uxtb	r1, r1
 80013a0:	2001      	movs	r0, #1
 80013a2:	f7ff fde3 	bl	8000f6c <SX1276Write>
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 80013a6:	4c05      	ldr	r4, [pc, #20]	; (80013bc <SX1276SetOpMode+0x64>)
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	2001      	movs	r0, #1
 80013ae:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 80013b0:	6823      	ldr	r3, [r4, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2000      	movs	r0, #0
 80013b6:	4798      	blx	r3
 80013b8:	e7e9      	b.n	800138e <SX1276SetOpMode+0x36>
 80013ba:	bf00      	nop
 80013bc:	200000c4 	.word	0x200000c4

080013c0 <SX1276SetSleep>:
{
 80013c0:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 80013c2:	480a      	ldr	r0, [pc, #40]	; (80013ec <SX1276SetSleep+0x2c>)
 80013c4:	f005 fe82 	bl	80070cc <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80013c8:	4809      	ldr	r0, [pc, #36]	; (80013f0 <SX1276SetSleep+0x30>)
 80013ca:	f005 fe7f 	bl	80070cc <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80013ce:	4809      	ldr	r0, [pc, #36]	; (80013f4 <SX1276SetSleep+0x34>)
 80013d0:	f005 fe7c 	bl	80070cc <TimerStop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff ffbf 	bl	8001358 <SX1276SetOpMode>
    LoRaBoardCallbacks->SX1276BoardSetXO( RESET );
 80013da:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <SX1276SetSleep+0x38>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2000      	movs	r0, #0
 80013e2:	4798      	blx	r3
    SX1276.Settings.State = RF_IDLE;
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <SX1276SetSleep+0x3c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	711a      	strb	r2, [r3, #4]
}
 80013ea:	bd08      	pop	{r3, pc}
 80013ec:	20000614 	.word	0x20000614
 80013f0:	2000057c 	.word	0x2000057c
 80013f4:	20000594 	.word	0x20000594
 80013f8:	200000c4 	.word	0x200000c4
 80013fc:	200005ac 	.word	0x200005ac

08001400 <SX1276SetStby>:
{
 8001400:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 8001402:	4808      	ldr	r0, [pc, #32]	; (8001424 <SX1276SetStby+0x24>)
 8001404:	f005 fe62 	bl	80070cc <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8001408:	4807      	ldr	r0, [pc, #28]	; (8001428 <SX1276SetStby+0x28>)
 800140a:	f005 fe5f 	bl	80070cc <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 800140e:	4807      	ldr	r0, [pc, #28]	; (800142c <SX1276SetStby+0x2c>)
 8001410:	f005 fe5c 	bl	80070cc <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8001414:	2001      	movs	r0, #1
 8001416:	f7ff ff9f 	bl	8001358 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 800141a:	4b05      	ldr	r3, [pc, #20]	; (8001430 <SX1276SetStby+0x30>)
 800141c:	2200      	movs	r2, #0
 800141e:	711a      	strb	r2, [r3, #4]
}
 8001420:	bd08      	pop	{r3, pc}
 8001422:	bf00      	nop
 8001424:	20000614 	.word	0x20000614
 8001428:	2000057c 	.word	0x2000057c
 800142c:	20000594 	.word	0x20000594
 8001430:	200005ac 	.word	0x200005ac

08001434 <SX1276SetRx>:
{
 8001434:	b570      	push	{r4, r5, r6, lr}
 8001436:	4605      	mov	r5, r0
    TimerStop( &TxTimeoutTimer );
 8001438:	4894      	ldr	r0, [pc, #592]	; (800168c <SX1276SetRx+0x258>)
 800143a:	f005 fe47 	bl	80070cc <TimerStop>
    switch( SX1276.Settings.Modem )
 800143e:	4b94      	ldr	r3, [pc, #592]	; (8001690 <SX1276SetRx+0x25c>)
 8001440:	795b      	ldrb	r3, [r3, #5]
 8001442:	b11b      	cbz	r3, 800144c <SX1276SetRx+0x18>
 8001444:	2b01      	cmp	r3, #1
 8001446:	d041      	beq.n	80014cc <SX1276SetRx+0x98>
    bool rxContinuous = false;
 8001448:	2600      	movs	r6, #0
 800144a:	e027      	b.n	800149c <SX1276SetRx+0x68>
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800144c:	4c90      	ldr	r4, [pc, #576]	; (8001690 <SX1276SetRx+0x25c>)
 800144e:	f894 6026 	ldrb.w	r6, [r4, #38]	; 0x26
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8001452:	2040      	movs	r0, #64	; 0x40
 8001454:	f7ff fdde 	bl	8001014 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8001458:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800145c:	f041 010c 	orr.w	r1, r1, #12
 8001460:	2040      	movs	r0, #64	; 0x40
 8001462:	f7ff fd83 	bl	8000f6c <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8001466:	2041      	movs	r0, #65	; 0x41
 8001468:	f7ff fdd4 	bl	8001014 <SX1276Read>
 800146c:	f060 013e 	orn	r1, r0, #62	; 0x3e
 8001470:	b2c9      	uxtb	r1, r1
 8001472:	2041      	movs	r0, #65	; 0x41
 8001474:	f7ff fd7a 	bl	8000f6c <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8001478:	2035      	movs	r0, #53	; 0x35
 800147a:	f7ff fdcb 	bl	8001014 <SX1276Read>
 800147e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8001482:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8001486:	211e      	movs	r1, #30
 8001488:	200d      	movs	r0, #13
 800148a:	f7ff fd6f 	bl	8000f6c <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800148e:	2300      	movs	r3, #0
 8001490:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8001494:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8001498:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 800149a:	8763      	strh	r3, [r4, #58]	; 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 800149c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014a0:	2100      	movs	r1, #0
 80014a2:	487c      	ldr	r0, [pc, #496]	; (8001694 <SX1276SetRx+0x260>)
 80014a4:	f006 f879 	bl	800759a <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 80014a8:	4b79      	ldr	r3, [pc, #484]	; (8001690 <SX1276SetRx+0x25c>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 80014ae:	2d00      	cmp	r5, #0
 80014b0:	f040 80d2 	bne.w	8001658 <SX1276SetRx+0x224>
    if( SX1276.Settings.Modem == MODEM_FSK )
 80014b4:	4b76      	ldr	r3, [pc, #472]	; (8001690 <SX1276SetRx+0x25c>)
 80014b6:	795b      	ldrb	r3, [r3, #5]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 80d6 	beq.w	800166a <SX1276SetRx+0x236>
        if( rxContinuous == true )
 80014be:	2e00      	cmp	r6, #0
 80014c0:	f040 80e0 	bne.w	8001684 <SX1276SetRx+0x250>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 80014c4:	2006      	movs	r0, #6
 80014c6:	f7ff ff47 	bl	8001358 <SX1276SetOpMode>
}
 80014ca:	bd70      	pop	{r4, r5, r6, pc}
            if( SX1276.Settings.LoRa.IqInverted == true )
 80014cc:	4b70      	ldr	r3, [pc, #448]	; (8001690 <SX1276SetRx+0x25c>)
 80014ce:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80014d2:	b33b      	cbz	r3, 8001524 <SX1276SetRx+0xf0>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 80014d4:	2033      	movs	r0, #51	; 0x33
 80014d6:	f7ff fd9d 	bl	8001014 <SX1276Read>
 80014da:	f040 0141 	orr.w	r1, r0, #65	; 0x41
 80014de:	b2c9      	uxtb	r1, r1
 80014e0:	2033      	movs	r0, #51	; 0x33
 80014e2:	f7ff fd43 	bl	8000f6c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80014e6:	2119      	movs	r1, #25
 80014e8:	203b      	movs	r0, #59	; 0x3b
 80014ea:	f7ff fd3f 	bl	8000f6c <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 80014ee:	4b68      	ldr	r3, [pc, #416]	; (8001690 <SX1276SetRx+0x25c>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	2b08      	cmp	r3, #8
 80014f4:	d87f      	bhi.n	80015f6 <SX1276SetRx+0x1c2>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 80014f6:	2031      	movs	r0, #49	; 0x31
 80014f8:	f7ff fd8c 	bl	8001014 <SX1276Read>
 80014fc:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8001500:	2031      	movs	r0, #49	; 0x31
 8001502:	f7ff fd33 	bl	8000f6c <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8001506:	2100      	movs	r1, #0
 8001508:	2030      	movs	r0, #48	; 0x30
 800150a:	f7ff fd2f 	bl	8000f6c <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 800150e:	4b60      	ldr	r3, [pc, #384]	; (8001690 <SX1276SetRx+0x25c>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	2b08      	cmp	r3, #8
 8001514:	d878      	bhi.n	8001608 <SX1276SetRx+0x1d4>
 8001516:	e8df f003 	tbb	[pc, r3]
 800151a:	2317      	.short	0x2317
 800151c:	53473b2f 	.word	0x53473b2f
 8001520:	645f      	.short	0x645f
 8001522:	69          	.byte	0x69
 8001523:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8001524:	2033      	movs	r0, #51	; 0x33
 8001526:	f7ff fd75 	bl	8001014 <SX1276Read>
 800152a:	b241      	sxtb	r1, r0
 800152c:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8001530:	f041 0101 	orr.w	r1, r1, #1
 8001534:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
 8001538:	2033      	movs	r0, #51	; 0x33
 800153a:	f7ff fd17 	bl	8000f6c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800153e:	211d      	movs	r1, #29
 8001540:	203b      	movs	r0, #59	; 0x3b
 8001542:	f7ff fd13 	bl	8000f6c <SX1276Write>
 8001546:	e7d2      	b.n	80014ee <SX1276SetRx+0xba>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8001548:	2148      	movs	r1, #72	; 0x48
 800154a:	202f      	movs	r0, #47	; 0x2f
 800154c:	f7ff fd0e 	bl	8000f6c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8001550:	4b4f      	ldr	r3, [pc, #316]	; (8001690 <SX1276SetRx+0x25c>)
 8001552:	6898      	ldr	r0, [r3, #8]
 8001554:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
 8001558:	3002      	adds	r0, #2
 800155a:	f7ff fd13 	bl	8000f84 <SX1276SetChannel>
                    break;
 800155e:	e053      	b.n	8001608 <SX1276SetRx+0x1d4>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8001560:	2144      	movs	r1, #68	; 0x44
 8001562:	202f      	movs	r0, #47	; 0x2f
 8001564:	f7ff fd02 	bl	8000f6c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8001568:	4b49      	ldr	r3, [pc, #292]	; (8001690 <SX1276SetRx+0x25c>)
 800156a:	6898      	ldr	r0, [r3, #8]
 800156c:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
 8001570:	3034      	adds	r0, #52	; 0x34
 8001572:	f7ff fd07 	bl	8000f84 <SX1276SetChannel>
                    break;
 8001576:	e047      	b.n	8001608 <SX1276SetRx+0x1d4>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8001578:	2144      	movs	r1, #68	; 0x44
 800157a:	202f      	movs	r0, #47	; 0x2f
 800157c:	f7ff fcf6 	bl	8000f6c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8001580:	4b43      	ldr	r3, [pc, #268]	; (8001690 <SX1276SetRx+0x25c>)
 8001582:	6898      	ldr	r0, [r3, #8]
 8001584:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
 8001588:	3004      	adds	r0, #4
 800158a:	f7ff fcfb 	bl	8000f84 <SX1276SetChannel>
                    break;
 800158e:	e03b      	b.n	8001608 <SX1276SetRx+0x1d4>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8001590:	2144      	movs	r1, #68	; 0x44
 8001592:	202f      	movs	r0, #47	; 0x2f
 8001594:	f7ff fcea 	bl	8000f6c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8001598:	4b3d      	ldr	r3, [pc, #244]	; (8001690 <SX1276SetRx+0x25c>)
 800159a:	6898      	ldr	r0, [r3, #8]
 800159c:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
 80015a0:	305e      	adds	r0, #94	; 0x5e
 80015a2:	f7ff fcef 	bl	8000f84 <SX1276SetChannel>
                    break;
 80015a6:	e02f      	b.n	8001608 <SX1276SetRx+0x1d4>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80015a8:	2144      	movs	r1, #68	; 0x44
 80015aa:	202f      	movs	r0, #47	; 0x2f
 80015ac:	f7ff fcde 	bl	8000f6c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 80015b0:	4b37      	ldr	r3, [pc, #220]	; (8001690 <SX1276SetRx+0x25c>)
 80015b2:	6898      	ldr	r0, [r3, #8]
 80015b4:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
 80015b8:	3012      	adds	r0, #18
 80015ba:	f7ff fce3 	bl	8000f84 <SX1276SetChannel>
                    break;
 80015be:	e023      	b.n	8001608 <SX1276SetRx+0x1d4>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80015c0:	2144      	movs	r1, #68	; 0x44
 80015c2:	202f      	movs	r0, #47	; 0x2f
 80015c4:	f7ff fcd2 	bl	8000f6c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 80015c8:	4b31      	ldr	r3, [pc, #196]	; (8001690 <SX1276SetRx+0x25c>)
 80015ca:	6898      	ldr	r0, [r3, #8]
 80015cc:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
 80015d0:	30c6      	adds	r0, #198	; 0xc6
 80015d2:	f7ff fcd7 	bl	8000f84 <SX1276SetChannel>
                    break;
 80015d6:	e017      	b.n	8001608 <SX1276SetRx+0x1d4>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 80015d8:	2140      	movs	r1, #64	; 0x40
 80015da:	202f      	movs	r0, #47	; 0x2f
 80015dc:	f7ff fcc6 	bl	8000f6c <SX1276Write>
                    break;
 80015e0:	e012      	b.n	8001608 <SX1276SetRx+0x1d4>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 80015e2:	2140      	movs	r1, #64	; 0x40
 80015e4:	202f      	movs	r0, #47	; 0x2f
 80015e6:	f7ff fcc1 	bl	8000f6c <SX1276Write>
                    break;
 80015ea:	e00d      	b.n	8001608 <SX1276SetRx+0x1d4>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 80015ec:	2140      	movs	r1, #64	; 0x40
 80015ee:	202f      	movs	r0, #47	; 0x2f
 80015f0:	f7ff fcbc 	bl	8000f6c <SX1276Write>
                    break;
 80015f4:	e008      	b.n	8001608 <SX1276SetRx+0x1d4>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 80015f6:	2031      	movs	r0, #49	; 0x31
 80015f8:	f7ff fd0c 	bl	8001014 <SX1276Read>
 80015fc:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8001600:	b2c9      	uxtb	r1, r1
 8001602:	2031      	movs	r0, #49	; 0x31
 8001604:	f7ff fcb2 	bl	8000f6c <SX1276Write>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8001608:	4b21      	ldr	r3, [pc, #132]	; (8001690 <SX1276SetRx+0x25c>)
 800160a:	f893 6056 	ldrb.w	r6, [r3, #86]	; 0x56
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800160e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001612:	b1a3      	cbz	r3, 800163e <SX1276SetRx+0x20a>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8001614:	211d      	movs	r1, #29
 8001616:	2011      	movs	r0, #17
 8001618:	f7ff fca8 	bl	8000f6c <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 800161c:	2040      	movs	r0, #64	; 0x40
 800161e:	f7ff fcf9 	bl	8001014 <SX1276Read>
 8001622:	f000 0133 	and.w	r1, r0, #51	; 0x33
 8001626:	2040      	movs	r0, #64	; 0x40
 8001628:	f7ff fca0 	bl	8000f6c <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 800162c:	2100      	movs	r1, #0
 800162e:	200f      	movs	r0, #15
 8001630:	f7ff fc9c 	bl	8000f6c <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8001634:	2100      	movs	r1, #0
 8001636:	200d      	movs	r0, #13
 8001638:	f7ff fc98 	bl	8000f6c <SX1276Write>
        break;
 800163c:	e72e      	b.n	800149c <SX1276SetRx+0x68>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800163e:	211f      	movs	r1, #31
 8001640:	2011      	movs	r0, #17
 8001642:	f7ff fc93 	bl	8000f6c <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8001646:	2040      	movs	r0, #64	; 0x40
 8001648:	f7ff fce4 	bl	8001014 <SX1276Read>
 800164c:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8001650:	2040      	movs	r0, #64	; 0x40
 8001652:	f7ff fc8b 	bl	8000f6c <SX1276Write>
 8001656:	e7e9      	b.n	800162c <SX1276SetRx+0x1f8>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8001658:	4c0f      	ldr	r4, [pc, #60]	; (8001698 <SX1276SetRx+0x264>)
 800165a:	4629      	mov	r1, r5
 800165c:	4620      	mov	r0, r4
 800165e:	f005 fd71 	bl	8007144 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8001662:	4620      	mov	r0, r4
 8001664:	f005 fcc0 	bl	8006fe8 <TimerStart>
 8001668:	e724      	b.n	80014b4 <SX1276SetRx+0x80>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800166a:	2005      	movs	r0, #5
 800166c:	f7ff fe74 	bl	8001358 <SX1276SetOpMode>
        TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8001670:	4c0a      	ldr	r4, [pc, #40]	; (800169c <SX1276SetRx+0x268>)
 8001672:	4b07      	ldr	r3, [pc, #28]	; (8001690 <SX1276SetRx+0x25c>)
 8001674:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001676:	4620      	mov	r0, r4
 8001678:	f005 fd64 	bl	8007144 <TimerSetValue>
        TimerStart( &RxTimeoutSyncWord );
 800167c:	4620      	mov	r0, r4
 800167e:	f005 fcb3 	bl	8006fe8 <TimerStart>
 8001682:	e722      	b.n	80014ca <SX1276SetRx+0x96>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8001684:	2005      	movs	r0, #5
 8001686:	f7ff fe67 	bl	8001358 <SX1276SetOpMode>
 800168a:	e71e      	b.n	80014ca <SX1276SetRx+0x96>
 800168c:	2000057c 	.word	0x2000057c
 8001690:	200005ac 	.word	0x200005ac
 8001694:	200000c8 	.word	0x200000c8
 8001698:	20000614 	.word	0x20000614
 800169c:	20000594 	.word	0x20000594

080016a0 <SX1276SetTx>:
{
 80016a0:	b510      	push	{r4, lr}
 80016a2:	4604      	mov	r4, r0
    TimerStop( &RxTimeoutTimer );
 80016a4:	4829      	ldr	r0, [pc, #164]	; (800174c <SX1276SetTx+0xac>)
 80016a6:	f005 fd11 	bl	80070cc <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80016aa:	4621      	mov	r1, r4
 80016ac:	4828      	ldr	r0, [pc, #160]	; (8001750 <SX1276SetTx+0xb0>)
 80016ae:	f005 fd49 	bl	8007144 <TimerSetValue>
    switch( SX1276.Settings.Modem )
 80016b2:	4b28      	ldr	r3, [pc, #160]	; (8001754 <SX1276SetTx+0xb4>)
 80016b4:	795b      	ldrb	r3, [r3, #5]
 80016b6:	b15b      	cbz	r3, 80016d0 <SX1276SetTx+0x30>
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d024      	beq.n	8001706 <SX1276SetTx+0x66>
    SX1276.Settings.State = RF_TX_RUNNING;
 80016bc:	4b25      	ldr	r3, [pc, #148]	; (8001754 <SX1276SetTx+0xb4>)
 80016be:	2202      	movs	r2, #2
 80016c0:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 80016c2:	4823      	ldr	r0, [pc, #140]	; (8001750 <SX1276SetTx+0xb0>)
 80016c4:	f005 fc90 	bl	8006fe8 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80016c8:	2003      	movs	r0, #3
 80016ca:	f7ff fe45 	bl	8001358 <SX1276SetOpMode>
}
 80016ce:	bd10      	pop	{r4, pc}
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80016d0:	2040      	movs	r0, #64	; 0x40
 80016d2:	f7ff fc9f 	bl	8001014 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 80016d6:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80016da:	f041 0110 	orr.w	r1, r1, #16
 80016de:	2040      	movs	r0, #64	; 0x40
 80016e0:	f7ff fc44 	bl	8000f6c <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80016e4:	2041      	movs	r0, #65	; 0x41
 80016e6:	f7ff fc95 	bl	8001014 <SX1276Read>
 80016ea:	f000 013e 	and.w	r1, r0, #62	; 0x3e
 80016ee:	2041      	movs	r0, #65	; 0x41
 80016f0:	f7ff fc3c 	bl	8000f6c <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 80016f4:	2035      	movs	r0, #53	; 0x35
 80016f6:	f7ff fc8d 	bl	8001014 <SX1276Read>
 80016fa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80016fe:	4b15      	ldr	r3, [pc, #84]	; (8001754 <SX1276SetTx+0xb4>)
 8001700:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
        break;
 8001704:	e7da      	b.n	80016bc <SX1276SetTx+0x1c>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8001706:	4b13      	ldr	r3, [pc, #76]	; (8001754 <SX1276SetTx+0xb4>)
 8001708:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800170c:	b973      	cbnz	r3, 800172c <SX1276SetTx+0x8c>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800170e:	21f7      	movs	r1, #247	; 0xf7
 8001710:	2011      	movs	r0, #17
 8001712:	f7ff fc2b 	bl	8000f6c <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8001716:	2040      	movs	r0, #64	; 0x40
 8001718:	f7ff fc7c 	bl	8001014 <SX1276Read>
 800171c:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8001720:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001724:	2040      	movs	r0, #64	; 0x40
 8001726:	f7ff fc21 	bl	8000f6c <SX1276Write>
 800172a:	e7c7      	b.n	80016bc <SX1276SetTx+0x1c>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800172c:	21f5      	movs	r1, #245	; 0xf5
 800172e:	2011      	movs	r0, #17
 8001730:	f7ff fc1c 	bl	8000f6c <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8001734:	2040      	movs	r0, #64	; 0x40
 8001736:	f7ff fc6d 	bl	8001014 <SX1276Read>
 800173a:	f000 0133 	and.w	r1, r0, #51	; 0x33
 800173e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001742:	2040      	movs	r0, #64	; 0x40
 8001744:	f7ff fc12 	bl	8000f6c <SX1276Write>
 8001748:	e7b8      	b.n	80016bc <SX1276SetTx+0x1c>
 800174a:	bf00      	nop
 800174c:	20000614 	.word	0x20000614
 8001750:	2000057c 	.word	0x2000057c
 8001754:	200005ac 	.word	0x200005ac

08001758 <SX1276StartCad>:
{
 8001758:	b508      	push	{r3, lr}
    switch( SX1276.Settings.Modem )
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <SX1276StartCad+0x30>)
 800175c:	795b      	ldrb	r3, [r3, #5]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d111      	bne.n	8001786 <SX1276StartCad+0x2e>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8001762:	21fa      	movs	r1, #250	; 0xfa
 8001764:	2011      	movs	r0, #17
 8001766:	f7ff fc01 	bl	8000f6c <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 800176a:	2040      	movs	r0, #64	; 0x40
 800176c:	f7ff fc52 	bl	8001014 <SX1276Read>
 8001770:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
 8001774:	2040      	movs	r0, #64	; 0x40
 8001776:	f7ff fbf9 	bl	8000f6c <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 800177a:	4b03      	ldr	r3, [pc, #12]	; (8001788 <SX1276StartCad+0x30>)
 800177c:	2203      	movs	r2, #3
 800177e:	711a      	strb	r2, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8001780:	2007      	movs	r0, #7
 8001782:	f7ff fde9 	bl	8001358 <SX1276SetOpMode>
}
 8001786:	bd08      	pop	{r3, pc}
 8001788:	200005ac 	.word	0x200005ac

0800178c <SX1276SetModem>:
{
 800178c:	b510      	push	{r4, lr}
 800178e:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8001790:	2001      	movs	r0, #1
 8001792:	f7ff fc3f 	bl	8001014 <SX1276Read>
 8001796:	f010 0f80 	tst.w	r0, #128	; 0x80
 800179a:	d11f      	bne.n	80017dc <SX1276SetModem+0x50>
        SX1276.Settings.Modem = MODEM_FSK;
 800179c:	4b1b      	ldr	r3, [pc, #108]	; (800180c <SX1276SetModem+0x80>)
 800179e:	2200      	movs	r2, #0
 80017a0:	715a      	strb	r2, [r3, #5]
    if( SX1276.Settings.Modem == modem )
 80017a2:	4b1a      	ldr	r3, [pc, #104]	; (800180c <SX1276SetModem+0x80>)
 80017a4:	795b      	ldrb	r3, [r3, #5]
 80017a6:	42a3      	cmp	r3, r4
 80017a8:	d017      	beq.n	80017da <SX1276SetModem+0x4e>
    SX1276.Settings.Modem = modem;
 80017aa:	4b18      	ldr	r3, [pc, #96]	; (800180c <SX1276SetModem+0x80>)
 80017ac:	715c      	strb	r4, [r3, #5]
    switch( SX1276.Settings.Modem )
 80017ae:	2c01      	cmp	r4, #1
 80017b0:	d118      	bne.n	80017e4 <SX1276SetModem+0x58>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 80017b2:	2000      	movs	r0, #0
 80017b4:	f7ff fdd0 	bl	8001358 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 80017b8:	2001      	movs	r0, #1
 80017ba:	f7ff fc2b 	bl	8001014 <SX1276Read>
 80017be:	f060 017f 	orn	r1, r0, #127	; 0x7f
 80017c2:	b2c9      	uxtb	r1, r1
 80017c4:	2001      	movs	r0, #1
 80017c6:	f7ff fbd1 	bl	8000f6c <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 80017ca:	2100      	movs	r1, #0
 80017cc:	2040      	movs	r0, #64	; 0x40
 80017ce:	f7ff fbcd 	bl	8000f6c <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 80017d2:	2100      	movs	r1, #0
 80017d4:	2041      	movs	r0, #65	; 0x41
 80017d6:	f7ff fbc9 	bl	8000f6c <SX1276Write>
}
 80017da:	bd10      	pop	{r4, pc}
        SX1276.Settings.Modem = MODEM_LORA;
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <SX1276SetModem+0x80>)
 80017de:	2201      	movs	r2, #1
 80017e0:	715a      	strb	r2, [r3, #5]
 80017e2:	e7de      	b.n	80017a2 <SX1276SetModem+0x16>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 80017e4:	2000      	movs	r0, #0
 80017e6:	f7ff fdb7 	bl	8001358 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 80017ea:	2001      	movs	r0, #1
 80017ec:	f7ff fc12 	bl	8001014 <SX1276Read>
 80017f0:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 80017f4:	2001      	movs	r0, #1
 80017f6:	f7ff fbb9 	bl	8000f6c <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 80017fa:	2100      	movs	r1, #0
 80017fc:	2040      	movs	r0, #64	; 0x40
 80017fe:	f7ff fbb5 	bl	8000f6c <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8001802:	2130      	movs	r1, #48	; 0x30
 8001804:	2041      	movs	r0, #65	; 0x41
 8001806:	f7ff fbb1 	bl	8000f6c <SX1276Write>
        break;
 800180a:	e7e6      	b.n	80017da <SX1276SetModem+0x4e>
 800180c:	200005ac 	.word	0x200005ac

08001810 <SX1276Init>:
{
 8001810:	b538      	push	{r3, r4, r5, lr}
    RadioEvents = events;
 8001812:	4c1f      	ldr	r4, [pc, #124]	; (8001890 <SX1276Init+0x80>)
 8001814:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8001818:	4d1e      	ldr	r5, [pc, #120]	; (8001894 <SX1276Init+0x84>)
 800181a:	4629      	mov	r1, r5
 800181c:	481e      	ldr	r0, [pc, #120]	; (8001898 <SX1276Init+0x88>)
 800181e:	f005 fbd9 	bl	8006fd4 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8001822:	4629      	mov	r1, r5
 8001824:	481d      	ldr	r0, [pc, #116]	; (800189c <SX1276Init+0x8c>)
 8001826:	f005 fbd5 	bl	8006fd4 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 800182a:	4629      	mov	r1, r5
 800182c:	481c      	ldr	r0, [pc, #112]	; (80018a0 <SX1276Init+0x90>)
 800182e:	f005 fbd1 	bl	8006fd4 <TimerInit>
    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 8001832:	6823      	ldr	r3, [r4, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2001      	movs	r0, #1
 8001838:	4798      	blx	r3
    SX1276Reset( );
 800183a:	f7ff fb53 	bl	8000ee4 <SX1276Reset>
    RxChainCalibration( );
 800183e:	f7ff fbf5 	bl	800102c <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8001842:	2000      	movs	r0, #0
 8001844:	f7ff fd88 	bl	8001358 <SX1276SetOpMode>
    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 8001848:	6823      	ldr	r3, [r4, #0]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	4815      	ldr	r0, [pc, #84]	; (80018a4 <SX1276Init+0x94>)
 800184e:	4798      	blx	r3
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8001850:	2400      	movs	r4, #0
 8001852:	e00f      	b.n	8001874 <SX1276Init+0x64>
        SX1276SetModem( RadioRegsInit[i].Modem );
 8001854:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001858:	4d13      	ldr	r5, [pc, #76]	; (80018a8 <SX1276Init+0x98>)
 800185a:	441d      	add	r5, r3
 800185c:	f895 00b0 	ldrb.w	r0, [r5, #176]	; 0xb0
 8001860:	f7ff ff94 	bl	800178c <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8001864:	f895 10b2 	ldrb.w	r1, [r5, #178]	; 0xb2
 8001868:	f895 00b1 	ldrb.w	r0, [r5, #177]	; 0xb1
 800186c:	f7ff fb7e 	bl	8000f6c <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8001870:	3401      	adds	r4, #1
 8001872:	b2e4      	uxtb	r4, r4
 8001874:	2c0f      	cmp	r4, #15
 8001876:	d9ed      	bls.n	8001854 <SX1276Init+0x44>
    SX1276SetModem( MODEM_FSK );
 8001878:	2000      	movs	r0, #0
 800187a:	f7ff ff87 	bl	800178c <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <SX1276Init+0x9c>)
 8001880:	2200      	movs	r2, #0
 8001882:	711a      	strb	r2, [r3, #4]
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8001884:	4b02      	ldr	r3, [pc, #8]	; (8001890 <SX1276Init+0x80>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	4798      	blx	r3
}
 800188c:	3002      	adds	r0, #2
 800188e:	bd38      	pop	{r3, r4, r5, pc}
 8001890:	200000c4 	.word	0x200000c4
 8001894:	080025f1 	.word	0x080025f1
 8001898:	2000057c 	.word	0x2000057c
 800189c:	20000614 	.word	0x20000614
 80018a0:	20000594 	.word	0x20000594
 80018a4:	20000000 	.word	0x20000000
 80018a8:	080080d0 	.word	0x080080d0
 80018ac:	200005ac 	.word	0x200005ac

080018b0 <SX1276IsChannelFree>:
{
 80018b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018b2:	4604      	mov	r4, r0
 80018b4:	460f      	mov	r7, r1
 80018b6:	4616      	mov	r6, r2
 80018b8:	461d      	mov	r5, r3
    if( SX1276GetStatus( ) != RF_IDLE )
 80018ba:	f7ff fb0d 	bl	8000ed8 <SX1276GetStatus>
 80018be:	b110      	cbz	r0, 80018c6 <SX1276IsChannelFree+0x16>
        return false;
 80018c0:	2400      	movs	r4, #0
}
 80018c2:	4620      	mov	r0, r4
 80018c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SX1276SetModem( modem );
 80018c6:	4620      	mov	r0, r4
 80018c8:	f7ff ff60 	bl	800178c <SX1276SetModem>
    SX1276SetChannel( freq );
 80018cc:	4638      	mov	r0, r7
 80018ce:	f7ff fb59 	bl	8000f84 <SX1276SetChannel>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80018d2:	2005      	movs	r0, #5
 80018d4:	f7ff fd40 	bl	8001358 <SX1276SetOpMode>
    DelayMs( 1 );
 80018d8:	2001      	movs	r0, #1
 80018da:	f005 f89c 	bl	8006a16 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 80018de:	f005 fc43 	bl	8007168 <TimerGetCurrentTime>
 80018e2:	4607      	mov	r7, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80018e4:	4638      	mov	r0, r7
 80018e6:	f005 fc45 	bl	8007174 <TimerGetElapsedTime>
 80018ea:	42a8      	cmp	r0, r5
 80018ec:	d206      	bcs.n	80018fc <SX1276IsChannelFree+0x4c>
        rssi = SX1276ReadRssi( modem );
 80018ee:	4620      	mov	r0, r4
 80018f0:	f7ff fd0c 	bl	800130c <SX1276ReadRssi>
        if( rssi > rssiThresh )
 80018f4:	42b0      	cmp	r0, r6
 80018f6:	ddf5      	ble.n	80018e4 <SX1276IsChannelFree+0x34>
            status = false;
 80018f8:	2400      	movs	r4, #0
 80018fa:	e000      	b.n	80018fe <SX1276IsChannelFree+0x4e>
    bool status = true;
 80018fc:	2401      	movs	r4, #1
    SX1276SetSleep( );
 80018fe:	f7ff fd5f 	bl	80013c0 <SX1276SetSleep>
    return status;
 8001902:	e7de      	b.n	80018c2 <SX1276IsChannelFree+0x12>

08001904 <SX1276Random>:
{
 8001904:	b538      	push	{r3, r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
 8001906:	2001      	movs	r0, #1
 8001908:	f7ff ff40 	bl	800178c <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800190c:	21ff      	movs	r1, #255	; 0xff
 800190e:	2011      	movs	r0, #17
 8001910:	f7ff fb2c 	bl	8000f6c <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8001914:	2005      	movs	r0, #5
 8001916:	f7ff fd1f 	bl	8001358 <SX1276SetOpMode>
    uint32_t rnd = 0;
 800191a:	2500      	movs	r5, #0
    for( i = 0; i < 32; i++ )
 800191c:	462c      	mov	r4, r5
 800191e:	e00b      	b.n	8001938 <SX1276Random+0x34>
        DelayMs( 1 );
 8001920:	2001      	movs	r0, #1
 8001922:	f005 f878 	bl	8006a16 <HAL_Delay>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8001926:	202c      	movs	r0, #44	; 0x2c
 8001928:	f7ff fb74 	bl	8001014 <SX1276Read>
 800192c:	f000 0001 	and.w	r0, r0, #1
 8001930:	40a0      	lsls	r0, r4
 8001932:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 8001934:	3401      	adds	r4, #1
 8001936:	b2e4      	uxtb	r4, r4
 8001938:	2c1f      	cmp	r4, #31
 800193a:	d9f1      	bls.n	8001920 <SX1276Random+0x1c>
    SX1276SetSleep( );
 800193c:	f7ff fd40 	bl	80013c0 <SX1276SetSleep>
}
 8001940:	4628      	mov	r0, r5
 8001942:	bd38      	pop	{r3, r4, r5, pc}
 8001944:	0000      	movs	r0, r0
	...

08001948 <SX1276SetRxConfig>:
{
 8001948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800194c:	b085      	sub	sp, #20
 800194e:	4605      	mov	r5, r0
 8001950:	9102      	str	r1, [sp, #8]
 8001952:	4614      	mov	r4, r2
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	f8bd 803c 	ldrh.w	r8, [sp, #60]	; 0x3c
 800195a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800195e:	9303      	str	r3, [sp, #12]
 8001960:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8001964:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
 8001968:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 800196c:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 8001970:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
    SX1276SetModem( modem );
 8001974:	f7ff ff0a 	bl	800178c <SX1276SetModem>
    switch( modem )
 8001978:	b12d      	cbz	r5, 8001986 <SX1276SetRxConfig+0x3e>
 800197a:	2d01      	cmp	r5, #1
 800197c:	f000 8083 	beq.w	8001a86 <SX1276SetRxConfig+0x13e>
}
 8001980:	b005      	add	sp, #20
 8001982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8001986:	4dae      	ldr	r5, [pc, #696]	; (8001c40 <SX1276SetRxConfig+0x2f8>)
 8001988:	9b02      	ldr	r3, [sp, #8]
 800198a:	616b      	str	r3, [r5, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 800198c:	61ec      	str	r4, [r5, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800198e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001990:	61aa      	str	r2, [r5, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8001992:	f885 7022 	strb.w	r7, [r5, #34]	; 0x22
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8001996:	f885 9023 	strb.w	r9, [r5, #35]	; 0x23
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800199a:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800199e:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 80019a2:	f885 a026 	strb.w	sl, [r5, #38]	; 0x26
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80019a6:	f8a5 8020 	strh.w	r8, [r5, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 80019aa:	4620      	mov	r0, r4
 80019ac:	f7fe fda2 	bl	80004f4 <__aeabi_ui2d>
 80019b0:	4682      	mov	sl, r0
 80019b2:	468b      	mov	fp, r1
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	2000      	movs	r0, #0
 80019ba:	49a2      	ldr	r1, [pc, #648]	; (8001c44 <SX1276SetRxConfig+0x2fc>)
 80019bc:	f7fe ff3e 	bl	800083c <__aeabi_ddiv>
 80019c0:	2200      	movs	r2, #0
 80019c2:	4ba1      	ldr	r3, [pc, #644]	; (8001c48 <SX1276SetRxConfig+0x300>)
 80019c4:	f7fe fe10 	bl	80005e8 <__aeabi_dmul>
 80019c8:	e9cd 0100 	strd	r0, r1, [sp]
 80019cc:	9803      	ldr	r0, [sp, #12]
 80019ce:	f7fe fda1 	bl	8000514 <__aeabi_i2d>
 80019d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80019d6:	f7fe fe07 	bl	80005e8 <__aeabi_dmul>
 80019da:	2200      	movs	r2, #0
 80019dc:	4b9b      	ldr	r3, [pc, #620]	; (8001c4c <SX1276SetRxConfig+0x304>)
 80019de:	f7fe fe03 	bl	80005e8 <__aeabi_dmul>
 80019e2:	f7ff f89b 	bl	8000b1c <__aeabi_d2uiz>
 80019e6:	62e8      	str	r0, [r5, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80019e8:	4652      	mov	r2, sl
 80019ea:	465b      	mov	r3, fp
 80019ec:	a192      	add	r1, pc, #584	; (adr r1, 8001c38 <SX1276SetRxConfig+0x2f0>)
 80019ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019f2:	f7fe ff23 	bl	800083c <__aeabi_ddiv>
 80019f6:	f7ff f891 	bl	8000b1c <__aeabi_d2uiz>
 80019fa:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80019fc:	0a21      	lsrs	r1, r4, #8
 80019fe:	2002      	movs	r0, #2
 8001a00:	f7ff fab4 	bl	8000f6c <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8001a04:	b2e1      	uxtb	r1, r4
 8001a06:	2003      	movs	r0, #3
 8001a08:	f7ff fab0 	bl	8000f6c <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8001a0c:	9802      	ldr	r0, [sp, #8]
 8001a0e:	f7ff fa25 	bl	8000e5c <GetFskBandwidthRegValue>
 8001a12:	4601      	mov	r1, r0
 8001a14:	2012      	movs	r0, #18
 8001a16:	f7ff faa9 	bl	8000f6c <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8001a1a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001a1c:	f7ff fa1e 	bl	8000e5c <GetFskBandwidthRegValue>
 8001a20:	4601      	mov	r1, r0
 8001a22:	2013      	movs	r0, #19
 8001a24:	f7ff faa2 	bl	8000f6c <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8001a28:	ea4f 2118 	mov.w	r1, r8, lsr #8
 8001a2c:	2025      	movs	r0, #37	; 0x25
 8001a2e:	f7ff fa9d 	bl	8000f6c <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8001a32:	fa5f f188 	uxtb.w	r1, r8
 8001a36:	2026      	movs	r0, #38	; 0x26
 8001a38:	f7ff fa98 	bl	8000f6c <SX1276Write>
            if( fixLen == 1 )
 8001a3c:	b1df      	cbz	r7, 8001a76 <SX1276SetRxConfig+0x12e>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8001a3e:	4649      	mov	r1, r9
 8001a40:	2032      	movs	r0, #50	; 0x32
 8001a42:	f7ff fa93 	bl	8000f6c <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8001a46:	2030      	movs	r0, #48	; 0x30
 8001a48:	f7ff fae4 	bl	8001014 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8001a4c:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8001a50:	b1b7      	cbz	r7, 8001a80 <SX1276SetRxConfig+0x138>
 8001a52:	2300      	movs	r3, #0
 8001a54:	4319      	orrs	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8001a56:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
 8001a5a:	b2c9      	uxtb	r1, r1
 8001a5c:	2030      	movs	r0, #48	; 0x30
 8001a5e:	f7ff fa85 	bl	8000f6c <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8001a62:	2031      	movs	r0, #49	; 0x31
 8001a64:	f7ff fad6 	bl	8001014 <SX1276Read>
 8001a68:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8001a6c:	b2c9      	uxtb	r1, r1
 8001a6e:	2031      	movs	r0, #49	; 0x31
 8001a70:	f7ff fa7c 	bl	8000f6c <SX1276Write>
        break;
 8001a74:	e784      	b.n	8001980 <SX1276SetRxConfig+0x38>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8001a76:	21ff      	movs	r1, #255	; 0xff
 8001a78:	2032      	movs	r0, #50	; 0x32
 8001a7a:	f7ff fa77 	bl	8000f6c <SX1276Write>
 8001a7e:	e7e2      	b.n	8001a46 <SX1276SetRxConfig+0xfe>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8001a80:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001a84:	e7e6      	b.n	8001a54 <SX1276SetRxConfig+0x10c>
            if( bandwidth > 2 )
 8001a86:	9b02      	ldr	r3, [sp, #8]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d900      	bls.n	8001a8e <SX1276SetRxConfig+0x146>
 8001a8c:	e7fe      	b.n	8001a8c <SX1276SetRxConfig+0x144>
            bandwidth += 7;
 8001a8e:	9d02      	ldr	r5, [sp, #8]
 8001a90:	3507      	adds	r5, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8001a92:	4b6b      	ldr	r3, [pc, #428]	; (8001c40 <SX1276SetRxConfig+0x2f8>)
 8001a94:	645d      	str	r5, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8001a96:	649c      	str	r4, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8001a98:	9a00      	ldr	r2, [sp, #0]
 8001a9a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8001a9e:	f8a3 804e 	strh.w	r8, [r3, #78]	; 0x4e
            SX1276.Settings.LoRa.FixLen = fixLen;
 8001aa2:	f883 7050 	strb.w	r7, [r3, #80]	; 0x50
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8001aa6:	f883 9051 	strb.w	r9, [r3, #81]	; 0x51
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8001aaa:	f883 6052 	strb.w	r6, [r3, #82]	; 0x52
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8001aae:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8001ab2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8001ab6:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8001aba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8001abe:	f883 b055 	strb.w	fp, [r3, #85]	; 0x55
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8001ac2:	f883 a056 	strb.w	sl, [r3, #86]	; 0x56
            if( datarate > 12 )
 8001ac6:	2c0c      	cmp	r4, #12
 8001ac8:	d803      	bhi.n	8001ad2 <SX1276SetRxConfig+0x18a>
            else if( datarate < 6 )
 8001aca:	2c05      	cmp	r4, #5
 8001acc:	d802      	bhi.n	8001ad4 <SX1276SetRxConfig+0x18c>
                datarate = 6;
 8001ace:	2406      	movs	r4, #6
 8001ad0:	e000      	b.n	8001ad4 <SX1276SetRxConfig+0x18c>
                datarate = 12;
 8001ad2:	240c      	movs	r4, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8001ad4:	2d07      	cmp	r5, #7
 8001ad6:	d063      	beq.n	8001ba0 <SX1276SetRxConfig+0x258>
 8001ad8:	2d08      	cmp	r5, #8
 8001ada:	d06a      	beq.n	8001bb2 <SX1276SetRxConfig+0x26a>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8001adc:	4b58      	ldr	r3, [pc, #352]	; (8001c40 <SX1276SetRxConfig+0x2f8>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8001ae4:	201d      	movs	r0, #29
 8001ae6:	f7ff fa95 	bl	8001014 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8001aea:	012b      	lsls	r3, r5, #4
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	9b00      	ldr	r3, [sp, #0]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	4313      	orrs	r3, r2
            SX1276Write( REG_LR_MODEMCONFIG1,
 8001af6:	ea43 0107 	orr.w	r1, r3, r7
 8001afa:	201d      	movs	r0, #29
 8001afc:	f7ff fa36 	bl	8000f6c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8001b00:	201e      	movs	r0, #30
 8001b02:	f7ff fa87 	bl	8001014 <SX1276Read>
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8001b06:	f000 0008 	and.w	r0, r0, #8
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8001b0a:	0122      	lsls	r2, r4, #4
 8001b0c:	b2d2      	uxtb	r2, r2
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8001b0e:	4302      	orrs	r2, r0
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8001b10:	00b3      	lsls	r3, r6, #2
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	4313      	orrs	r3, r2
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8001b16:	9e03      	ldr	r6, [sp, #12]
 8001b18:	f3c6 2101 	ubfx	r1, r6, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8001b1c:	4319      	orrs	r1, r3
 8001b1e:	201e      	movs	r0, #30
 8001b20:	f7ff fa24 	bl	8000f6c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8001b24:	2026      	movs	r0, #38	; 0x26
 8001b26:	f7ff fa75 	bl	8001014 <SX1276Read>
 8001b2a:	b241      	sxtb	r1, r0
 8001b2c:	f021 0108 	bic.w	r1, r1, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8001b30:	4b43      	ldr	r3, [pc, #268]	; (8001c40 <SX1276SetRxConfig+0x2f8>)
 8001b32:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8001b36:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8001b3a:	b2c9      	uxtb	r1, r1
 8001b3c:	2026      	movs	r0, #38	; 0x26
 8001b3e:	f7ff fa15 	bl	8000f6c <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8001b42:	b2f1      	uxtb	r1, r6
 8001b44:	201f      	movs	r0, #31
 8001b46:	f7ff fa11 	bl	8000f6c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8001b4a:	ea4f 2118 	mov.w	r1, r8, lsr #8
 8001b4e:	2020      	movs	r0, #32
 8001b50:	f7ff fa0c 	bl	8000f6c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8001b54:	fa5f f188 	uxtb.w	r1, r8
 8001b58:	2021      	movs	r0, #33	; 0x21
 8001b5a:	f7ff fa07 	bl	8000f6c <SX1276Write>
            if( fixLen == 1 )
 8001b5e:	bb5f      	cbnz	r7, 8001bb8 <SX1276SetRxConfig+0x270>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8001b60:	4b37      	ldr	r3, [pc, #220]	; (8001c40 <SX1276SetRxConfig+0x2f8>)
 8001b62:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001b66:	bb63      	cbnz	r3, 8001bc2 <SX1276SetRxConfig+0x27a>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8001b68:	2d09      	cmp	r5, #9
 8001b6a:	d03a      	beq.n	8001be2 <SX1276SetRxConfig+0x29a>
            else if( bandwidth == 9 )
 8001b6c:	2d09      	cmp	r5, #9
 8001b6e:	d046      	beq.n	8001bfe <SX1276SetRxConfig+0x2b6>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8001b70:	2103      	movs	r1, #3
 8001b72:	2036      	movs	r0, #54	; 0x36
 8001b74:	f7ff f9fa 	bl	8000f6c <SX1276Write>
            if( datarate == 6 )
 8001b78:	2c06      	cmp	r4, #6
 8001b7a:	d049      	beq.n	8001c10 <SX1276SetRxConfig+0x2c8>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8001b7c:	2031      	movs	r0, #49	; 0x31
 8001b7e:	f7ff fa49 	bl	8001014 <SX1276Read>
 8001b82:	b241      	sxtb	r1, r0
 8001b84:	f021 0107 	bic.w	r1, r1, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8001b88:	f041 0103 	orr.w	r1, r1, #3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8001b8c:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 8001b90:	2031      	movs	r0, #49	; 0x31
 8001b92:	f7ff f9eb 	bl	8000f6c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8001b96:	210a      	movs	r1, #10
 8001b98:	2037      	movs	r0, #55	; 0x37
 8001b9a:	f7ff f9e7 	bl	8000f6c <SX1276Write>
}
 8001b9e:	e6ef      	b.n	8001980 <SX1276SetRxConfig+0x38>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8001ba0:	f1a4 030b 	sub.w	r3, r4, #11
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d897      	bhi.n	8001ad8 <SX1276SetRxConfig+0x190>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8001ba8:	4b25      	ldr	r3, [pc, #148]	; (8001c40 <SX1276SetRxConfig+0x2f8>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8001bb0:	e798      	b.n	8001ae4 <SX1276SetRxConfig+0x19c>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8001bb2:	2c0c      	cmp	r4, #12
 8001bb4:	d192      	bne.n	8001adc <SX1276SetRxConfig+0x194>
 8001bb6:	e7f7      	b.n	8001ba8 <SX1276SetRxConfig+0x260>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8001bb8:	4649      	mov	r1, r9
 8001bba:	2022      	movs	r0, #34	; 0x22
 8001bbc:	f7ff f9d6 	bl	8000f6c <SX1276Write>
 8001bc0:	e7ce      	b.n	8001b60 <SX1276SetRxConfig+0x218>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8001bc2:	2044      	movs	r0, #68	; 0x44
 8001bc4:	f7ff fa26 	bl	8001014 <SX1276Read>
 8001bc8:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8001bcc:	b2c9      	uxtb	r1, r1
 8001bce:	2044      	movs	r0, #68	; 0x44
 8001bd0:	f7ff f9cc 	bl	8000f6c <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <SX1276SetRxConfig+0x2f8>)
 8001bd6:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
 8001bda:	2024      	movs	r0, #36	; 0x24
 8001bdc:	f7ff f9c6 	bl	8000f6c <SX1276Write>
 8001be0:	e7c2      	b.n	8001b68 <SX1276SetRxConfig+0x220>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8001be2:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <SX1276SetRxConfig+0x2f8>)
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <SX1276SetRxConfig+0x308>)
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d9bf      	bls.n	8001b6c <SX1276SetRxConfig+0x224>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8001bec:	2102      	movs	r1, #2
 8001bee:	2036      	movs	r0, #54	; 0x36
 8001bf0:	f7ff f9bc 	bl	8000f6c <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8001bf4:	2164      	movs	r1, #100	; 0x64
 8001bf6:	203a      	movs	r0, #58	; 0x3a
 8001bf8:	f7ff f9b8 	bl	8000f6c <SX1276Write>
 8001bfc:	e7bc      	b.n	8001b78 <SX1276SetRxConfig+0x230>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8001bfe:	2102      	movs	r1, #2
 8001c00:	2036      	movs	r0, #54	; 0x36
 8001c02:	f7ff f9b3 	bl	8000f6c <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8001c06:	217f      	movs	r1, #127	; 0x7f
 8001c08:	203a      	movs	r0, #58	; 0x3a
 8001c0a:	f7ff f9af 	bl	8000f6c <SX1276Write>
 8001c0e:	e7b3      	b.n	8001b78 <SX1276SetRxConfig+0x230>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8001c10:	2031      	movs	r0, #49	; 0x31
 8001c12:	f7ff f9ff 	bl	8001014 <SX1276Read>
 8001c16:	b241      	sxtb	r1, r0
 8001c18:	f021 0107 	bic.w	r1, r1, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8001c1c:	f041 0105 	orr.w	r1, r1, #5
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8001c20:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 8001c24:	2031      	movs	r0, #49	; 0x31
 8001c26:	f7ff f9a1 	bl	8000f6c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8001c2a:	210c      	movs	r1, #12
 8001c2c:	2037      	movs	r0, #55	; 0x37
 8001c2e:	f7ff f99d 	bl	8000f6c <SX1276Write>
 8001c32:	e6a5      	b.n	8001980 <SX1276SetRxConfig+0x38>
 8001c34:	f3af 8000 	nop.w
 8001c38:	00000000 	.word	0x00000000
 8001c3c:	417e8480 	.word	0x417e8480
 8001c40:	200005ac 	.word	0x200005ac
 8001c44:	3ff00000 	.word	0x3ff00000
 8001c48:	40200000 	.word	0x40200000
 8001c4c:	408f4000 	.word	0x408f4000
 8001c50:	1f4add40 	.word	0x1f4add40
 8001c54:	00000000 	.word	0x00000000

08001c58 <SX1276SetTxConfig>:
{
 8001c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c5c:	b085      	sub	sp, #20
 8001c5e:	9002      	str	r0, [sp, #8]
 8001c60:	9101      	str	r1, [sp, #4]
 8001c62:	9203      	str	r2, [sp, #12]
 8001c64:	461c      	mov	r4, r3
 8001c66:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8001c68:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 8001c6c:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
 8001c70:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8001c74:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8001c78:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
 8001c7c:	f89d b054 	ldrb.w	fp, [sp, #84]	; 0x54
    SX1276SetModem( modem );
 8001c80:	f7ff fd84 	bl	800178c <SX1276SetModem>
    LoRaBoardCallbacks->SX1276BoardSetRfTxPower( power );
 8001c84:	4b8a      	ldr	r3, [pc, #552]	; (8001eb0 <SX1276SetTxConfig+0x258>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	9801      	ldr	r0, [sp, #4]
 8001c8c:	4798      	blx	r3
    switch( modem )
 8001c8e:	9b02      	ldr	r3, [sp, #8]
 8001c90:	b123      	cbz	r3, 8001c9c <SX1276SetTxConfig+0x44>
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d05e      	beq.n	8001d54 <SX1276SetTxConfig+0xfc>
}
 8001c96:	b005      	add	sp, #20
 8001c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
 8001c9c:	4b85      	ldr	r3, [pc, #532]	; (8001eb4 <SX1276SetTxConfig+0x25c>)
 8001c9e:	9a01      	ldr	r2, [sp, #4]
 8001ca0:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 8001ca2:	9803      	ldr	r0, [sp, #12]
 8001ca4:	6118      	str	r0, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8001ca6:	615c      	str	r4, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8001ca8:	61dd      	str	r5, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8001caa:	841f      	strh	r7, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8001cac:	f883 9022 	strb.w	r9, [r3, #34]	; 0x22
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8001cb0:	f883 6024 	strb.w	r6, [r3, #36]	; 0x24
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8001cb4:	f883 b025 	strb.w	fp, [r3, #37]	; 0x25
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8001cb8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8001cba:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8001cbc:	f7fe fc1a 	bl	80004f4 <__aeabi_ui2d>
 8001cc0:	a377      	add	r3, pc, #476	; (adr r3, 8001ea0 <SX1276SetTxConfig+0x248>)
 8001cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc6:	f7fe fdb9 	bl	800083c <__aeabi_ddiv>
 8001cca:	f7fe ff27 	bl	8000b1c <__aeabi_d2uiz>
 8001cce:	b284      	uxth	r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8001cd0:	0a21      	lsrs	r1, r4, #8
 8001cd2:	2004      	movs	r0, #4
 8001cd4:	f7ff f94a 	bl	8000f6c <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8001cd8:	b2e1      	uxtb	r1, r4
 8001cda:	2005      	movs	r0, #5
 8001cdc:	f7ff f946 	bl	8000f6c <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8001ce0:	4628      	mov	r0, r5
 8001ce2:	f7fe fc07 	bl	80004f4 <__aeabi_ui2d>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	a16f      	add	r1, pc, #444	; (adr r1, 8001ea8 <SX1276SetTxConfig+0x250>)
 8001cec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cf0:	f7fe fda4 	bl	800083c <__aeabi_ddiv>
 8001cf4:	f7fe ff12 	bl	8000b1c <__aeabi_d2uiz>
 8001cf8:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8001cfa:	0a21      	lsrs	r1, r4, #8
 8001cfc:	2002      	movs	r0, #2
 8001cfe:	f7ff f935 	bl	8000f6c <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8001d02:	b2e1      	uxtb	r1, r4
 8001d04:	2003      	movs	r0, #3
 8001d06:	f7ff f931 	bl	8000f6c <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8001d0a:	0a39      	lsrs	r1, r7, #8
 8001d0c:	2025      	movs	r0, #37	; 0x25
 8001d0e:	f7ff f92d 	bl	8000f6c <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8001d12:	b2f9      	uxtb	r1, r7
 8001d14:	2026      	movs	r0, #38	; 0x26
 8001d16:	f7ff f929 	bl	8000f6c <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8001d1a:	2030      	movs	r0, #48	; 0x30
 8001d1c:	f7ff f97a 	bl	8001014 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8001d20:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8001d24:	f1b9 0f00 	cmp.w	r9, #0
 8001d28:	d011      	beq.n	8001d4e <SX1276SetTxConfig+0xf6>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	4319      	orrs	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8001d2e:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
 8001d32:	b2c9      	uxtb	r1, r1
 8001d34:	2030      	movs	r0, #48	; 0x30
 8001d36:	f7ff f919 	bl	8000f6c <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8001d3a:	2031      	movs	r0, #49	; 0x31
 8001d3c:	f7ff f96a 	bl	8001014 <SX1276Read>
 8001d40:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8001d44:	b2c9      	uxtb	r1, r1
 8001d46:	2031      	movs	r0, #49	; 0x31
 8001d48:	f7ff f910 	bl	8000f6c <SX1276Write>
        break;
 8001d4c:	e7a3      	b.n	8001c96 <SX1276SetTxConfig+0x3e>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8001d4e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001d52:	e7eb      	b.n	8001d2c <SX1276SetTxConfig+0xd4>
            SX1276.Settings.LoRa.Power = power;
 8001d54:	4b57      	ldr	r3, [pc, #348]	; (8001eb4 <SX1276SetTxConfig+0x25c>)
 8001d56:	9a01      	ldr	r2, [sp, #4]
 8001d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            if( bandwidth > 2 )
 8001d5c:	2c02      	cmp	r4, #2
 8001d5e:	d900      	bls.n	8001d62 <SX1276SetTxConfig+0x10a>
 8001d60:	e7fe      	b.n	8001d60 <SX1276SetTxConfig+0x108>
            bandwidth += 7;
 8001d62:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8001d64:	4b53      	ldr	r3, [pc, #332]	; (8001eb4 <SX1276SetTxConfig+0x25c>)
 8001d66:	645c      	str	r4, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8001d68:	649d      	str	r5, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8001d6a:	f883 804d 	strb.w	r8, [r3, #77]	; 0x4d
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8001d6e:	f8a3 704e 	strh.w	r7, [r3, #78]	; 0x4e
            SX1276.Settings.LoRa.FixLen = fixLen;
 8001d72:	f883 9050 	strb.w	r9, [r3, #80]	; 0x50
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8001d76:	f883 a053 	strb.w	sl, [r3, #83]	; 0x53
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8001d7a:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8001d7e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8001d82:	f883 6052 	strb.w	r6, [r3, #82]	; 0x52
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8001d86:	f883 b055 	strb.w	fp, [r3, #85]	; 0x55
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8001d8a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8001d8c:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 8001d8e:	2d0c      	cmp	r5, #12
 8001d90:	d803      	bhi.n	8001d9a <SX1276SetTxConfig+0x142>
            else if( datarate < 6 )
 8001d92:	2d05      	cmp	r5, #5
 8001d94:	d802      	bhi.n	8001d9c <SX1276SetTxConfig+0x144>
                datarate = 6;
 8001d96:	2506      	movs	r5, #6
 8001d98:	e000      	b.n	8001d9c <SX1276SetTxConfig+0x144>
                datarate = 12;
 8001d9a:	250c      	movs	r5, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8001d9c:	2c07      	cmp	r4, #7
 8001d9e:	d04f      	beq.n	8001e40 <SX1276SetTxConfig+0x1e8>
 8001da0:	2c08      	cmp	r4, #8
 8001da2:	d056      	beq.n	8001e52 <SX1276SetTxConfig+0x1fa>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8001da4:	4b43      	ldr	r3, [pc, #268]	; (8001eb4 <SX1276SetTxConfig+0x25c>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8001dac:	f1ba 0f00 	cmp.w	sl, #0
 8001db0:	d152      	bne.n	8001e58 <SX1276SetTxConfig+0x200>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8001db2:	201d      	movs	r0, #29
 8001db4:	f7ff f92e 	bl	8001014 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8001db8:	0121      	lsls	r1, r4, #4
 8001dba:	b2c9      	uxtb	r1, r1
 8001dbc:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8001dc4:	ea41 0109 	orr.w	r1, r1, r9
 8001dc8:	201d      	movs	r0, #29
 8001dca:	f7ff f8cf 	bl	8000f6c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8001dce:	201e      	movs	r0, #30
 8001dd0:	f7ff f920 	bl	8001014 <SX1276Read>
                           RFLR_MODEMCONFIG2_SF_MASK &
 8001dd4:	f000 010b 	and.w	r1, r0, #11
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8001dd8:	012b      	lsls	r3, r5, #4
 8001dda:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8001ddc:	4319      	orrs	r1, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8001dde:	00b3      	lsls	r3, r6, #2
 8001de0:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8001de2:	4319      	orrs	r1, r3
 8001de4:	201e      	movs	r0, #30
 8001de6:	f7ff f8c1 	bl	8000f6c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8001dea:	2026      	movs	r0, #38	; 0x26
 8001dec:	f7ff f912 	bl	8001014 <SX1276Read>
 8001df0:	b241      	sxtb	r1, r0
 8001df2:	f021 0108 	bic.w	r1, r1, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8001df6:	4b2f      	ldr	r3, [pc, #188]	; (8001eb4 <SX1276SetTxConfig+0x25c>)
 8001df8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8001dfc:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8001e00:	b2c9      	uxtb	r1, r1
 8001e02:	2026      	movs	r0, #38	; 0x26
 8001e04:	f7ff f8b2 	bl	8000f6c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8001e08:	0a39      	lsrs	r1, r7, #8
 8001e0a:	2020      	movs	r0, #32
 8001e0c:	f7ff f8ae 	bl	8000f6c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8001e10:	b2f9      	uxtb	r1, r7
 8001e12:	2021      	movs	r0, #33	; 0x21
 8001e14:	f7ff f8aa 	bl	8000f6c <SX1276Write>
            if( datarate == 6 )
 8001e18:	2d06      	cmp	r5, #6
 8001e1a:	d02d      	beq.n	8001e78 <SX1276SetTxConfig+0x220>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8001e1c:	2031      	movs	r0, #49	; 0x31
 8001e1e:	f7ff f8f9 	bl	8001014 <SX1276Read>
 8001e22:	b241      	sxtb	r1, r0
 8001e24:	f021 0107 	bic.w	r1, r1, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8001e28:	f041 0103 	orr.w	r1, r1, #3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8001e2c:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 8001e30:	2031      	movs	r0, #49	; 0x31
 8001e32:	f7ff f89b 	bl	8000f6c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8001e36:	210a      	movs	r1, #10
 8001e38:	2037      	movs	r0, #55	; 0x37
 8001e3a:	f7ff f897 	bl	8000f6c <SX1276Write>
}
 8001e3e:	e72a      	b.n	8001c96 <SX1276SetTxConfig+0x3e>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8001e40:	f1a5 030b 	sub.w	r3, r5, #11
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d8ab      	bhi.n	8001da0 <SX1276SetTxConfig+0x148>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8001e48:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <SX1276SetTxConfig+0x25c>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8001e50:	e7ac      	b.n	8001dac <SX1276SetTxConfig+0x154>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8001e52:	2d0c      	cmp	r5, #12
 8001e54:	d1a6      	bne.n	8001da4 <SX1276SetTxConfig+0x14c>
 8001e56:	e7f7      	b.n	8001e48 <SX1276SetTxConfig+0x1f0>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8001e58:	2044      	movs	r0, #68	; 0x44
 8001e5a:	f7ff f8db 	bl	8001014 <SX1276Read>
 8001e5e:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8001e62:	b2c9      	uxtb	r1, r1
 8001e64:	2044      	movs	r0, #68	; 0x44
 8001e66:	f7ff f881 	bl	8000f6c <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8001e6a:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <SX1276SetTxConfig+0x25c>)
 8001e6c:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
 8001e70:	2024      	movs	r0, #36	; 0x24
 8001e72:	f7ff f87b 	bl	8000f6c <SX1276Write>
 8001e76:	e79c      	b.n	8001db2 <SX1276SetTxConfig+0x15a>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8001e78:	2031      	movs	r0, #49	; 0x31
 8001e7a:	f7ff f8cb 	bl	8001014 <SX1276Read>
 8001e7e:	b241      	sxtb	r1, r0
 8001e80:	f021 0107 	bic.w	r1, r1, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8001e84:	f041 0105 	orr.w	r1, r1, #5
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8001e88:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 8001e8c:	2031      	movs	r0, #49	; 0x31
 8001e8e:	f7ff f86d 	bl	8000f6c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8001e92:	210c      	movs	r1, #12
 8001e94:	2037      	movs	r0, #55	; 0x37
 8001e96:	f7ff f869 	bl	8000f6c <SX1276Write>
 8001e9a:	e6fc      	b.n	8001c96 <SX1276SetTxConfig+0x3e>
 8001e9c:	f3af 8000 	nop.w
 8001ea0:	00000000 	.word	0x00000000
 8001ea4:	404e8480 	.word	0x404e8480
 8001ea8:	00000000 	.word	0x00000000
 8001eac:	417e8480 	.word	0x417e8480
 8001eb0:	200000c4 	.word	0x200000c4
 8001eb4:	200005ac 	.word	0x200005ac

08001eb8 <SX1276SetTxContinuousWave>:
{
 8001eb8:	b530      	push	{r4, r5, lr}
 8001eba:	b08b      	sub	sp, #44	; 0x2c
 8001ebc:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )( time * 1000 );
 8001ebe:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001ec2:	fb04 f402 	mul.w	r4, r4, r2
    SX1276SetChannel( freq );
 8001ec6:	f7ff f85d 	bl	8000f84 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8001eca:	9408      	str	r4, [sp, #32]
 8001ecc:	2000      	movs	r0, #0
 8001ece:	9007      	str	r0, [sp, #28]
 8001ed0:	9006      	str	r0, [sp, #24]
 8001ed2:	9005      	str	r0, [sp, #20]
 8001ed4:	9004      	str	r0, [sp, #16]
 8001ed6:	9003      	str	r0, [sp, #12]
 8001ed8:	2305      	movs	r3, #5
 8001eda:	9302      	str	r3, [sp, #8]
 8001edc:	9001      	str	r0, [sp, #4]
 8001ede:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	4629      	mov	r1, r5
 8001eea:	f7ff feb5 	bl	8001c58 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8001eee:	2031      	movs	r0, #49	; 0x31
 8001ef0:	f7ff f890 	bl	8001014 <SX1276Read>
 8001ef4:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
 8001ef8:	2031      	movs	r0, #49	; 0x31
 8001efa:	f7ff f837 	bl	8000f6c <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8001efe:	21f0      	movs	r1, #240	; 0xf0
 8001f00:	2040      	movs	r0, #64	; 0x40
 8001f02:	f7ff f833 	bl	8000f6c <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8001f06:	21a0      	movs	r1, #160	; 0xa0
 8001f08:	2041      	movs	r0, #65	; 0x41
 8001f0a:	f7ff f82f 	bl	8000f6c <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8001f0e:	4d08      	ldr	r5, [pc, #32]	; (8001f30 <SX1276SetTxContinuousWave+0x78>)
 8001f10:	4621      	mov	r1, r4
 8001f12:	4628      	mov	r0, r5
 8001f14:	f005 f916 	bl	8007144 <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <SX1276SetTxContinuousWave+0x7c>)
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8001f1e:	4628      	mov	r0, r5
 8001f20:	f005 f862 	bl	8006fe8 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8001f24:	2003      	movs	r0, #3
 8001f26:	f7ff fa17 	bl	8001358 <SX1276SetOpMode>
}
 8001f2a:	b00b      	add	sp, #44	; 0x2c
 8001f2c:	bd30      	pop	{r4, r5, pc}
 8001f2e:	bf00      	nop
 8001f30:	2000057c 	.word	0x2000057c
 8001f34:	200005ac 	.word	0x200005ac

08001f38 <SX1276OnDio2Irq>:
{
 8001f38:	b538      	push	{r3, r4, r5, lr}
    switch( SX1276.Settings.State )
 8001f3a:	4b38      	ldr	r3, [pc, #224]	; (800201c <SX1276OnDio2Irq+0xe4>)
 8001f3c:	791b      	ldrb	r3, [r3, #4]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d002      	beq.n	8001f48 <SX1276OnDio2Irq+0x10>
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d04d      	beq.n	8001fe2 <SX1276OnDio2Irq+0xaa>
}
 8001f46:	bd38      	pop	{r3, r4, r5, pc}
            switch( SX1276.Settings.Modem )
 8001f48:	4b34      	ldr	r3, [pc, #208]	; (800201c <SX1276OnDio2Irq+0xe4>)
 8001f4a:	795b      	ldrb	r3, [r3, #5]
 8001f4c:	b1cb      	cbz	r3, 8001f82 <SX1276OnDio2Irq+0x4a>
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d1f9      	bne.n	8001f46 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8001f52:	4b32      	ldr	r3, [pc, #200]	; (800201c <SX1276OnDio2Irq+0xe4>)
 8001f54:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f4      	beq.n	8001f46 <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8001f5c:	2102      	movs	r1, #2
 8001f5e:	2012      	movs	r0, #18
 8001f60:	f7ff f804 	bl	8000f6c <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8001f64:	4b2e      	ldr	r3, [pc, #184]	; (8002020 <SX1276OnDio2Irq+0xe8>)
 8001f66:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0eb      	beq.n	8001f46 <SX1276OnDio2Irq+0xe>
 8001f6e:	695c      	ldr	r4, [r3, #20]
 8001f70:	2c00      	cmp	r4, #0
 8001f72:	d0e8      	beq.n	8001f46 <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8001f74:	201c      	movs	r0, #28
 8001f76:	f7ff f84d 	bl	8001014 <SX1276Read>
 8001f7a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8001f7e:	47a0      	blx	r4
 8001f80:	e7e1      	b.n	8001f46 <SX1276OnDio2Irq+0xe>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8001f82:	4b26      	ldr	r3, [pc, #152]	; (800201c <SX1276OnDio2Irq+0xe4>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 8001f8a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d1da      	bne.n	8001f46 <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 8001f90:	4824      	ldr	r0, [pc, #144]	; (8002024 <SX1276OnDio2Irq+0xec>)
 8001f92:	f005 f89b 	bl	80070cc <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8001f96:	4d21      	ldr	r5, [pc, #132]	; (800201c <SX1276OnDio2Irq+0xe4>)
 8001f98:	2301      	movs	r3, #1
 8001f9a:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8001f9e:	2011      	movs	r0, #17
 8001fa0:	f7ff f838 	bl	8001014 <SX1276Read>
 8001fa4:	0840      	lsrs	r0, r0, #1
 8001fa6:	4240      	negs	r0, r0
 8001fa8:	f885 0032 	strb.w	r0, [r5, #50]	; 0x32
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8001fac:	201b      	movs	r0, #27
 8001fae:	f7ff f831 	bl	8001014 <SX1276Read>
 8001fb2:	0204      	lsls	r4, r0, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8001fb4:	201c      	movs	r0, #28
 8001fb6:	f7ff f82d 	bl	8001014 <SX1276Read>
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8001fba:	4320      	orrs	r0, r4
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8001fbc:	0a02      	lsrs	r2, r0, #8
 8001fbe:	f643 5109 	movw	r1, #15625	; 0x3d09
 8001fc2:	b2c3      	uxtb	r3, r0
 8001fc4:	fb01 f303 	mul.w	r3, r1, r3
 8001fc8:	3380      	adds	r3, #128	; 0x80
 8001fca:	0a1b      	lsrs	r3, r3, #8
 8001fcc:	fb01 3302 	mla	r3, r1, r2, r3
 8001fd0:	636b      	str	r3, [r5, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8001fd2:	200c      	movs	r0, #12
 8001fd4:	f7ff f81e 	bl	8001014 <SX1276Read>
 8001fd8:	f3c0 1047 	ubfx	r0, r0, #5, #8
 8001fdc:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 8001fe0:	e7b1      	b.n	8001f46 <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <SX1276OnDio2Irq+0xe4>)
 8001fe4:	795b      	ldrb	r3, [r3, #5]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d1ad      	bne.n	8001f46 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8001fea:	4b0c      	ldr	r3, [pc, #48]	; (800201c <SX1276OnDio2Irq+0xe4>)
 8001fec:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0a8      	beq.n	8001f46 <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8001ff4:	2102      	movs	r1, #2
 8001ff6:	2012      	movs	r0, #18
 8001ff8:	f7fe ffb8 	bl	8000f6c <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <SX1276OnDio2Irq+0xe8>)
 8001ffe:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002002:	2b00      	cmp	r3, #0
 8002004:	d09f      	beq.n	8001f46 <SX1276OnDio2Irq+0xe>
 8002006:	695c      	ldr	r4, [r3, #20]
 8002008:	2c00      	cmp	r4, #0
 800200a:	d09c      	beq.n	8001f46 <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800200c:	201c      	movs	r0, #28
 800200e:	f7ff f801 	bl	8001014 <SX1276Read>
 8002012:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8002016:	47a0      	blx	r4
}
 8002018:	e795      	b.n	8001f46 <SX1276OnDio2Irq+0xe>
 800201a:	bf00      	nop
 800201c:	200005ac 	.word	0x200005ac
 8002020:	200000c4 	.word	0x200000c4
 8002024:	20000594 	.word	0x20000594

08002028 <SX1276OnDio3Irq>:
{
 8002028:	b508      	push	{r3, lr}
    switch( SX1276.Settings.Modem )
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <SX1276OnDio3Irq+0x4c>)
 800202c:	795b      	ldrb	r3, [r3, #5]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d11e      	bne.n	8002070 <SX1276OnDio3Irq+0x48>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8002032:	2012      	movs	r0, #18
 8002034:	f7fe ffee 	bl	8001014 <SX1276Read>
 8002038:	f010 0f01 	tst.w	r0, #1
 800203c:	d00c      	beq.n	8002058 <SX1276OnDio3Irq+0x30>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 800203e:	2105      	movs	r1, #5
 8002040:	2012      	movs	r0, #18
 8002042:	f7fe ff93 	bl	8000f6c <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8002046:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <SX1276OnDio3Irq+0x50>)
 8002048:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800204c:	b183      	cbz	r3, 8002070 <SX1276OnDio3Irq+0x48>
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	b173      	cbz	r3, 8002070 <SX1276OnDio3Irq+0x48>
                RadioEvents->CadDone( true );
 8002052:	2001      	movs	r0, #1
 8002054:	4798      	blx	r3
 8002056:	e00b      	b.n	8002070 <SX1276OnDio3Irq+0x48>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8002058:	2104      	movs	r1, #4
 800205a:	2012      	movs	r0, #18
 800205c:	f7fe ff86 	bl	8000f6c <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <SX1276OnDio3Irq+0x50>)
 8002062:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002066:	b11b      	cbz	r3, 8002070 <SX1276OnDio3Irq+0x48>
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	b10b      	cbz	r3, 8002070 <SX1276OnDio3Irq+0x48>
                RadioEvents->CadDone( false );
 800206c:	2000      	movs	r0, #0
 800206e:	4798      	blx	r3
}
 8002070:	bd08      	pop	{r3, pc}
 8002072:	bf00      	nop
 8002074:	200005ac 	.word	0x200005ac
 8002078:	200000c4 	.word	0x200000c4

0800207c <SX1276WriteFifo>:
{
 800207c:	b508      	push	{r3, lr}
    SX1276WriteBuffer( 0, buffer, size );
 800207e:	460a      	mov	r2, r1
 8002080:	4601      	mov	r1, r0
 8002082:	2000      	movs	r0, #0
 8002084:	f7fe ff54 	bl	8000f30 <SX1276WriteBuffer>
}
 8002088:	bd08      	pop	{r3, pc}
	...

0800208c <SX1276Send>:
{
 800208c:	b530      	push	{r4, r5, lr}
 800208e:	b083      	sub	sp, #12
 8002090:	4605      	mov	r5, r0
 8002092:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
 8002096:	4b40      	ldr	r3, [pc, #256]	; (8002198 <SX1276Send+0x10c>)
 8002098:	795b      	ldrb	r3, [r3, #5]
 800209a:	b11b      	cbz	r3, 80020a4 <SX1276Send+0x18>
 800209c:	2b01      	cmp	r3, #1
 800209e:	d035      	beq.n	800210c <SX1276Send+0x80>
    uint32_t txTimeout = 0;
 80020a0:	2000      	movs	r0, #0
 80020a2:	e022      	b.n	80020ea <SX1276Send+0x5e>
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80020a4:	4b3c      	ldr	r3, [pc, #240]	; (8002198 <SX1276Send+0x10c>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 80020aa:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80020ae:	8759      	strh	r1, [r3, #58]	; 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 80020b0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80020b4:	b9eb      	cbnz	r3, 80020f2 <SX1276Send+0x66>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 80020b6:	2101      	movs	r1, #1
 80020b8:	f10d 0007 	add.w	r0, sp, #7
 80020bc:	f7ff ffde 	bl	800207c <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 80020c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80020c4:	1e53      	subs	r3, r2, #1
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b3f      	cmp	r3, #63	; 0x3f
 80020ca:	d816      	bhi.n	80020fa <SX1276Send+0x6e>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 80020cc:	4b32      	ldr	r3, [pc, #200]	; (8002198 <SX1276Send+0x10c>)
 80020ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 80020d2:	4c31      	ldr	r4, [pc, #196]	; (8002198 <SX1276Send+0x10c>)
 80020d4:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 80020d8:	4628      	mov	r0, r5
 80020da:	f7ff ffcf 	bl	800207c <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80020de:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80020e2:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 80020e4:	4413      	add	r3, r2
 80020e6:	87a3      	strh	r3, [r4, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 80020e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    SX1276SetTx( txTimeout );
 80020ea:	f7ff fad9 	bl	80016a0 <SX1276SetTx>
}
 80020ee:	b003      	add	sp, #12
 80020f0:	bd30      	pop	{r4, r5, pc}
                SX1276Write( REG_PAYLOADLENGTH, size );
 80020f2:	2032      	movs	r0, #50	; 0x32
 80020f4:	f7fe ff3a 	bl	8000f6c <SX1276Write>
 80020f8:	e7e2      	b.n	80020c0 <SX1276Send+0x34>
                memcpy1( RxTxBuffer, buffer, size );
 80020fa:	4629      	mov	r1, r5
 80020fc:	4827      	ldr	r0, [pc, #156]	; (800219c <SX1276Send+0x110>)
 80020fe:	f005 f8c3 	bl	8007288 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8002102:	4b25      	ldr	r3, [pc, #148]	; (8002198 <SX1276Send+0x10c>)
 8002104:	2220      	movs	r2, #32
 8002106:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800210a:	e7e2      	b.n	80020d2 <SX1276Send+0x46>
            if( SX1276.Settings.LoRa.IqInverted == true )
 800210c:	4b22      	ldr	r3, [pc, #136]	; (8002198 <SX1276Send+0x10c>)
 800210e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002112:	b34b      	cbz	r3, 8002168 <SX1276Send+0xdc>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8002114:	2033      	movs	r0, #51	; 0x33
 8002116:	f7fe ff7d 	bl	8001014 <SX1276Read>
 800211a:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 800211e:	2033      	movs	r0, #51	; 0x33
 8002120:	f7fe ff24 	bl	8000f6c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8002124:	2119      	movs	r1, #25
 8002126:	203b      	movs	r0, #59	; 0x3b
 8002128:	f7fe ff20 	bl	8000f6c <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 800212c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002130:	4b19      	ldr	r3, [pc, #100]	; (8002198 <SX1276Send+0x10c>)
 8002132:	f883 1064 	strb.w	r1, [r3, #100]	; 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8002136:	2022      	movs	r0, #34	; 0x22
 8002138:	f7fe ff18 	bl	8000f6c <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 800213c:	2100      	movs	r1, #0
 800213e:	200e      	movs	r0, #14
 8002140:	f7fe ff14 	bl	8000f6c <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8002144:	2100      	movs	r1, #0
 8002146:	200d      	movs	r0, #13
 8002148:	f7fe ff10 	bl	8000f6c <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 800214c:	2001      	movs	r0, #1
 800214e:	f7fe ff61 	bl	8001014 <SX1276Read>
 8002152:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
 8002156:	d019      	beq.n	800218c <SX1276Send+0x100>
            SX1276WriteFifo( buffer, size );
 8002158:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800215c:	4628      	mov	r0, r5
 800215e:	f7ff ff8d 	bl	800207c <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8002162:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <SX1276Send+0x10c>)
 8002164:	6d98      	ldr	r0, [r3, #88]	; 0x58
        break;
 8002166:	e7c0      	b.n	80020ea <SX1276Send+0x5e>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8002168:	2033      	movs	r0, #51	; 0x33
 800216a:	f7fe ff53 	bl	8001014 <SX1276Read>
 800216e:	b241      	sxtb	r1, r0
 8002170:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8002174:	f041 0101 	orr.w	r1, r1, #1
 8002178:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
 800217c:	2033      	movs	r0, #51	; 0x33
 800217e:	f7fe fef5 	bl	8000f6c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8002182:	211d      	movs	r1, #29
 8002184:	203b      	movs	r0, #59	; 0x3b
 8002186:	f7fe fef1 	bl	8000f6c <SX1276Write>
 800218a:	e7cf      	b.n	800212c <SX1276Send+0xa0>
                SX1276SetStby( );
 800218c:	f7ff f938 	bl	8001400 <SX1276SetStby>
                DelayMs( 1 );
 8002190:	2001      	movs	r0, #1
 8002192:	f004 fc40 	bl	8006a16 <HAL_Delay>
 8002196:	e7df      	b.n	8002158 <SX1276Send+0xcc>
 8002198:	200005ac 	.word	0x200005ac
 800219c:	200000c8 	.word	0x200000c8

080021a0 <SX1276ReadFifo>:
{
 80021a0:	b508      	push	{r3, lr}
    SX1276ReadBuffer( 0, buffer, size );
 80021a2:	460a      	mov	r2, r1
 80021a4:	4601      	mov	r1, r0
 80021a6:	2000      	movs	r0, #0
 80021a8:	f7fe ff14 	bl	8000fd4 <SX1276ReadBuffer>
}
 80021ac:	bd08      	pop	{r3, pc}
	...

080021b0 <SX1276OnDio0Irq>:
{
 80021b0:	b510      	push	{r4, lr}
 80021b2:	b082      	sub	sp, #8
    volatile uint8_t irqFlags = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
 80021ba:	4baa      	ldr	r3, [pc, #680]	; (8002464 <SX1276OnDio0Irq+0x2b4>)
 80021bc:	791b      	ldrb	r3, [r3, #4]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d004      	beq.n	80021cc <SX1276OnDio0Irq+0x1c>
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	f000 8133 	beq.w	800242e <SX1276OnDio0Irq+0x27e>
}
 80021c8:	b002      	add	sp, #8
 80021ca:	bd10      	pop	{r4, pc}
            switch( SX1276.Settings.Modem )
 80021cc:	4ba5      	ldr	r3, [pc, #660]	; (8002464 <SX1276OnDio0Irq+0x2b4>)
 80021ce:	795b      	ldrb	r3, [r3, #5]
 80021d0:	b343      	cbz	r3, 8002224 <SX1276OnDio0Irq+0x74>
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d1f8      	bne.n	80021c8 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 80021d6:	2140      	movs	r1, #64	; 0x40
 80021d8:	2012      	movs	r0, #18
 80021da:	f7fe fec7 	bl	8000f6c <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 80021de:	2012      	movs	r0, #18
 80021e0:	f7fe ff18 	bl	8001014 <SX1276Read>
 80021e4:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 80021e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80021ec:	f013 0f20 	tst.w	r3, #32
 80021f0:	f000 80b4 	beq.w	800235c <SX1276OnDio0Irq+0x1ac>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 80021f4:	2120      	movs	r1, #32
 80021f6:	2012      	movs	r0, #18
 80021f8:	f7fe feb8 	bl	8000f6c <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 80021fc:	4b99      	ldr	r3, [pc, #612]	; (8002464 <SX1276OnDio0Irq+0x2b4>)
 80021fe:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002202:	b913      	cbnz	r3, 800220a <SX1276OnDio0Irq+0x5a>
                            SX1276.Settings.State = RF_IDLE;
 8002204:	4b97      	ldr	r3, [pc, #604]	; (8002464 <SX1276OnDio0Irq+0x2b4>)
 8002206:	2200      	movs	r2, #0
 8002208:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 800220a:	4897      	ldr	r0, [pc, #604]	; (8002468 <SX1276OnDio0Irq+0x2b8>)
 800220c:	f004 ff5e 	bl	80070cc <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8002210:	4b96      	ldr	r3, [pc, #600]	; (800246c <SX1276OnDio0Irq+0x2bc>)
 8002212:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0d6      	beq.n	80021c8 <SX1276OnDio0Irq+0x18>
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0d3      	beq.n	80021c8 <SX1276OnDio0Irq+0x18>
                            RadioEvents->RxError( );
 8002220:	4798      	blx	r3
 8002222:	e7d1      	b.n	80021c8 <SX1276OnDio0Irq+0x18>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8002224:	4b8f      	ldr	r3, [pc, #572]	; (8002464 <SX1276OnDio0Irq+0x2b4>)
 8002226:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800222a:	b9db      	cbnz	r3, 8002264 <SX1276OnDio0Irq+0xb4>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800222c:	4b8d      	ldr	r3, [pc, #564]	; (8002464 <SX1276OnDio0Irq+0x2b4>)
 800222e:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 8002230:	2900      	cmp	r1, #0
 8002232:	d159      	bne.n	80022e8 <SX1276OnDio0Irq+0x138>
 8002234:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002236:	2b00      	cmp	r3, #0
 8002238:	d156      	bne.n	80022e8 <SX1276OnDio0Irq+0x138>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800223a:	4b8a      	ldr	r3, [pc, #552]	; (8002464 <SX1276OnDio0Irq+0x2b4>)
 800223c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002240:	2b00      	cmp	r3, #0
 8002242:	d14b      	bne.n	80022dc <SX1276OnDio0Irq+0x12c>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8002244:	2101      	movs	r1, #1
 8002246:	488a      	ldr	r0, [pc, #552]	; (8002470 <SX1276OnDio0Irq+0x2c0>)
 8002248:	f7ff ffaa 	bl	80021a0 <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800224c:	4c85      	ldr	r4, [pc, #532]	; (8002464 <SX1276OnDio0Irq+0x2b4>)
 800224e:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8002250:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8002252:	1ac9      	subs	r1, r1, r3
 8002254:	b2c9      	uxtb	r1, r1
 8002256:	4887      	ldr	r0, [pc, #540]	; (8002474 <SX1276OnDio0Irq+0x2c4>)
 8002258:	4418      	add	r0, r3
 800225a:	f7ff ffa1 	bl	80021a0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800225e:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8002260:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8002262:	e04b      	b.n	80022fc <SX1276OnDio0Irq+0x14c>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8002264:	203f      	movs	r0, #63	; 0x3f
 8002266:	f7fe fed5 	bl	8001014 <SX1276Read>
 800226a:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 800226e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002272:	f013 0f02 	tst.w	r3, #2
 8002276:	d1d9      	bne.n	800222c <SX1276OnDio0Irq+0x7c>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8002278:	210b      	movs	r1, #11
 800227a:	203e      	movs	r0, #62	; 0x3e
 800227c:	f7fe fe76 	bl	8000f6c <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8002280:	2110      	movs	r1, #16
 8002282:	203f      	movs	r0, #63	; 0x3f
 8002284:	f7fe fe72 	bl	8000f6c <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8002288:	4877      	ldr	r0, [pc, #476]	; (8002468 <SX1276OnDio0Irq+0x2b8>)
 800228a:	f004 ff1f 	bl	80070cc <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 800228e:	4b75      	ldr	r3, [pc, #468]	; (8002464 <SX1276OnDio0Irq+0x2b4>)
 8002290:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002294:	b9ab      	cbnz	r3, 80022c2 <SX1276OnDio0Irq+0x112>
                            TimerStop( &RxTimeoutSyncWord );
 8002296:	4878      	ldr	r0, [pc, #480]	; (8002478 <SX1276OnDio0Irq+0x2c8>)
 8002298:	f004 ff18 	bl	80070cc <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 800229c:	4b71      	ldr	r3, [pc, #452]	; (8002464 <SX1276OnDio0Irq+0x2b4>)
 800229e:	2200      	movs	r2, #0
 80022a0:	711a      	strb	r2, [r3, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80022a2:	4b72      	ldr	r3, [pc, #456]	; (800246c <SX1276OnDio0Irq+0x2bc>)
 80022a4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80022a8:	b113      	cbz	r3, 80022b0 <SX1276OnDio0Irq+0x100>
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	b103      	cbz	r3, 80022b0 <SX1276OnDio0Irq+0x100>
                            RadioEvents->RxError( );
 80022ae:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80022b0:	4b6c      	ldr	r3, [pc, #432]	; (8002464 <SX1276OnDio0Irq+0x2b4>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80022b8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80022bc:	879a      	strh	r2, [r3, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 80022be:	875a      	strh	r2, [r3, #58]	; 0x3a
                        break;
 80022c0:	e782      	b.n	80021c8 <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80022c2:	200d      	movs	r0, #13
 80022c4:	f7fe fea6 	bl	8001014 <SX1276Read>
 80022c8:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80022cc:	b2c9      	uxtb	r1, r1
 80022ce:	200d      	movs	r0, #13
 80022d0:	f7fe fe4c 	bl	8000f6c <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 80022d4:	4868      	ldr	r0, [pc, #416]	; (8002478 <SX1276OnDio0Irq+0x2c8>)
 80022d6:	f004 fe87 	bl	8006fe8 <TimerStart>
 80022da:	e7e2      	b.n	80022a2 <SX1276OnDio0Irq+0xf2>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 80022dc:	2032      	movs	r0, #50	; 0x32
 80022de:	f7fe fe99 	bl	8001014 <SX1276Read>
 80022e2:	4b60      	ldr	r3, [pc, #384]	; (8002464 <SX1276OnDio0Irq+0x2b4>)
 80022e4:	8758      	strh	r0, [r3, #58]	; 0x3a
 80022e6:	e7b1      	b.n	800224c <SX1276OnDio0Irq+0x9c>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80022e8:	4c5e      	ldr	r4, [pc, #376]	; (8002464 <SX1276OnDio0Irq+0x2b4>)
 80022ea:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80022ec:	1ac9      	subs	r1, r1, r3
 80022ee:	b2c9      	uxtb	r1, r1
 80022f0:	4860      	ldr	r0, [pc, #384]	; (8002474 <SX1276OnDio0Irq+0x2c4>)
 80022f2:	4418      	add	r0, r3
 80022f4:	f7ff ff54 	bl	80021a0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80022f8:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80022fa:	87a3      	strh	r3, [r4, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 80022fc:	485a      	ldr	r0, [pc, #360]	; (8002468 <SX1276OnDio0Irq+0x2b8>)
 80022fe:	f004 fee5 	bl	80070cc <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8002302:	4b58      	ldr	r3, [pc, #352]	; (8002464 <SX1276OnDio0Irq+0x2b4>)
 8002304:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002308:	b9db      	cbnz	r3, 8002342 <SX1276OnDio0Irq+0x192>
                    SX1276.Settings.State = RF_IDLE;
 800230a:	4b56      	ldr	r3, [pc, #344]	; (8002464 <SX1276OnDio0Irq+0x2b4>)
 800230c:	2200      	movs	r2, #0
 800230e:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8002310:	4859      	ldr	r0, [pc, #356]	; (8002478 <SX1276OnDio0Irq+0x2c8>)
 8002312:	f004 fedb 	bl	80070cc <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8002316:	4b55      	ldr	r3, [pc, #340]	; (800246c <SX1276OnDio0Irq+0x2bc>)
 8002318:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800231c:	b143      	cbz	r3, 8002330 <SX1276OnDio0Irq+0x180>
 800231e:	689c      	ldr	r4, [r3, #8]
 8002320:	b134      	cbz	r4, 8002330 <SX1276OnDio0Irq+0x180>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8002322:	4950      	ldr	r1, [pc, #320]	; (8002464 <SX1276OnDio0Irq+0x2b4>)
 8002324:	2300      	movs	r3, #0
 8002326:	f991 2032 	ldrsb.w	r2, [r1, #50]	; 0x32
 800232a:	8f49      	ldrh	r1, [r1, #58]	; 0x3a
 800232c:	4851      	ldr	r0, [pc, #324]	; (8002474 <SX1276OnDio0Irq+0x2c4>)
 800232e:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8002330:	4b4c      	ldr	r3, [pc, #304]	; (8002464 <SX1276OnDio0Irq+0x2b4>)
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8002338:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800233c:	879a      	strh	r2, [r3, #60]	; 0x3c
                SX1276.Settings.FskPacketHandler.Size = 0;
 800233e:	875a      	strh	r2, [r3, #58]	; 0x3a
                break;
 8002340:	e742      	b.n	80021c8 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8002342:	200d      	movs	r0, #13
 8002344:	f7fe fe66 	bl	8001014 <SX1276Read>
 8002348:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 800234c:	b2c9      	uxtb	r1, r1
 800234e:	200d      	movs	r0, #13
 8002350:	f7fe fe0c 	bl	8000f6c <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 8002354:	4848      	ldr	r0, [pc, #288]	; (8002478 <SX1276OnDio0Irq+0x2c8>)
 8002356:	f004 fe47 	bl	8006fe8 <TimerStart>
 800235a:	e7dc      	b.n	8002316 <SX1276OnDio0Irq+0x166>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 800235c:	2019      	movs	r0, #25
 800235e:	f7fe fe59 	bl	8001014 <SX1276Read>
 8002362:	b243      	sxtb	r3, r0
 8002364:	3302      	adds	r3, #2
 8002366:	109b      	asrs	r3, r3, #2
 8002368:	4c3e      	ldr	r4, [pc, #248]	; (8002464 <SX1276OnDio0Irq+0x2b4>)
 800236a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 800236e:	201a      	movs	r0, #26
 8002370:	f7fe fe50 	bl	8001014 <SX1276Read>
 8002374:	b203      	sxth	r3, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8002376:	f994 2060 	ldrsb.w	r2, [r4, #96]	; 0x60
 800237a:	2a00      	cmp	r2, #0
 800237c:	db38      	blt.n	80023f0 <SX1276OnDio0Irq+0x240>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800237e:	4a39      	ldr	r2, [pc, #228]	; (8002464 <SX1276OnDio0Irq+0x2b4>)
 8002380:	6891      	ldr	r1, [r2, #8]
 8002382:	4a3e      	ldr	r2, [pc, #248]	; (800247c <SX1276OnDio0Irq+0x2cc>)
 8002384:	4291      	cmp	r1, r2
 8002386:	d94b      	bls.n	8002420 <SX1276OnDio0Irq+0x270>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8002388:	eb00 1023 	add.w	r0, r0, r3, asr #4
 800238c:	389d      	subs	r0, #157	; 0x9d
 800238e:	4b35      	ldr	r3, [pc, #212]	; (8002464 <SX1276OnDio0Irq+0x2b4>)
 8002390:	f8a3 0062 	strh.w	r0, [r3, #98]	; 0x62
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8002394:	2013      	movs	r0, #19
 8002396:	f7fe fe3d 	bl	8001014 <SX1276Read>
 800239a:	4c32      	ldr	r4, [pc, #200]	; (8002464 <SX1276OnDio0Irq+0x2b4>)
 800239c:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 80023a0:	2010      	movs	r0, #16
 80023a2:	f7fe fe37 	bl	8001014 <SX1276Read>
 80023a6:	4601      	mov	r1, r0
 80023a8:	200d      	movs	r0, #13
 80023aa:	f7fe fddf 	bl	8000f6c <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 80023ae:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
 80023b2:	4830      	ldr	r0, [pc, #192]	; (8002474 <SX1276OnDio0Irq+0x2c4>)
 80023b4:	f7ff fef4 	bl	80021a0 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 80023b8:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 80023bc:	b90b      	cbnz	r3, 80023c2 <SX1276OnDio0Irq+0x212>
                        SX1276.Settings.State = RF_IDLE;
 80023be:	2200      	movs	r2, #0
 80023c0:	7122      	strb	r2, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 80023c2:	4829      	ldr	r0, [pc, #164]	; (8002468 <SX1276OnDio0Irq+0x2b8>)
 80023c4:	f004 fe82 	bl	80070cc <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80023c8:	4b28      	ldr	r3, [pc, #160]	; (800246c <SX1276OnDio0Irq+0x2bc>)
 80023ca:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f43f aefa 	beq.w	80021c8 <SX1276OnDio0Irq+0x18>
 80023d4:	689c      	ldr	r4, [r3, #8]
 80023d6:	2c00      	cmp	r4, #0
 80023d8:	f43f aef6 	beq.w	80021c8 <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 80023dc:	4921      	ldr	r1, [pc, #132]	; (8002464 <SX1276OnDio0Irq+0x2b4>)
 80023de:	f991 3060 	ldrsb.w	r3, [r1, #96]	; 0x60
 80023e2:	f9b1 2062 	ldrsh.w	r2, [r1, #98]	; 0x62
 80023e6:	f891 1064 	ldrb.w	r1, [r1, #100]	; 0x64
 80023ea:	4822      	ldr	r0, [pc, #136]	; (8002474 <SX1276OnDio0Irq+0x2c4>)
 80023ec:	47a0      	blx	r4
 80023ee:	e6eb      	b.n	80021c8 <SX1276OnDio0Irq+0x18>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80023f0:	68a4      	ldr	r4, [r4, #8]
 80023f2:	4922      	ldr	r1, [pc, #136]	; (800247c <SX1276OnDio0Irq+0x2cc>)
 80023f4:	428c      	cmp	r4, r1
 80023f6:	d909      	bls.n	800240c <SX1276OnDio0Irq+0x25c>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80023f8:	eb00 1323 	add.w	r3, r0, r3, asr #4
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 80023fc:	b292      	uxth	r2, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80023fe:	fa12 f383 	uxtah	r3, r2, r3
 8002402:	3b9d      	subs	r3, #157	; 0x9d
 8002404:	4a17      	ldr	r2, [pc, #92]	; (8002464 <SX1276OnDio0Irq+0x2b4>)
 8002406:	f8a2 3062 	strh.w	r3, [r2, #98]	; 0x62
 800240a:	e7c3      	b.n	8002394 <SX1276OnDio0Irq+0x1e4>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800240c:	eb00 1323 	add.w	r3, r0, r3, asr #4
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8002410:	b292      	uxth	r2, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8002412:	fa12 f383 	uxtah	r3, r2, r3
 8002416:	3ba4      	subs	r3, #164	; 0xa4
 8002418:	4a12      	ldr	r2, [pc, #72]	; (8002464 <SX1276OnDio0Irq+0x2b4>)
 800241a:	f8a2 3062 	strh.w	r3, [r2, #98]	; 0x62
 800241e:	e7b9      	b.n	8002394 <SX1276OnDio0Irq+0x1e4>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8002420:	eb00 1023 	add.w	r0, r0, r3, asr #4
 8002424:	38a4      	subs	r0, #164	; 0xa4
 8002426:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <SX1276OnDio0Irq+0x2b4>)
 8002428:	f8a3 0062 	strh.w	r0, [r3, #98]	; 0x62
 800242c:	e7b2      	b.n	8002394 <SX1276OnDio0Irq+0x1e4>
            TimerStop( &TxTimeoutTimer );
 800242e:	4814      	ldr	r0, [pc, #80]	; (8002480 <SX1276OnDio0Irq+0x2d0>)
 8002430:	f004 fe4c 	bl	80070cc <TimerStop>
            switch( SX1276.Settings.Modem )
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <SX1276OnDio0Irq+0x2b4>)
 8002436:	795b      	ldrb	r3, [r3, #5]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d00e      	beq.n	800245a <SX1276OnDio0Irq+0x2aa>
                SX1276.Settings.State = RF_IDLE;
 800243c:	4b09      	ldr	r3, [pc, #36]	; (8002464 <SX1276OnDio0Irq+0x2b4>)
 800243e:	2200      	movs	r2, #0
 8002440:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8002442:	4b0a      	ldr	r3, [pc, #40]	; (800246c <SX1276OnDio0Irq+0x2bc>)
 8002444:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002448:	2b00      	cmp	r3, #0
 800244a:	f43f aebd 	beq.w	80021c8 <SX1276OnDio0Irq+0x18>
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	f43f aeb9 	beq.w	80021c8 <SX1276OnDio0Irq+0x18>
                    RadioEvents->TxDone( );
 8002456:	4798      	blx	r3
}
 8002458:	e6b6      	b.n	80021c8 <SX1276OnDio0Irq+0x18>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800245a:	2108      	movs	r1, #8
 800245c:	2012      	movs	r0, #18
 800245e:	f7fe fd85 	bl	8000f6c <SX1276Write>
 8002462:	e7eb      	b.n	800243c <SX1276OnDio0Irq+0x28c>
 8002464:	200005ac 	.word	0x200005ac
 8002468:	20000614 	.word	0x20000614
 800246c:	200000c4 	.word	0x200000c4
 8002470:	200005e6 	.word	0x200005e6
 8002474:	200000c8 	.word	0x200000c8
 8002478:	20000594 	.word	0x20000594
 800247c:	1f4add40 	.word	0x1f4add40
 8002480:	2000057c 	.word	0x2000057c

08002484 <SX1276OnDio1Irq>:
{
 8002484:	b510      	push	{r4, lr}
    switch( SX1276.Settings.State )
 8002486:	4b3c      	ldr	r3, [pc, #240]	; (8002578 <SX1276OnDio1Irq+0xf4>)
 8002488:	791b      	ldrb	r3, [r3, #4]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d002      	beq.n	8002494 <SX1276OnDio1Irq+0x10>
 800248e:	2b02      	cmp	r3, #2
 8002490:	d050      	beq.n	8002534 <SX1276OnDio1Irq+0xb0>
}
 8002492:	bd10      	pop	{r4, pc}
            switch( SX1276.Settings.Modem )
 8002494:	4b38      	ldr	r3, [pc, #224]	; (8002578 <SX1276OnDio1Irq+0xf4>)
 8002496:	795b      	ldrb	r3, [r3, #5]
 8002498:	b1ab      	cbz	r3, 80024c6 <SX1276OnDio1Irq+0x42>
 800249a:	2b01      	cmp	r3, #1
 800249c:	d1f9      	bne.n	8002492 <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutTimer );
 800249e:	4837      	ldr	r0, [pc, #220]	; (800257c <SX1276OnDio1Irq+0xf8>)
 80024a0:	f004 fe14 	bl	80070cc <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 80024a4:	2180      	movs	r1, #128	; 0x80
 80024a6:	2012      	movs	r0, #18
 80024a8:	f7fe fd60 	bl	8000f6c <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 80024ac:	4b32      	ldr	r3, [pc, #200]	; (8002578 <SX1276OnDio1Irq+0xf4>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80024b2:	4b33      	ldr	r3, [pc, #204]	; (8002580 <SX1276OnDio1Irq+0xfc>)
 80024b4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0ea      	beq.n	8002492 <SX1276OnDio1Irq+0xe>
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0e7      	beq.n	8002492 <SX1276OnDio1Irq+0xe>
                    RadioEvents->RxTimeout( );
 80024c2:	4798      	blx	r3
 80024c4:	e7e5      	b.n	8002492 <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 80024c6:	482f      	ldr	r0, [pc, #188]	; (8002584 <SX1276OnDio1Irq+0x100>)
 80024c8:	f004 fe00 	bl	80070cc <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80024cc:	4b2a      	ldr	r3, [pc, #168]	; (8002578 <SX1276OnDio1Irq+0xf4>)
 80024ce:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80024d0:	b953      	cbnz	r3, 80024e8 <SX1276OnDio1Irq+0x64>
 80024d2:	4b29      	ldr	r3, [pc, #164]	; (8002578 <SX1276OnDio1Irq+0xf4>)
 80024d4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80024d6:	b93b      	cbnz	r3, 80024e8 <SX1276OnDio1Irq+0x64>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80024d8:	4b27      	ldr	r3, [pc, #156]	; (8002578 <SX1276OnDio1Irq+0xf4>)
 80024da:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80024de:	b9cb      	cbnz	r3, 8002514 <SX1276OnDio1Irq+0x90>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80024e0:	2101      	movs	r1, #1
 80024e2:	4829      	ldr	r0, [pc, #164]	; (8002588 <SX1276OnDio1Irq+0x104>)
 80024e4:	f7ff fe5c 	bl	80021a0 <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 80024e8:	4b23      	ldr	r3, [pc, #140]	; (8002578 <SX1276OnDio1Irq+0xf4>)
 80024ea:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 80024ec:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80024ee:	1a88      	subs	r0, r1, r2
 80024f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024f4:	4298      	cmp	r0, r3
 80024f6:	db13      	blt.n	8002520 <SX1276OnDio1Irq+0x9c>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 80024f8:	1e59      	subs	r1, r3, #1
 80024fa:	b2c9      	uxtb	r1, r1
 80024fc:	4823      	ldr	r0, [pc, #140]	; (800258c <SX1276OnDio1Irq+0x108>)
 80024fe:	4410      	add	r0, r2
 8002500:	f7ff fe4e 	bl	80021a0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8002504:	4a1c      	ldr	r2, [pc, #112]	; (8002578 <SX1276OnDio1Irq+0xf4>)
 8002506:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 800250a:	8f91      	ldrh	r1, [r2, #60]	; 0x3c
 800250c:	440b      	add	r3, r1
 800250e:	3b01      	subs	r3, #1
 8002510:	8793      	strh	r3, [r2, #60]	; 0x3c
 8002512:	e7be      	b.n	8002492 <SX1276OnDio1Irq+0xe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8002514:	2032      	movs	r0, #50	; 0x32
 8002516:	f7fe fd7d 	bl	8001014 <SX1276Read>
 800251a:	4b17      	ldr	r3, [pc, #92]	; (8002578 <SX1276OnDio1Irq+0xf4>)
 800251c:	8758      	strh	r0, [r3, #58]	; 0x3a
 800251e:	e7e3      	b.n	80024e8 <SX1276OnDio1Irq+0x64>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8002520:	1a89      	subs	r1, r1, r2
 8002522:	b2c9      	uxtb	r1, r1
 8002524:	4819      	ldr	r0, [pc, #100]	; (800258c <SX1276OnDio1Irq+0x108>)
 8002526:	4410      	add	r0, r2
 8002528:	f7ff fe3a 	bl	80021a0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800252c:	4b12      	ldr	r3, [pc, #72]	; (8002578 <SX1276OnDio1Irq+0xf4>)
 800252e:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8002530:	879a      	strh	r2, [r3, #60]	; 0x3c
 8002532:	e7ae      	b.n	8002492 <SX1276OnDio1Irq+0xe>
            switch( SX1276.Settings.Modem )
 8002534:	4b10      	ldr	r3, [pc, #64]	; (8002578 <SX1276OnDio1Irq+0xf4>)
 8002536:	795b      	ldrb	r3, [r3, #5]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1aa      	bne.n	8002492 <SX1276OnDio1Irq+0xe>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800253c:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <SX1276OnDio1Irq+0xf4>)
 800253e:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8002540:	8f98      	ldrh	r0, [r3, #60]	; 0x3c
 8002542:	1a14      	subs	r4, r2, r0
 8002544:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 8002548:	428c      	cmp	r4, r1
 800254a:	dc09      	bgt.n	8002560 <SX1276OnDio1Irq+0xdc>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800254c:	1a11      	subs	r1, r2, r0
 800254e:	b2c9      	uxtb	r1, r1
 8002550:	4b0e      	ldr	r3, [pc, #56]	; (800258c <SX1276OnDio1Irq+0x108>)
 8002552:	4418      	add	r0, r3
 8002554:	f7ff fd92 	bl	800207c <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8002558:	4b07      	ldr	r3, [pc, #28]	; (8002578 <SX1276OnDio1Irq+0xf4>)
 800255a:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800255c:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 800255e:	e798      	b.n	8002492 <SX1276OnDio1Irq+0xe>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8002560:	4b0a      	ldr	r3, [pc, #40]	; (800258c <SX1276OnDio1Irq+0x108>)
 8002562:	4418      	add	r0, r3
 8002564:	f7ff fd8a 	bl	800207c <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8002568:	4b03      	ldr	r3, [pc, #12]	; (8002578 <SX1276OnDio1Irq+0xf4>)
 800256a:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 800256e:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 8002570:	440a      	add	r2, r1
 8002572:	879a      	strh	r2, [r3, #60]	; 0x3c
 8002574:	e78d      	b.n	8002492 <SX1276OnDio1Irq+0xe>
 8002576:	bf00      	nop
 8002578:	200005ac 	.word	0x200005ac
 800257c:	20000614 	.word	0x20000614
 8002580:	200000c4 	.word	0x200000c4
 8002584:	20000594 	.word	0x20000594
 8002588:	200005e6 	.word	0x200005e6
 800258c:	200000c8 	.word	0x200000c8

08002590 <SX1276SetMaxPayloadLength>:
{
 8002590:	b538      	push	{r3, r4, r5, lr}
 8002592:	4604      	mov	r4, r0
 8002594:	460d      	mov	r5, r1
    SX1276SetModem( modem );
 8002596:	f7ff f8f9 	bl	800178c <SX1276SetModem>
    switch( modem )
 800259a:	b114      	cbz	r4, 80025a2 <SX1276SetMaxPayloadLength+0x12>
 800259c:	2c01      	cmp	r4, #1
 800259e:	d00a      	beq.n	80025b6 <SX1276SetMaxPayloadLength+0x26>
}
 80025a0:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 80025a2:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <SX1276SetMaxPayloadLength+0x30>)
 80025a4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1f9      	bne.n	80025a0 <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
 80025ac:	4629      	mov	r1, r5
 80025ae:	2032      	movs	r0, #50	; 0x32
 80025b0:	f7fe fcdc 	bl	8000f6c <SX1276Write>
 80025b4:	e7f4      	b.n	80025a0 <SX1276SetMaxPayloadLength+0x10>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 80025b6:	4629      	mov	r1, r5
 80025b8:	2023      	movs	r0, #35	; 0x23
 80025ba:	f7fe fcd7 	bl	8000f6c <SX1276Write>
}
 80025be:	e7ef      	b.n	80025a0 <SX1276SetMaxPayloadLength+0x10>
 80025c0:	200005ac 	.word	0x200005ac

080025c4 <SX1276SetPublicNetwork>:
{
 80025c4:	b510      	push	{r4, lr}
 80025c6:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
 80025c8:	2001      	movs	r0, #1
 80025ca:	f7ff f8df 	bl	800178c <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 80025ce:	4b07      	ldr	r3, [pc, #28]	; (80025ec <SX1276SetPublicNetwork+0x28>)
 80025d0:	f883 405c 	strb.w	r4, [r3, #92]	; 0x5c
    if( enable == true )
 80025d4:	b924      	cbnz	r4, 80025e0 <SX1276SetPublicNetwork+0x1c>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 80025d6:	2112      	movs	r1, #18
 80025d8:	2039      	movs	r0, #57	; 0x39
 80025da:	f7fe fcc7 	bl	8000f6c <SX1276Write>
}
 80025de:	bd10      	pop	{r4, pc}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 80025e0:	2134      	movs	r1, #52	; 0x34
 80025e2:	2039      	movs	r0, #57	; 0x39
 80025e4:	f7fe fcc2 	bl	8000f6c <SX1276Write>
 80025e8:	e7f9      	b.n	80025de <SX1276SetPublicNetwork+0x1a>
 80025ea:	bf00      	nop
 80025ec:	200005ac 	.word	0x200005ac

080025f0 <SX1276OnTimeoutIrq>:
{
 80025f0:	b538      	push	{r3, r4, r5, lr}
    switch( SX1276.Settings.State )
 80025f2:	4b34      	ldr	r3, [pc, #208]	; (80026c4 <SX1276OnTimeoutIrq+0xd4>)
 80025f4:	791b      	ldrb	r3, [r3, #4]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d002      	beq.n	8002600 <SX1276OnTimeoutIrq+0x10>
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d033      	beq.n	8002666 <SX1276OnTimeoutIrq+0x76>
}
 80025fe:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 8002600:	4b30      	ldr	r3, [pc, #192]	; (80026c4 <SX1276OnTimeoutIrq+0xd4>)
 8002602:	795b      	ldrb	r3, [r3, #5]
 8002604:	b14b      	cbz	r3, 800261a <SX1276OnTimeoutIrq+0x2a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8002606:	4b30      	ldr	r3, [pc, #192]	; (80026c8 <SX1276OnTimeoutIrq+0xd8>)
 8002608:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f6      	beq.n	80025fe <SX1276OnTimeoutIrq+0xe>
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f3      	beq.n	80025fe <SX1276OnTimeoutIrq+0xe>
            RadioEvents->RxTimeout( );
 8002616:	4798      	blx	r3
 8002618:	e7f1      	b.n	80025fe <SX1276OnTimeoutIrq+0xe>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800261a:	4c2a      	ldr	r4, [pc, #168]	; (80026c4 <SX1276OnTimeoutIrq+0xd4>)
 800261c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8002620:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8002624:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8002626:	8763      	strh	r3, [r4, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8002628:	210b      	movs	r1, #11
 800262a:	203e      	movs	r0, #62	; 0x3e
 800262c:	f7fe fc9e 	bl	8000f6c <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8002630:	2110      	movs	r1, #16
 8002632:	203f      	movs	r0, #63	; 0x3f
 8002634:	f7fe fc9a 	bl	8000f6c <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8002638:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800263c:	b163      	cbz	r3, 8002658 <SX1276OnTimeoutIrq+0x68>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800263e:	200d      	movs	r0, #13
 8002640:	f7fe fce8 	bl	8001014 <SX1276Read>
 8002644:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8002648:	b2c9      	uxtb	r1, r1
 800264a:	200d      	movs	r0, #13
 800264c:	f7fe fc8e 	bl	8000f6c <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 8002650:	481e      	ldr	r0, [pc, #120]	; (80026cc <SX1276OnTimeoutIrq+0xdc>)
 8002652:	f004 fcc9 	bl	8006fe8 <TimerStart>
 8002656:	e7d6      	b.n	8002606 <SX1276OnTimeoutIrq+0x16>
                SX1276.Settings.State = RF_IDLE;
 8002658:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <SX1276OnTimeoutIrq+0xd4>)
 800265a:	2200      	movs	r2, #0
 800265c:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 800265e:	481b      	ldr	r0, [pc, #108]	; (80026cc <SX1276OnTimeoutIrq+0xdc>)
 8002660:	f004 fd34 	bl	80070cc <TimerStop>
 8002664:	e7cf      	b.n	8002606 <SX1276OnTimeoutIrq+0x16>
        SX1276Reset( );
 8002666:	f7fe fc3d 	bl	8000ee4 <SX1276Reset>
        RxChainCalibration( );
 800266a:	f7fe fcdf 	bl	800102c <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800266e:	2000      	movs	r0, #0
 8002670:	f7fe fe72 	bl	8001358 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8002674:	2400      	movs	r4, #0
 8002676:	e00f      	b.n	8002698 <SX1276OnTimeoutIrq+0xa8>
            SX1276SetModem( RadioRegsInit[i].Modem );
 8002678:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800267c:	4d14      	ldr	r5, [pc, #80]	; (80026d0 <SX1276OnTimeoutIrq+0xe0>)
 800267e:	441d      	add	r5, r3
 8002680:	f895 00b0 	ldrb.w	r0, [r5, #176]	; 0xb0
 8002684:	f7ff f882 	bl	800178c <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8002688:	f895 10b2 	ldrb.w	r1, [r5, #178]	; 0xb2
 800268c:	f895 00b1 	ldrb.w	r0, [r5, #177]	; 0xb1
 8002690:	f7fe fc6c 	bl	8000f6c <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8002694:	3401      	adds	r4, #1
 8002696:	b2e4      	uxtb	r4, r4
 8002698:	2c0f      	cmp	r4, #15
 800269a:	d9ed      	bls.n	8002678 <SX1276OnTimeoutIrq+0x88>
        SX1276SetModem( MODEM_FSK );
 800269c:	2000      	movs	r0, #0
 800269e:	f7ff f875 	bl	800178c <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 80026a2:	4c08      	ldr	r4, [pc, #32]	; (80026c4 <SX1276OnTimeoutIrq+0xd4>)
 80026a4:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
 80026a8:	f7ff ff8c 	bl	80025c4 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 80026ac:	2300      	movs	r3, #0
 80026ae:	7123      	strb	r3, [r4, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <SX1276OnTimeoutIrq+0xd8>)
 80026b2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0a1      	beq.n	80025fe <SX1276OnTimeoutIrq+0xe>
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d09e      	beq.n	80025fe <SX1276OnTimeoutIrq+0xe>
            RadioEvents->TxTimeout( );
 80026c0:	4798      	blx	r3
}
 80026c2:	e79c      	b.n	80025fe <SX1276OnTimeoutIrq+0xe>
 80026c4:	200005ac 	.word	0x200005ac
 80026c8:	200000c4 	.word	0x200000c4
 80026cc:	20000594 	.word	0x20000594
 80026d0:	080080d0 	.word	0x080080d0

080026d4 <SX1276GetWakeupTime>:
{
 80026d4:	b508      	push	{r3, lr}
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 80026d6:	4b03      	ldr	r3, [pc, #12]	; (80026e4 <SX1276GetWakeupTime+0x10>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	4798      	blx	r3
}
 80026de:	3002      	adds	r0, #2
 80026e0:	bd08      	pop	{r3, pc}
 80026e2:	bf00      	nop
 80026e4:	200000c4 	.word	0x200000c4

080026e8 <SX1276GetWakeTime>:
};

uint32_t SX1276GetWakeTime( void )
{
  return  BOARD_WAKEUP_TIME;
}
 80026e8:	2000      	movs	r0, #0
 80026ea:	4770      	bx	lr

080026ec <SX1276SetXO>:

void SX1276SetXO( uint8_t state )
{
}
 80026ec:	4770      	bx	lr

080026ee <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
    // Implement check. Currently all frequencies are supported
    return true;
}
 80026ee:	2001      	movs	r0, #1
 80026f0:	4770      	bx	lr
	...

080026f4 <SX1276IoInit>:
{
 80026f4:	b510      	push	{r4, lr}
 80026f6:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 80026f8:	2300      	movs	r3, #0
 80026fa:	9301      	str	r3, [sp, #4]
 80026fc:	9302      	str	r3, [sp, #8]
 80026fe:	9303      	str	r3, [sp, #12]
 8002700:	9304      	str	r3, [sp, #16]
 8002702:	9305      	str	r3, [sp, #20]
  SX1276BoardInit( &BoardCallbacks );
 8002704:	4810      	ldr	r0, [pc, #64]	; (8002748 <SX1276IoInit+0x54>)
 8002706:	f7fe fbe1 	bl	8000ecc <SX1276BoardInit>
  initStruct.Mode = GPIO_MODE_IT_RISING;
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <SX1276IoInit+0x58>)
 800270c:	9302      	str	r3, [sp, #8]
  initStruct.Pull = GPIO_PULLDOWN;
 800270e:	2302      	movs	r3, #2
 8002710:	9303      	str	r3, [sp, #12]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002712:	2303      	movs	r3, #3
 8002714:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8002716:	aa01      	add	r2, sp, #4
 8002718:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800271c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002720:	f003 faee 	bl	8005d00 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 8002724:	4c0a      	ldr	r4, [pc, #40]	; (8002750 <SX1276IoInit+0x5c>)
 8002726:	aa01      	add	r2, sp, #4
 8002728:	2108      	movs	r1, #8
 800272a:	4620      	mov	r0, r4
 800272c:	f003 fae8 	bl	8005d00 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8002730:	aa01      	add	r2, sp, #4
 8002732:	2120      	movs	r1, #32
 8002734:	4620      	mov	r0, r4
 8002736:	f003 fae3 	bl	8005d00 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 800273a:	aa01      	add	r2, sp, #4
 800273c:	2110      	movs	r1, #16
 800273e:	4620      	mov	r0, r4
 8002740:	f003 fade 	bl	8005d00 <HW_GPIO_Init>
}
 8002744:	b006      	add	sp, #24
 8002746:	bd10      	pop	{r4, pc}
 8002748:	20000018 	.word	0x20000018
 800274c:	10110000 	.word	0x10110000
 8002750:	48000400 	.word	0x48000400

08002754 <SX1276IoDeInit>:
{
 8002754:	b510      	push	{r4, lr}
 8002756:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 8002758:	2300      	movs	r3, #0
 800275a:	9301      	str	r3, [sp, #4]
 800275c:	9304      	str	r3, [sp, #16]
 800275e:	9305      	str	r3, [sp, #20]
  initStruct.Mode = GPIO_MODE_IT_RISING ;
 8002760:	4b0e      	ldr	r3, [pc, #56]	; (800279c <SX1276IoDeInit+0x48>)
 8002762:	9302      	str	r3, [sp, #8]
  initStruct.Pull = GPIO_PULLDOWN;
 8002764:	2302      	movs	r3, #2
 8002766:	9303      	str	r3, [sp, #12]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8002768:	aa01      	add	r2, sp, #4
 800276a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800276e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002772:	f003 fac5 	bl	8005d00 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 8002776:	4c0a      	ldr	r4, [pc, #40]	; (80027a0 <SX1276IoDeInit+0x4c>)
 8002778:	aa01      	add	r2, sp, #4
 800277a:	2108      	movs	r1, #8
 800277c:	4620      	mov	r0, r4
 800277e:	f003 fabf 	bl	8005d00 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8002782:	aa01      	add	r2, sp, #4
 8002784:	2120      	movs	r1, #32
 8002786:	4620      	mov	r0, r4
 8002788:	f003 faba 	bl	8005d00 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 800278c:	aa01      	add	r2, sp, #4
 800278e:	2110      	movs	r1, #16
 8002790:	4620      	mov	r0, r4
 8002792:	f003 fab5 	bl	8005d00 <HW_GPIO_Init>
}
 8002796:	b006      	add	sp, #24
 8002798:	bd10      	pop	{r4, pc}
 800279a:	bf00      	nop
 800279c:	10110000 	.word	0x10110000
 80027a0:	48000400 	.word	0x48000400

080027a4 <SX1276IoIrqInit>:
{
 80027a4:	b538      	push	{r3, r4, r5, lr}
 80027a6:	4604      	mov	r4, r0
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 80027a8:	6803      	ldr	r3, [r0, #0]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027b4:	f003 faf6 	bl	8005da4 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 80027b8:	4d09      	ldr	r5, [pc, #36]	; (80027e0 <SX1276IoIrqInit+0x3c>)
 80027ba:	6863      	ldr	r3, [r4, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	2108      	movs	r1, #8
 80027c0:	4628      	mov	r0, r5
 80027c2:	f003 faef 	bl	8005da4 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 80027c6:	68a3      	ldr	r3, [r4, #8]
 80027c8:	2200      	movs	r2, #0
 80027ca:	2120      	movs	r1, #32
 80027cc:	4628      	mov	r0, r5
 80027ce:	f003 fae9 	bl	8005da4 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 80027d2:	68e3      	ldr	r3, [r4, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	2110      	movs	r1, #16
 80027d8:	4628      	mov	r0, r5
 80027da:	f003 fae3 	bl	8005da4 <HW_GPIO_SetIrq>
}
 80027de:	bd38      	pop	{r3, r4, r5, pc}
 80027e0:	48000400 	.word	0x48000400

080027e4 <SX1276AntSwInit>:
{
 80027e4:	b530      	push	{r4, r5, lr}
 80027e6:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct={0};
 80027e8:	2400      	movs	r4, #0
 80027ea:	9401      	str	r4, [sp, #4]
 80027ec:	9403      	str	r4, [sp, #12]
 80027ee:	9405      	str	r4, [sp, #20]
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 80027f0:	2301      	movs	r3, #1
 80027f2:	9302      	str	r3, [sp, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80027f4:	2303      	movs	r3, #3
 80027f6:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, &initStruct  ); 
 80027f8:	4d06      	ldr	r5, [pc, #24]	; (8002814 <SX1276AntSwInit+0x30>)
 80027fa:	aa01      	add	r2, sp, #4
 80027fc:	2102      	movs	r1, #2
 80027fe:	4628      	mov	r0, r5
 8002800:	f003 fa7e 	bl	8005d00 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, RADIO_ANT_SWITCH_SET_RX);
 8002804:	4622      	mov	r2, r4
 8002806:	2102      	movs	r1, #2
 8002808:	4628      	mov	r0, r5
 800280a:	f003 faf5 	bl	8005df8 <HW_GPIO_Write>
}
 800280e:	b007      	add	sp, #28
 8002810:	bd30      	pop	{r4, r5, pc}
 8002812:	bf00      	nop
 8002814:	48000800 	.word	0x48000800

08002818 <SX1276AntSwDeInit>:
{
 8002818:	b530      	push	{r4, r5, lr}
 800281a:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct={0};
 800281c:	2400      	movs	r4, #0
 800281e:	9401      	str	r4, [sp, #4]
 8002820:	9403      	str	r4, [sp, #12]
 8002822:	9405      	str	r4, [sp, #20]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP ;
 8002824:	2301      	movs	r3, #1
 8002826:	9302      	str	r3, [sp, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002828:	2303      	movs	r3, #3
 800282a:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init(  RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, &initStruct ); 
 800282c:	4d06      	ldr	r5, [pc, #24]	; (8002848 <SX1276AntSwDeInit+0x30>)
 800282e:	aa01      	add	r2, sp, #4
 8002830:	2102      	movs	r1, #2
 8002832:	4628      	mov	r0, r5
 8002834:	f003 fa64 	bl	8005d00 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, 0);
 8002838:	4622      	mov	r2, r4
 800283a:	2102      	movs	r1, #2
 800283c:	4628      	mov	r0, r5
 800283e:	f003 fadb 	bl	8005df8 <HW_GPIO_Write>
}
 8002842:	b007      	add	sp, #28
 8002844:	bd30      	pop	{r4, r5, pc}
 8002846:	bf00      	nop
 8002848:	48000800 	.word	0x48000800

0800284c <SX1276SetAntSwLowPower>:
{
 800284c:	b508      	push	{r3, lr}
    if( RadioIsActive != status )
 800284e:	4b06      	ldr	r3, [pc, #24]	; (8002868 <SX1276SetAntSwLowPower+0x1c>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	4283      	cmp	r3, r0
 8002854:	d004      	beq.n	8002860 <SX1276SetAntSwLowPower+0x14>
        RadioIsActive = status;
 8002856:	4b04      	ldr	r3, [pc, #16]	; (8002868 <SX1276SetAntSwLowPower+0x1c>)
 8002858:	7018      	strb	r0, [r3, #0]
        if( status == false )
 800285a:	b110      	cbz	r0, 8002862 <SX1276SetAntSwLowPower+0x16>
            SX1276AntSwDeInit( );
 800285c:	f7ff ffdc 	bl	8002818 <SX1276AntSwDeInit>
}
 8002860:	bd08      	pop	{r3, pc}
            SX1276AntSwInit( );
 8002862:	f7ff ffbf 	bl	80027e4 <SX1276AntSwInit>
 8002866:	e7fb      	b.n	8002860 <SX1276SetAntSwLowPower+0x14>
 8002868:	200001cc 	.word	0x200001cc

0800286c <SX1276SetAntSw>:
{
 800286c:	b508      	push	{r3, lr}
    switch( opMode )
 800286e:	2803      	cmp	r0, #3
 8002870:	d005      	beq.n	800287e <SX1276SetAntSw+0x12>
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, RADIO_ANT_SWITCH_SET_RX);
 8002872:	2200      	movs	r2, #0
 8002874:	2102      	movs	r1, #2
 8002876:	4805      	ldr	r0, [pc, #20]	; (800288c <SX1276SetAntSw+0x20>)
 8002878:	f003 fabe 	bl	8005df8 <HW_GPIO_Write>
}
 800287c:	bd08      	pop	{r3, pc}
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, RADIO_ANT_SWITCH_SET_TX);
 800287e:	2201      	movs	r2, #1
 8002880:	2102      	movs	r1, #2
 8002882:	4802      	ldr	r0, [pc, #8]	; (800288c <SX1276SetAntSw+0x20>)
 8002884:	f003 fab8 	bl	8005df8 <HW_GPIO_Write>
        break;
 8002888:	e7f8      	b.n	800287c <SX1276SetAntSw+0x10>
 800288a:	bf00      	nop
 800288c:	48000800 	.word	0x48000800

08002890 <SX1276GetPaSelect>:
    if( channel > RF_MID_BAND_THRESH )
 8002890:	4b03      	ldr	r3, [pc, #12]	; (80028a0 <SX1276GetPaSelect+0x10>)
 8002892:	4298      	cmp	r0, r3
 8002894:	d801      	bhi.n	800289a <SX1276GetPaSelect+0xa>
        return RF_PACONFIG_PASELECT_RFO;
 8002896:	2000      	movs	r0, #0
}
 8002898:	4770      	bx	lr
        return RF_PACONFIG_PASELECT_PABOOST;
 800289a:	2080      	movs	r0, #128	; 0x80
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	1f4add40 	.word	0x1f4add40

080028a4 <SX1276SetRfTxPower>:
{
 80028a4:	b570      	push	{r4, r5, r6, lr}
 80028a6:	4606      	mov	r6, r0
    paConfig = SX1276Read( REG_PACONFIG );
 80028a8:	2009      	movs	r0, #9
 80028aa:	f7fe fbb3 	bl	8001014 <SX1276Read>
 80028ae:	4604      	mov	r4, r0
    paDac = SX1276Read( REG_PADAC );
 80028b0:	204d      	movs	r0, #77	; 0x4d
 80028b2:	f7fe fbaf 	bl	8001014 <SX1276Read>
 80028b6:	4605      	mov	r5, r0
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( SX1276.Settings.Channel );
 80028b8:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80028bc:	4b2a      	ldr	r3, [pc, #168]	; (8002968 <SX1276SetRfTxPower+0xc4>)
 80028be:	6898      	ldr	r0, [r3, #8]
 80028c0:	f7ff ffe6 	bl	8002890 <SX1276GetPaSelect>
 80028c4:	b240      	sxtb	r0, r0
    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 80028c6:	4304      	orrs	r4, r0
 80028c8:	d413      	bmi.n	80028f2 <SX1276SetRfTxPower+0x4e>
        if( power > 0 )
 80028ca:	2e00      	cmp	r6, #0
 80028cc:	dd3f      	ble.n	800294e <SX1276SetRfTxPower+0xaa>
            if( power > 15 )
 80028ce:	2e0f      	cmp	r6, #15
 80028d0:	dd00      	ble.n	80028d4 <SX1276SetRfTxPower+0x30>
                power = 15;
 80028d2:	260f      	movs	r6, #15
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 80028d4:	f024 017f 	bic.w	r1, r4, #127	; 0x7f
 80028d8:	b249      	sxtb	r1, r1
 80028da:	f041 0170 	orr.w	r1, r1, #112	; 0x70
 80028de:	4331      	orrs	r1, r6
 80028e0:	b2c9      	uxtb	r1, r1
    SX1276Write( REG_PACONFIG, paConfig );
 80028e2:	2009      	movs	r0, #9
 80028e4:	f7fe fb42 	bl	8000f6c <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 80028e8:	4629      	mov	r1, r5
 80028ea:	204d      	movs	r0, #77	; 0x4d
 80028ec:	f7fe fb3e 	bl	8000f6c <SX1276Write>
}
 80028f0:	bd70      	pop	{r4, r5, r6, pc}
        if( power > 17 )
 80028f2:	2e11      	cmp	r6, #17
 80028f4:	dd13      	ble.n	800291e <SX1276SetRfTxPower+0x7a>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 80028f6:	f045 0507 	orr.w	r5, r5, #7
 80028fa:	b2ed      	uxtb	r5, r5
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 80028fc:	f005 0307 	and.w	r3, r5, #7
 8002900:	2b07      	cmp	r3, #7
 8002902:	d013      	beq.n	800292c <SX1276SetRfTxPower+0x88>
            if( power < 2 )
 8002904:	2e01      	cmp	r6, #1
 8002906:	dd20      	ble.n	800294a <SX1276SetRfTxPower+0xa6>
            if( power > 17 )
 8002908:	2e11      	cmp	r6, #17
 800290a:	dd00      	ble.n	800290e <SX1276SetRfTxPower+0x6a>
                power = 17;
 800290c:	2611      	movs	r6, #17
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 800290e:	f024 040f 	bic.w	r4, r4, #15
 8002912:	1eb1      	subs	r1, r6, #2
 8002914:	f001 010f 	and.w	r1, r1, #15
 8002918:	4321      	orrs	r1, r4
 800291a:	b2c9      	uxtb	r1, r1
 800291c:	e7e1      	b.n	80028e2 <SX1276SetRfTxPower+0x3e>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 800291e:	f025 0507 	bic.w	r5, r5, #7
 8002922:	b26d      	sxtb	r5, r5
 8002924:	f045 0504 	orr.w	r5, r5, #4
 8002928:	b2ed      	uxtb	r5, r5
 800292a:	e7e7      	b.n	80028fc <SX1276SetRfTxPower+0x58>
            if( power < 5 )
 800292c:	2e04      	cmp	r6, #4
 800292e:	dd03      	ble.n	8002938 <SX1276SetRfTxPower+0x94>
            if( power > 20 )
 8002930:	2e14      	cmp	r6, #20
 8002932:	dd02      	ble.n	800293a <SX1276SetRfTxPower+0x96>
                power = 20;
 8002934:	2614      	movs	r6, #20
 8002936:	e000      	b.n	800293a <SX1276SetRfTxPower+0x96>
                power = 5;
 8002938:	2605      	movs	r6, #5
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800293a:	f024 040f 	bic.w	r4, r4, #15
 800293e:	1f71      	subs	r1, r6, #5
 8002940:	f001 010f 	and.w	r1, r1, #15
 8002944:	4321      	orrs	r1, r4
 8002946:	b2c9      	uxtb	r1, r1
 8002948:	e7cb      	b.n	80028e2 <SX1276SetRfTxPower+0x3e>
                power = 2;
 800294a:	2602      	movs	r6, #2
 800294c:	e7df      	b.n	800290e <SX1276SetRfTxPower+0x6a>
            if( power < -4 )
 800294e:	f116 0f04 	cmn.w	r6, #4
 8002952:	da01      	bge.n	8002958 <SX1276SetRfTxPower+0xb4>
                power = -4;
 8002954:	f06f 0603 	mvn.w	r6, #3
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 8002958:	f024 047f 	bic.w	r4, r4, #127	; 0x7f
 800295c:	1d31      	adds	r1, r6, #4
 800295e:	b249      	sxtb	r1, r1
 8002960:	4321      	orrs	r1, r4
 8002962:	b2c9      	uxtb	r1, r1
 8002964:	e7bd      	b.n	80028e2 <SX1276SetRfTxPower+0x3e>
 8002966:	bf00      	nop
 8002968:	200005ac 	.word	0x200005ac

0800296c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800296c:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800296e:	2003      	movs	r0, #3
 8002970:	f000 faee 	bl	8002f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002974:	200f      	movs	r0, #15
 8002976:	f004 f84c 	bl	8006a12 <HAL_InitTick>
 800297a:	b110      	cbz	r0, 8002982 <HAL_Init+0x16>
  {
    status = HAL_ERROR;
 800297c:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 800297e:	4620      	mov	r0, r4
 8002980:	bd10      	pop	{r4, pc}
 8002982:	4604      	mov	r4, r0
    HAL_MspInit();
 8002984:	f004 f850 	bl	8006a28 <HAL_MspInit>
 8002988:	e7f9      	b.n	800297e <HAL_Init+0x12>
	...

0800298c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800298c:	4a03      	ldr	r2, [pc, #12]	; (800299c <HAL_IncTick+0x10>)
 800298e:	6813      	ldr	r3, [r2, #0]
 8002990:	4903      	ldr	r1, [pc, #12]	; (80029a0 <HAL_IncTick+0x14>)
 8002992:	6809      	ldr	r1, [r1, #0]
 8002994:	440b      	add	r3, r1
 8002996:	6013      	str	r3, [r2, #0]
}
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	2000062c 	.word	0x2000062c
 80029a0:	20000030 	.word	0x20000030

080029a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80029a4:	4b01      	ldr	r3, [pc, #4]	; (80029ac <HAL_GetTick+0x8>)
 80029a6:	6818      	ldr	r0, [r3, #0]
}
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	2000062c 	.word	0x2000062c

080029b0 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80029b0:	4a02      	ldr	r2, [pc, #8]	; (80029bc <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 80029b2:	6853      	ldr	r3, [r2, #4]
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	6053      	str	r3, [r2, #4]
}
 80029ba:	4770      	bx	lr
 80029bc:	e0042000 	.word	0xe0042000

080029c0 <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80029c0:	4a02      	ldr	r2, [pc, #8]	; (80029cc <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 80029c2:	6853      	ldr	r3, [r2, #4]
 80029c4:	f043 0302 	orr.w	r3, r3, #2
 80029c8:	6053      	str	r3, [r2, #4]
}
 80029ca:	4770      	bx	lr
 80029cc:	e0042000 	.word	0xe0042000

080029d0 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80029d0:	4a02      	ldr	r2, [pc, #8]	; (80029dc <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 80029d2:	6853      	ldr	r3, [r2, #4]
 80029d4:	f043 0304 	orr.w	r3, r3, #4
 80029d8:	6053      	str	r3, [r2, #4]
}
 80029da:	4770      	bx	lr
 80029dc:	e0042000 	.word	0xe0042000

080029e0 <HAL_ADC_MspInit>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */
}
 80029e0:	4770      	bx	lr
	...

080029e4 <HAL_ADC_Init>:
{
 80029e4:	b530      	push	{r4, r5, lr}
 80029e6:	b083      	sub	sp, #12
 80029e8:	4604      	mov	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	9301      	str	r3, [sp, #4]
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029ee:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80029f0:	b303      	cbz	r3, 8002a34 <HAL_ADC_Init+0x50>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029f2:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 80029fa:	d005      	beq.n	8002a08 <HAL_ADC_Init+0x24>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8002a02:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002a06:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a08:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a0a:	6893      	ldr	r3, [r2, #8]
 8002a0c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002a10:	d11d      	bne.n	8002a4e <HAL_ADC_Init+0x6a>
  MODIFY_REG(ADCx->CR,
 8002a12:	6893      	ldr	r3, [r2, #8]
 8002a14:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a20:	6093      	str	r3, [r2, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002a22:	4b6d      	ldr	r3, [pc, #436]	; (8002bd8 <HAL_ADC_Init+0x1f4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	099b      	lsrs	r3, r3, #6
 8002a28:	4a6c      	ldr	r2, [pc, #432]	; (8002bdc <HAL_ADC_Init+0x1f8>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	099b      	lsrs	r3, r3, #6
 8002a30:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002a32:	e009      	b.n	8002a48 <HAL_ADC_Init+0x64>
    HAL_ADC_MspInit(hadc);
 8002a34:	f7ff ffd4 	bl	80029e0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002a38:	2300      	movs	r3, #0
 8002a3a:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8002a3c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8002a40:	e7d7      	b.n	80029f2 <HAL_ADC_Init+0xe>
      wait_loop_index--;
 8002a42:	9b01      	ldr	r3, [sp, #4]
 8002a44:	3b01      	subs	r3, #1
 8002a46:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002a48:	9b01      	ldr	r3, [sp, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f9      	bne.n	8002a42 <HAL_ADC_Init+0x5e>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a4e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8002a56:	f040 8089 	bne.w	8002b6c <HAL_ADC_Init+0x188>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a5a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002a5c:	f042 0210 	orr.w	r2, r2, #16
 8002a60:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a62:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002a64:	f042 0201 	orr.w	r2, r2, #1
 8002a68:	65a2      	str	r2, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8002a6a:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	f012 0f04 	tst.w	r2, #4
 8002a72:	d07d      	beq.n	8002b70 <HAL_ADC_Init+0x18c>
 8002a74:	2101      	movs	r1, #1
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a76:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002a78:	f012 0f10 	tst.w	r2, #16
 8002a7c:	f040 80a4 	bne.w	8002bc8 <HAL_ADC_Init+0x1e4>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a80:	2900      	cmp	r1, #0
 8002a82:	f040 80a1 	bne.w	8002bc8 <HAL_ADC_Init+0x1e4>
    ADC_STATE_CLR_SET(hadc->State,
 8002a86:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002a88:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8002a8c:	f042 0202 	orr.w	r2, r2, #2
 8002a90:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f013 0f01 	tst.w	r3, #1
 8002a98:	d11b      	bne.n	8002ad2 <HAL_ADC_Init+0xee>
 8002a9a:	4b51      	ldr	r3, [pc, #324]	; (8002be0 <HAL_ADC_Init+0x1fc>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f013 0f01 	tst.w	r3, #1
 8002aa2:	d067      	beq.n	8002b74 <HAL_ADC_Init+0x190>
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	4a4f      	ldr	r2, [pc, #316]	; (8002be4 <HAL_ADC_Init+0x200>)
 8002aa8:	6892      	ldr	r2, [r2, #8]
 8002aaa:	f012 0f01 	tst.w	r2, #1
 8002aae:	d063      	beq.n	8002b78 <HAL_ADC_Init+0x194>
 8002ab0:	2301      	movs	r3, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ab2:	430b      	orrs	r3, r1
 8002ab4:	4a4c      	ldr	r2, [pc, #304]	; (8002be8 <HAL_ADC_Init+0x204>)
 8002ab6:	6892      	ldr	r2, [r2, #8]
 8002ab8:	f012 0f01 	tst.w	r2, #1
 8002abc:	d05e      	beq.n	8002b7c <HAL_ADC_Init+0x198>
 8002abe:	2201      	movs	r2, #1
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	d106      	bne.n	8002ad2 <HAL_ADC_Init+0xee>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ac4:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ac6:	4949      	ldr	r1, [pc, #292]	; (8002bec <HAL_ADC_Init+0x208>)
 8002ac8:	688a      	ldr	r2, [r1, #8]
 8002aca:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	608b      	str	r3, [r1, #8]
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ad2:	7e62      	ldrb	r2, [r4, #25]
                hadc->Init.Overrun                                                     |
 8002ad4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ad6:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 8002ada:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 8002adc:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 8002ade:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 8002ae0:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ae2:	f894 2020 	ldrb.w	r2, [r4, #32]
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ae6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002aea:	2a01      	cmp	r2, #1
 8002aec:	d048      	beq.n	8002b80 <HAL_ADC_Init+0x19c>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002aee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002af0:	b122      	cbz	r2, 8002afc <HAL_ADC_Init+0x118>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002af2:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002af6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002af8:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002afa:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002afc:	6821      	ldr	r1, [r4, #0]
 8002afe:	68cd      	ldr	r5, [r1, #12]
 8002b00:	4a3b      	ldr	r2, [pc, #236]	; (8002bf0 <HAL_ADC_Init+0x20c>)
 8002b02:	402a      	ands	r2, r5
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60cb      	str	r3, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b08:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	f012 0f04 	tst.w	r2, #4
 8002b10:	d03b      	beq.n	8002b8a <HAL_ADC_Init+0x1a6>
 8002b12:	2101      	movs	r1, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	f012 0f08 	tst.w	r2, #8
 8002b1a:	d038      	beq.n	8002b8e <HAL_ADC_Init+0x1aa>
 8002b1c:	2201      	movs	r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b1e:	b9b1      	cbnz	r1, 8002b4e <HAL_ADC_Init+0x16a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b20:	b9aa      	cbnz	r2, 8002b4e <HAL_ADC_Init+0x16a>
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b22:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b24:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8002b28:	0052      	lsls	r2, r2, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b2a:	ea42 3181 	orr.w	r1, r2, r1, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b34:	f022 0202 	bic.w	r2, r2, #2
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8002b3c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d026      	beq.n	8002b92 <HAL_ADC_Init+0x1ae>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b44:	6822      	ldr	r2, [r4, #0]
 8002b46:	6913      	ldr	r3, [r2, #16]
 8002b48:	f023 0301 	bic.w	r3, r3, #1
 8002b4c:	6113      	str	r3, [r2, #16]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b4e:	6923      	ldr	r3, [r4, #16]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d030      	beq.n	8002bb6 <HAL_ADC_Init+0x1d2>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b54:	6822      	ldr	r2, [r4, #0]
 8002b56:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002b58:	f023 030f 	bic.w	r3, r3, #15
 8002b5c:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b5e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b60:	f023 0303 	bic.w	r3, r3, #3
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	6563      	str	r3, [r4, #84]	; 0x54
 8002b6a:	e032      	b.n	8002bd2 <HAL_ADC_Init+0x1ee>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	e77d      	b.n	8002a6c <HAL_ADC_Init+0x88>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b70:	2100      	movs	r1, #0
 8002b72:	e780      	b.n	8002a76 <HAL_ADC_Init+0x92>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b74:	2100      	movs	r1, #0
 8002b76:	e796      	b.n	8002aa6 <HAL_ADC_Init+0xc2>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	e79a      	b.n	8002ab2 <HAL_ADC_Init+0xce>
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	e79f      	b.n	8002ac0 <HAL_ADC_Init+0xdc>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b80:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b82:	3a01      	subs	r2, #1
 8002b84:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002b88:	e7b1      	b.n	8002aee <HAL_ADC_Init+0x10a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	e7c2      	b.n	8002b14 <HAL_ADC_Init+0x130>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	e7c5      	b.n	8002b1e <HAL_ADC_Init+0x13a>
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b92:	6821      	ldr	r1, [r4, #0]
 8002b94:	690b      	ldr	r3, [r1, #16]
 8002b96:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002b9a:	f023 0304 	bic.w	r3, r3, #4
 8002b9e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002ba0:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8002ba2:	432a      	orrs	r2, r5
 8002ba4:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8002ba6:	432a      	orrs	r2, r5
 8002ba8:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8002baa:	432a      	orrs	r2, r5
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	610b      	str	r3, [r1, #16]
 8002bb4:	e7cb      	b.n	8002b4e <HAL_ADC_Init+0x16a>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bb6:	6821      	ldr	r1, [r4, #0]
 8002bb8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002bba:	f023 030f 	bic.w	r3, r3, #15
 8002bbe:	69e2      	ldr	r2, [r4, #28]
 8002bc0:	3a01      	subs	r2, #1
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	630b      	str	r3, [r1, #48]	; 0x30
 8002bc6:	e7ca      	b.n	8002b5e <HAL_ADC_Init+0x17a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002bca:	f043 0310 	orr.w	r3, r3, #16
 8002bce:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002bd0:	2001      	movs	r0, #1
}
 8002bd2:	b003      	add	sp, #12
 8002bd4:	bd30      	pop	{r4, r5, pc}
 8002bd6:	bf00      	nop
 8002bd8:	2000003c 	.word	0x2000003c
 8002bdc:	053e2d63 	.word	0x053e2d63
 8002be0:	50040000 	.word	0x50040000
 8002be4:	50040100 	.word	0x50040100
 8002be8:	50040200 	.word	0x50040200
 8002bec:	50040300 	.word	0x50040300
 8002bf0:	fff0c007 	.word	0xfff0c007

08002bf4 <HAL_ADC_MspDeInit>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspDeInit must be implemented in the user file.
   */
}
 8002bf4:	4770      	bx	lr
	...

08002bf8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bfc:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	f012 0f04 	tst.w	r2, #4
 8002c04:	d052      	beq.n	8002cac <ADC_ConversionStop+0xb4>
 8002c06:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	f012 0f08 	tst.w	r2, #8
 8002c0e:	d04f      	beq.n	8002cb0 <ADC_ConversionStop+0xb8>
 8002c10:	2201      	movs	r2, #1
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002c12:	b908      	cbnz	r0, 8002c18 <ADC_ConversionStop+0x20>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002c14:	2a00      	cmp	r2, #0
 8002c16:	d06b      	beq.n	8002cf0 <ADC_ConversionStop+0xf8>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002c1e:	d004      	beq.n	8002c2a <ADC_ConversionStop+0x32>
        && (hadc->Init.ContinuousConvMode == ENABLE)
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002c20:	8b20      	ldrh	r0, [r4, #24]
 8002c22:	f240 1201 	movw	r2, #257	; 0x101
 8002c26:	4290      	cmp	r0, r2
 8002c28:	d04e      	beq.n	8002cc8 <ADC_ConversionStop+0xd0>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002c2a:	2902      	cmp	r1, #2
 8002c2c:	d010      	beq.n	8002c50 <ADC_ConversionStop+0x58>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002c2e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	f012 0f04 	tst.w	r2, #4
 8002c36:	d00b      	beq.n	8002c50 <ADC_ConversionStop+0x58>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	f012 0f02 	tst.w	r2, #2
 8002c3e:	d107      	bne.n	8002c50 <ADC_ConversionStop+0x58>
  MODIFY_REG(ADCx->CR,
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c46:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002c4a:	f042 0210 	orr.w	r2, r2, #16
 8002c4e:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002c50:	2901      	cmp	r1, #1
 8002c52:	d010      	beq.n	8002c76 <ADC_ConversionStop+0x7e>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002c54:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	f012 0f08 	tst.w	r2, #8
 8002c5c:	d00b      	beq.n	8002c76 <ADC_ConversionStop+0x7e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	f012 0f02 	tst.w	r2, #2
 8002c64:	d107      	bne.n	8002c76 <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c6c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002c70:	f042 0220 	orr.w	r2, r2, #32
 8002c74:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002c76:	2902      	cmp	r1, #2
 8002c78:	d036      	beq.n	8002ce8 <ADC_ConversionStop+0xf0>
 8002c7a:	2903      	cmp	r1, #3
 8002c7c:	d132      	bne.n	8002ce4 <ADC_ConversionStop+0xec>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002c7e:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002c80:	f7ff fe90 	bl	80029a4 <HAL_GetTick>
 8002c84:	4606      	mov	r6, r0

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002c86:	6823      	ldr	r3, [r4, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	422b      	tst	r3, r5
 8002c8c:	d02e      	beq.n	8002cec <ADC_ConversionStop+0xf4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002c8e:	f7ff fe89 	bl	80029a4 <HAL_GetTick>
 8002c92:	1b80      	subs	r0, r0, r6
 8002c94:	2805      	cmp	r0, #5
 8002c96:	d9f6      	bls.n	8002c86 <ADC_ConversionStop+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c98:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c9a:	f043 0310 	orr.w	r3, r3, #16
 8002c9e:	6563      	str	r3, [r4, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	65a3      	str	r3, [r4, #88]	; 0x58

        return HAL_ERROR;
 8002ca8:	2001      	movs	r0, #1
 8002caa:	e020      	b.n	8002cee <ADC_ConversionStop+0xf6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cac:	2000      	movs	r0, #0
 8002cae:	e7ab      	b.n	8002c08 <ADC_ConversionStop+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	e7ae      	b.n	8002c12 <ADC_ConversionStop+0x1a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002cb6:	f043 0310 	orr.w	r3, r3, #16
 8002cba:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cbc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002cbe:	f043 0301 	orr.w	r3, r3, #1
 8002cc2:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	e012      	b.n	8002cee <ADC_ConversionStop+0xf6>
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002cc8:	2200      	movs	r2, #0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002cca:	6819      	ldr	r1, [r3, #0]
 8002ccc:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002cd0:	d104      	bne.n	8002cdc <ADC_ConversionStop+0xe4>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002cd2:	4908      	ldr	r1, [pc, #32]	; (8002cf4 <ADC_ConversionStop+0xfc>)
 8002cd4:	428a      	cmp	r2, r1
 8002cd6:	d8ed      	bhi.n	8002cb4 <ADC_ConversionStop+0xbc>
        Conversion_Timeout_CPU_cycles ++;
 8002cd8:	3201      	adds	r2, #1
 8002cda:	e7f6      	b.n	8002cca <ADC_ConversionStop+0xd2>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002cdc:	2240      	movs	r2, #64	; 0x40
 8002cde:	601a      	str	r2, [r3, #0]
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	e7a4      	b.n	8002c2e <ADC_ConversionStop+0x36>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002ce4:	2504      	movs	r5, #4
        break;
 8002ce6:	e7cb      	b.n	8002c80 <ADC_ConversionStop+0x88>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002ce8:	2508      	movs	r5, #8
 8002cea:	e7c9      	b.n	8002c80 <ADC_ConversionStop+0x88>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002cec:	2000      	movs	r0, #0
}
 8002cee:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	e7fc      	b.n	8002cee <ADC_ConversionStop+0xf6>
 8002cf4:	a33fffff 	.word	0xa33fffff

08002cf8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002cf8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002cfa:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	f012 0f02 	tst.w	r2, #2
 8002d02:	d015      	beq.n	8002d30 <ADC_Disable+0x38>
 8002d04:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	f012 0f01 	tst.w	r2, #1
 8002d0c:	d037      	beq.n	8002d7e <ADC_Disable+0x86>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d0e:	2900      	cmp	r1, #0
 8002d10:	d137      	bne.n	8002d82 <ADC_Disable+0x8a>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	f002 020d 	and.w	r2, r2, #13
 8002d18:	2a01      	cmp	r2, #1
 8002d1a:	d00b      	beq.n	8002d34 <ADC_Disable+0x3c>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d1c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002d1e:	f043 0310 	orr.w	r3, r3, #16
 8002d22:	6543      	str	r3, [r0, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d24:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6583      	str	r3, [r0, #88]	; 0x58

      return HAL_ERROR;
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	e027      	b.n	8002d80 <ADC_Disable+0x88>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d30:	2100      	movs	r1, #0
 8002d32:	e7e8      	b.n	8002d06 <ADC_Disable+0xe>
 8002d34:	4604      	mov	r4, r0
  MODIFY_REG(ADCx->CR,
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d3c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002d40:	f042 0202 	orr.w	r2, r2, #2
 8002d44:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d46:	6803      	ldr	r3, [r0, #0]
 8002d48:	2203      	movs	r2, #3
 8002d4a:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d4c:	f7ff fe2a 	bl	80029a4 <HAL_GetTick>
 8002d50:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d52:	6823      	ldr	r3, [r4, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f013 0f01 	tst.w	r3, #1
 8002d5a:	d00e      	beq.n	8002d7a <ADC_Disable+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d5c:	f7ff fe22 	bl	80029a4 <HAL_GetTick>
 8002d60:	1b40      	subs	r0, r0, r5
 8002d62:	2802      	cmp	r0, #2
 8002d64:	d9f5      	bls.n	8002d52 <ADC_Disable+0x5a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d66:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d68:	f043 0310 	orr.w	r3, r3, #16
 8002d6c:	6563      	str	r3, [r4, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	65a3      	str	r3, [r4, #88]	; 0x58

        return HAL_ERROR;
 8002d76:	2001      	movs	r0, #1
 8002d78:	e002      	b.n	8002d80 <ADC_Disable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	e000      	b.n	8002d80 <ADC_Disable+0x88>
 8002d7e:	2000      	movs	r0, #0
}
 8002d80:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8002d82:	2000      	movs	r0, #0
 8002d84:	e7fc      	b.n	8002d80 <ADC_Disable+0x88>
	...

08002d88 <HAL_ADC_DeInit>:
{
 8002d88:	b538      	push	{r3, r4, r5, lr}
  if (hadc == NULL)
 8002d8a:	2800      	cmp	r0, #0
 8002d8c:	f000 80ce 	beq.w	8002f2c <HAL_ADC_DeInit+0x1a4>
 8002d90:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002d92:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002d94:	f043 0302 	orr.w	r3, r3, #2
 8002d98:	6543      	str	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002d9a:	2103      	movs	r1, #3
 8002d9c:	f7ff ff2c 	bl	8002bf8 <ADC_ConversionStop>
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 8002da0:	6822      	ldr	r2, [r4, #0]
 8002da2:	68d3      	ldr	r3, [r2, #12]
 8002da4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002da8:	60d3      	str	r3, [r2, #12]
  if (tmp_hal_status == HAL_OK)
 8002daa:	4605      	mov	r5, r0
 8002dac:	2800      	cmp	r0, #0
 8002dae:	f000 80ad 	beq.w	8002f0c <HAL_ADC_DeInit+0x184>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 8002db2:	6822      	ldr	r2, [r4, #0]
 8002db4:	6853      	ldr	r3, [r2, #4]
 8002db6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002dba:	f023 0307 	bic.w	r3, r3, #7
 8002dbe:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 8002dc0:	6823      	ldr	r3, [r4, #0]
 8002dc2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002dc6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 8002dc8:	6822      	ldr	r2, [r4, #0]
 8002dca:	6893      	ldr	r3, [r2, #8]
 8002dcc:	f023 43a0 	bic.w	r3, r3, #1342177280	; 0x50000000
 8002dd0:	6093      	str	r3, [r2, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 8002dd2:	6822      	ldr	r2, [r4, #0]
 8002dd4:	6893      	ldr	r3, [r2, #8]
 8002dd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002dda:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_FIELDS);
 8002ddc:	6822      	ldr	r2, [r4, #0]
 8002dde:	68d1      	ldr	r1, [r2, #12]
 8002de0:	4b53      	ldr	r3, [pc, #332]	; (8002f30 <HAL_ADC_DeInit+0x1a8>)
 8002de2:	400b      	ands	r3, r1
 8002de4:	60d3      	str	r3, [r2, #12]
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8002de6:	6822      	ldr	r2, [r4, #0]
 8002de8:	68d3      	ldr	r3, [r2, #12]
 8002dea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dee:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 8002df0:	6822      	ldr	r2, [r4, #0]
 8002df2:	6913      	ldr	r3, [r2, #16]
 8002df4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002df8:	f023 0307 	bic.w	r3, r3, #7
 8002dfc:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 8002dfe:	6822      	ldr	r2, [r4, #0]
 8002e00:	6953      	ldr	r3, [r2, #20]
 8002e02:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002e06:	6153      	str	r3, [r2, #20]
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 8002e08:	6822      	ldr	r2, [r4, #0]
 8002e0a:	6993      	ldr	r3, [r2, #24]
 8002e0c:	f003 4378 	and.w	r3, r3, #4160749568	; 0xf8000000
 8002e10:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 8002e12:	6822      	ldr	r2, [r4, #0]
 8002e14:	6a13      	ldr	r3, [r2, #32]
 8002e16:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8002e1a:	6213      	str	r3, [r2, #32]
  CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 8002e1c:	6822      	ldr	r2, [r4, #0]
 8002e1e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002e20:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8002e24:	6253      	str	r3, [r2, #36]	; 0x24
  CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 8002e26:	6822      	ldr	r2, [r4, #0]
 8002e28:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002e2a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8002e2e:	6293      	str	r3, [r2, #40]	; 0x28
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8002e30:	6822      	ldr	r2, [r4, #0]
 8002e32:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002e34:	4b3f      	ldr	r3, [pc, #252]	; (8002f34 <HAL_ADC_DeInit+0x1ac>)
 8002e36:	400b      	ands	r3, r1
 8002e38:	6313      	str	r3, [r2, #48]	; 0x30
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8002e3a:	6823      	ldr	r3, [r4, #0]
 8002e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e3e:	493e      	ldr	r1, [pc, #248]	; (8002f38 <HAL_ADC_DeInit+0x1b0>)
 8002e40:	400a      	ands	r2, r1
 8002e42:	635a      	str	r2, [r3, #52]	; 0x34
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 8002e44:	6822      	ldr	r2, [r4, #0]
 8002e46:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002e48:	400b      	ands	r3, r1
 8002e4a:	6393      	str	r3, [r2, #56]	; 0x38
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8002e4c:	6822      	ldr	r2, [r4, #0]
 8002e4e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8002e50:	f423 63fb 	bic.w	r3, r3, #2008	; 0x7d8
 8002e54:	f023 0307 	bic.w	r3, r3, #7
 8002e58:	63d3      	str	r3, [r2, #60]	; 0x3c
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8002e5a:	6821      	ldr	r1, [r4, #0]
 8002e5c:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 8002e5e:	4b37      	ldr	r3, [pc, #220]	; (8002f3c <HAL_ADC_DeInit+0x1b4>)
 8002e60:	401a      	ands	r2, r3
 8002e62:	660a      	str	r2, [r1, #96]	; 0x60
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 8002e64:	6821      	ldr	r1, [r4, #0]
 8002e66:	6e4a      	ldr	r2, [r1, #100]	; 0x64
 8002e68:	401a      	ands	r2, r3
 8002e6a:	664a      	str	r2, [r1, #100]	; 0x64
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 8002e6c:	6821      	ldr	r1, [r4, #0]
 8002e6e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
 8002e70:	401a      	ands	r2, r3
 8002e72:	668a      	str	r2, [r1, #104]	; 0x68
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 8002e74:	6821      	ldr	r1, [r4, #0]
 8002e76:	6eca      	ldr	r2, [r1, #108]	; 0x6c
 8002e78:	4013      	ands	r3, r2
 8002e7a:	66cb      	str	r3, [r1, #108]	; 0x6c
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8002e7c:	6822      	ldr	r2, [r4, #0]
 8002e7e:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8002e82:	0cdb      	lsrs	r3, r3, #19
 8002e84:	04db      	lsls	r3, r3, #19
 8002e86:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 8002e8a:	6822      	ldr	r2, [r4, #0]
 8002e8c:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8002e90:	0cdb      	lsrs	r3, r3, #19
 8002e92:	04db      	lsls	r3, r3, #19
 8002e94:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 8002e98:	6822      	ldr	r2, [r4, #0]
 8002e9a:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
 8002e9e:	0cdb      	lsrs	r3, r3, #19
 8002ea0:	04db      	lsls	r3, r3, #19
 8002ea2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8002ea6:	6822      	ldr	r2, [r4, #0]
 8002ea8:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 8002eac:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 8002eb0:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002eb4:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <HAL_ADC_DeInit+0x1b8>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f013 0f01 	tst.w	r3, #1
 8002ebc:	d030      	beq.n	8002f20 <HAL_ADC_DeInit+0x198>
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	4b20      	ldr	r3, [pc, #128]	; (8002f44 <HAL_ADC_DeInit+0x1bc>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f013 0f01 	tst.w	r3, #1
 8002ec8:	d02c      	beq.n	8002f24 <HAL_ADC_DeInit+0x19c>
 8002eca:	2301      	movs	r3, #1
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	4a1e      	ldr	r2, [pc, #120]	; (8002f48 <HAL_ADC_DeInit+0x1c0>)
 8002ed0:	6892      	ldr	r2, [r2, #8]
 8002ed2:	f012 0f01 	tst.w	r2, #1
 8002ed6:	d027      	beq.n	8002f28 <HAL_ADC_DeInit+0x1a0>
 8002ed8:	2201      	movs	r2, #1
 8002eda:	4313      	orrs	r3, r2
 8002edc:	d10a      	bne.n	8002ef4 <HAL_ADC_DeInit+0x16c>
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8002ede:	4a1b      	ldr	r2, [pc, #108]	; (8002f4c <HAL_ADC_DeInit+0x1c4>)
 8002ee0:	6893      	ldr	r3, [r2, #8]
 8002ee2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002ee6:	f423 33f7 	bic.w	r3, r3, #126464	; 0x1ee00
 8002eea:	f423 738f 	bic.w	r3, r3, #286	; 0x11e
 8002eee:	f023 0301 	bic.w	r3, r3, #1
 8002ef2:	6093      	str	r3, [r2, #8]
  HAL_ADC_MspDeInit(hadc);
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	f7ff fe7d 	bl	8002bf4 <HAL_ADC_MspDeInit>
  ADC_CLEAR_ERRORCODE(hadc);
 8002efa:	2300      	movs	r3, #0
 8002efc:	65a3      	str	r3, [r4, #88]	; 0x58
  hadc->InjectionConfig.ContextQueue = 0;
 8002efe:	65e3      	str	r3, [r4, #92]	; 0x5c
  hadc->InjectionConfig.ChannelCount = 0;
 8002f00:	6623      	str	r3, [r4, #96]	; 0x60
  hadc->State = HAL_ADC_STATE_RESET;
 8002f02:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8002f04:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002f08:	4628      	mov	r0, r5
 8002f0a:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8002f0c:	4620      	mov	r0, r4
 8002f0e:	f7ff fef3 	bl	8002cf8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8002f12:	4605      	mov	r5, r0
 8002f14:	2800      	cmp	r0, #0
 8002f16:	f47f af4c 	bne.w	8002db2 <HAL_ADC_DeInit+0x2a>
      hadc->State = HAL_ADC_STATE_READY;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	6563      	str	r3, [r4, #84]	; 0x54
 8002f1e:	e748      	b.n	8002db2 <HAL_ADC_DeInit+0x2a>
 8002f20:	2200      	movs	r2, #0
 8002f22:	e7cd      	b.n	8002ec0 <HAL_ADC_DeInit+0x138>
 8002f24:	2300      	movs	r3, #0
 8002f26:	e7d1      	b.n	8002ecc <HAL_ADC_DeInit+0x144>
 8002f28:	2200      	movs	r2, #0
 8002f2a:	e7d6      	b.n	8002eda <HAL_ADC_DeInit+0x152>
    return HAL_ERROR;
 8002f2c:	2501      	movs	r5, #1
 8002f2e:	e7eb      	b.n	8002f08 <HAL_ADC_DeInit+0x180>
 8002f30:	80008004 	.word	0x80008004
 8002f34:	e0820830 	.word	0xe0820830
 8002f38:	e0820820 	.word	0xe0820820
 8002f3c:	03fff000 	.word	0x03fff000
 8002f40:	50040000 	.word	0x50040000
 8002f44:	50040100 	.word	0x50040100
 8002f48:	50040200 	.word	0x50040200
 8002f4c:	50040300 	.word	0x50040300

08002f50 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f50:	4a07      	ldr	r2, [pc, #28]	; (8002f70 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002f52:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f54:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f58:	041b      	lsls	r3, r3, #16
 8002f5a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f5c:	0200      	lsls	r0, r0, #8
 8002f5e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f62:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8002f64:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8002f68:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002f6c:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002f6e:	4770      	bx	lr
 8002f70:	e000ed00 	.word	0xe000ed00

08002f74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f74:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f76:	4b17      	ldr	r3, [pc, #92]	; (8002fd4 <HAL_NVIC_SetPriority+0x60>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f7e:	f1c3 0407 	rsb	r4, r3, #7
 8002f82:	2c04      	cmp	r4, #4
 8002f84:	bf28      	it	cs
 8002f86:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f88:	1d1d      	adds	r5, r3, #4
 8002f8a:	2d06      	cmp	r5, #6
 8002f8c:	d918      	bls.n	8002fc0 <HAL_NVIC_SetPriority+0x4c>
 8002f8e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f90:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002f94:	fa05 f404 	lsl.w	r4, r5, r4
 8002f98:	ea21 0104 	bic.w	r1, r1, r4
 8002f9c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f9e:	fa05 f303 	lsl.w	r3, r5, r3
 8002fa2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	db0b      	blt.n	8002fc4 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fac:	0109      	lsls	r1, r1, #4
 8002fae:	b2c9      	uxtb	r1, r1
 8002fb0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002fb4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002fb8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002fbc:	bc30      	pop	{r4, r5}
 8002fbe:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	e7e5      	b.n	8002f90 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc4:	f000 000f 	and.w	r0, r0, #15
 8002fc8:	0109      	lsls	r1, r1, #4
 8002fca:	b2c9      	uxtb	r1, r1
 8002fcc:	4b02      	ldr	r3, [pc, #8]	; (8002fd8 <HAL_NVIC_SetPriority+0x64>)
 8002fce:	5419      	strb	r1, [r3, r0]
 8002fd0:	e7f4      	b.n	8002fbc <HAL_NVIC_SetPriority+0x48>
 8002fd2:	bf00      	nop
 8002fd4:	e000ed00 	.word	0xe000ed00
 8002fd8:	e000ed14 	.word	0xe000ed14

08002fdc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002fdc:	2800      	cmp	r0, #0
 8002fde:	db07      	blt.n	8002ff0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fe0:	f000 021f 	and.w	r2, r0, #31
 8002fe4:	0940      	lsrs	r0, r0, #5
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	4093      	lsls	r3, r2
 8002fea:	4a02      	ldr	r2, [pc, #8]	; (8002ff4 <HAL_NVIC_EnableIRQ+0x18>)
 8002fec:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	e000e100 	.word	0xe000e100

08002ff8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ff8:	b470      	push	{r4, r5, r6}
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ffa:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002ffc:	f004 051c 	and.w	r5, r4, #28
 8003000:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8003002:	2401      	movs	r4, #1
 8003004:	40ac      	lsls	r4, r5
 8003006:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003008:	6804      	ldr	r4, [r0, #0]
 800300a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800300c:	6883      	ldr	r3, [r0, #8]
 800300e:	2b10      	cmp	r3, #16
 8003010:	d005      	beq.n	800301e <DMA_SetConfig+0x26>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003012:	6803      	ldr	r3, [r0, #0]
 8003014:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003016:	6803      	ldr	r3, [r0, #0]
 8003018:	60da      	str	r2, [r3, #12]
  }
}
 800301a:	bc70      	pop	{r4, r5, r6}
 800301c:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800301e:	6803      	ldr	r3, [r0, #0]
 8003020:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003022:	6803      	ldr	r3, [r0, #0]
 8003024:	60d9      	str	r1, [r3, #12]
 8003026:	e7f8      	b.n	800301a <DMA_SetConfig+0x22>

08003028 <HAL_DMA_Init>:
  if(hdma == NULL)
 8003028:	2800      	cmp	r0, #0
 800302a:	d069      	beq.n	8003100 <HAL_DMA_Init+0xd8>
{
 800302c:	b410      	push	{r4}
 800302e:	4603      	mov	r3, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003030:	6801      	ldr	r1, [r0, #0]
 8003032:	4a34      	ldr	r2, [pc, #208]	; (8003104 <HAL_DMA_Init+0xdc>)
 8003034:	4291      	cmp	r1, r2
 8003036:	d845      	bhi.n	80030c4 <HAL_DMA_Init+0x9c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003038:	4a33      	ldr	r2, [pc, #204]	; (8003108 <HAL_DMA_Init+0xe0>)
 800303a:	440a      	add	r2, r1
 800303c:	4933      	ldr	r1, [pc, #204]	; (800310c <HAL_DMA_Init+0xe4>)
 800303e:	fba1 1202 	umull	r1, r2, r1, r2
 8003042:	0912      	lsrs	r2, r2, #4
 8003044:	0092      	lsls	r2, r2, #2
 8003046:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003048:	4a31      	ldr	r2, [pc, #196]	; (8003110 <HAL_DMA_Init+0xe8>)
 800304a:	6402      	str	r2, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800304c:	2202      	movs	r2, #2
 800304e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 8003052:	6818      	ldr	r0, [r3, #0]
 8003054:	6801      	ldr	r1, [r0, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003056:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800305a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 800305e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003060:	68dc      	ldr	r4, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003062:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003064:	691c      	ldr	r4, [r3, #16]
 8003066:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003068:	695c      	ldr	r4, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800306a:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800306c:	699c      	ldr	r4, [r3, #24]
 800306e:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8003070:	69dc      	ldr	r4, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003072:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8003074:	6a1c      	ldr	r4, [r3, #32]
 8003076:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8003078:	430a      	orrs	r2, r1
  hdma->Instance->CCR = tmp;
 800307a:	6002      	str	r2, [r0, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003082:	d015      	beq.n	80030b0 <HAL_DMA_Init+0x88>
    if (DMA1 == hdma->DmaBaseAddress)
 8003084:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003086:	4a22      	ldr	r2, [pc, #136]	; (8003110 <HAL_DMA_Init+0xe8>)
 8003088:	4291      	cmp	r1, r2
 800308a:	d026      	beq.n	80030da <HAL_DMA_Init+0xb2>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800308c:	4a21      	ldr	r2, [pc, #132]	; (8003114 <HAL_DMA_Init+0xec>)
 800308e:	6811      	ldr	r1, [r2, #0]
 8003090:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8003092:	f000 041c 	and.w	r4, r0, #28
 8003096:	200f      	movs	r0, #15
 8003098:	40a0      	lsls	r0, r4
 800309a:	ea21 0100 	bic.w	r1, r1, r0
 800309e:	6011      	str	r1, [r2, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80030a0:	6811      	ldr	r1, [r2, #0]
 80030a2:	6858      	ldr	r0, [r3, #4]
 80030a4:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80030a6:	f004 041c 	and.w	r4, r4, #28
 80030aa:	40a0      	lsls	r0, r4
 80030ac:	4301      	orrs	r1, r0
 80030ae:	6011      	str	r1, [r2, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030b0:	2000      	movs	r0, #0
 80030b2:	63d8      	str	r0, [r3, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 80030ba:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
}
 80030be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030c2:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80030c4:	4a14      	ldr	r2, [pc, #80]	; (8003118 <HAL_DMA_Init+0xf0>)
 80030c6:	440a      	add	r2, r1
 80030c8:	4910      	ldr	r1, [pc, #64]	; (800310c <HAL_DMA_Init+0xe4>)
 80030ca:	fba1 1202 	umull	r1, r2, r1, r2
 80030ce:	0912      	lsrs	r2, r2, #4
 80030d0:	0092      	lsls	r2, r2, #2
 80030d2:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80030d4:	4a11      	ldr	r2, [pc, #68]	; (800311c <HAL_DMA_Init+0xf4>)
 80030d6:	6402      	str	r2, [r0, #64]	; 0x40
 80030d8:	e7b8      	b.n	800304c <HAL_DMA_Init+0x24>
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80030da:	32a8      	adds	r2, #168	; 0xa8
 80030dc:	6811      	ldr	r1, [r2, #0]
 80030de:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80030e0:	f000 041c 	and.w	r4, r0, #28
 80030e4:	200f      	movs	r0, #15
 80030e6:	40a0      	lsls	r0, r4
 80030e8:	ea21 0100 	bic.w	r1, r1, r0
 80030ec:	6011      	str	r1, [r2, #0]
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80030ee:	6811      	ldr	r1, [r2, #0]
 80030f0:	6858      	ldr	r0, [r3, #4]
 80030f2:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80030f4:	f004 041c 	and.w	r4, r4, #28
 80030f8:	40a0      	lsls	r0, r4
 80030fa:	4301      	orrs	r1, r0
 80030fc:	6011      	str	r1, [r2, #0]
 80030fe:	e7d7      	b.n	80030b0 <HAL_DMA_Init+0x88>
    return HAL_ERROR;
 8003100:	2001      	movs	r0, #1
}
 8003102:	4770      	bx	lr
 8003104:	40020407 	.word	0x40020407
 8003108:	bffdfff8 	.word	0xbffdfff8
 800310c:	cccccccd 	.word	0xcccccccd
 8003110:	40020000 	.word	0x40020000
 8003114:	400204a8 	.word	0x400204a8
 8003118:	bffdfbf8 	.word	0xbffdfbf8
 800311c:	40020400 	.word	0x40020400

08003120 <HAL_DMA_Start_IT>:
{
 8003120:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 8003122:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8003126:	2c01      	cmp	r4, #1
 8003128:	d033      	beq.n	8003192 <HAL_DMA_Start_IT+0x72>
 800312a:	2401      	movs	r4, #1
 800312c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8003130:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8003134:	b2e4      	uxtb	r4, r4
 8003136:	2c01      	cmp	r4, #1
 8003138:	d004      	beq.n	8003144 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 800313a:	2300      	movs	r3, #0
 800313c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    status = HAL_BUSY;
 8003140:	2002      	movs	r0, #2
}
 8003142:	bd38      	pop	{r3, r4, r5, pc}
 8003144:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8003146:	2002      	movs	r0, #2
 8003148:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800314c:	2000      	movs	r0, #0
 800314e:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003150:	6825      	ldr	r5, [r4, #0]
 8003152:	6828      	ldr	r0, [r5, #0]
 8003154:	f020 0001 	bic.w	r0, r0, #1
 8003158:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800315a:	4620      	mov	r0, r4
 800315c:	f7ff ff4c 	bl	8002ff8 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8003160:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003162:	b15b      	cbz	r3, 800317c <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003164:	6822      	ldr	r2, [r4, #0]
 8003166:	6813      	ldr	r3, [r2, #0]
 8003168:	f043 030e 	orr.w	r3, r3, #14
 800316c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800316e:	6822      	ldr	r2, [r4, #0]
 8003170:	6813      	ldr	r3, [r2, #0]
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003178:	2000      	movs	r0, #0
 800317a:	e7e2      	b.n	8003142 <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800317c:	6822      	ldr	r2, [r4, #0]
 800317e:	6813      	ldr	r3, [r2, #0]
 8003180:	f023 0304 	bic.w	r3, r3, #4
 8003184:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003186:	6822      	ldr	r2, [r4, #0]
 8003188:	6813      	ldr	r3, [r2, #0]
 800318a:	f043 030a 	orr.w	r3, r3, #10
 800318e:	6013      	str	r3, [r2, #0]
 8003190:	e7ed      	b.n	800316e <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8003192:	2002      	movs	r0, #2
 8003194:	e7d5      	b.n	8003142 <HAL_DMA_Start_IT+0x22>

08003196 <HAL_DMA_Abort_IT>:
{
 8003196:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003198:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d003      	beq.n	80031aa <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031a2:	2304      	movs	r3, #4
 80031a4:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80031a6:	2001      	movs	r0, #1
}
 80031a8:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031aa:	6802      	ldr	r2, [r0, #0]
 80031ac:	6813      	ldr	r3, [r2, #0]
 80031ae:	f023 030e 	bic.w	r3, r3, #14
 80031b2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80031b4:	6802      	ldr	r2, [r0, #0]
 80031b6:	6813      	ldr	r3, [r2, #0]
 80031b8:	f023 0301 	bic.w	r3, r3, #1
 80031bc:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031be:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80031c0:	f003 031c 	and.w	r3, r3, #28
 80031c4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80031c6:	2201      	movs	r2, #1
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80031ce:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80031d2:	2300      	movs	r3, #0
 80031d4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 80031d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80031da:	b113      	cbz	r3, 80031e2 <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 80031dc:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80031de:	2000      	movs	r0, #0
 80031e0:	e7e2      	b.n	80031a8 <HAL_DMA_Abort_IT+0x12>
 80031e2:	2000      	movs	r0, #0
 80031e4:	e7e0      	b.n	80031a8 <HAL_DMA_Abort_IT+0x12>

080031e6 <HAL_DMA_IRQHandler>:
{
 80031e6:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031e8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80031ea:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80031ec:	6804      	ldr	r4, [r0, #0]
 80031ee:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80031f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80031f2:	f003 031c 	and.w	r3, r3, #28
 80031f6:	2204      	movs	r2, #4
 80031f8:	409a      	lsls	r2, r3
 80031fa:	420a      	tst	r2, r1
 80031fc:	d015      	beq.n	800322a <HAL_DMA_IRQHandler+0x44>
 80031fe:	f015 0f04 	tst.w	r5, #4
 8003202:	d012      	beq.n	800322a <HAL_DMA_IRQHandler+0x44>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003204:	6823      	ldr	r3, [r4, #0]
 8003206:	f013 0f20 	tst.w	r3, #32
 800320a:	d103      	bne.n	8003214 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800320c:	6823      	ldr	r3, [r4, #0]
 800320e:	f023 0304 	bic.w	r3, r3, #4
 8003212:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003214:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003216:	f003 021c 	and.w	r2, r3, #28
 800321a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800321c:	2304      	movs	r3, #4
 800321e:	4093      	lsls	r3, r2
 8003220:	604b      	str	r3, [r1, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 8003222:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003224:	b103      	cbz	r3, 8003228 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8003226:	4798      	blx	r3
}
 8003228:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800322a:	2202      	movs	r2, #2
 800322c:	409a      	lsls	r2, r3
 800322e:	420a      	tst	r2, r1
 8003230:	d01c      	beq.n	800326c <HAL_DMA_IRQHandler+0x86>
 8003232:	f015 0f02 	tst.w	r5, #2
 8003236:	d019      	beq.n	800326c <HAL_DMA_IRQHandler+0x86>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003238:	6823      	ldr	r3, [r4, #0]
 800323a:	f013 0f20 	tst.w	r3, #32
 800323e:	d106      	bne.n	800324e <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003240:	6823      	ldr	r3, [r4, #0]
 8003242:	f023 030a 	bic.w	r3, r3, #10
 8003246:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003248:	2301      	movs	r3, #1
 800324a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800324e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003250:	f003 021c 	and.w	r2, r3, #28
 8003254:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003256:	2302      	movs	r3, #2
 8003258:	4093      	lsls	r3, r2
 800325a:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 800325c:	2300      	movs	r3, #0
 800325e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8003262:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0df      	beq.n	8003228 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8003268:	4798      	blx	r3
 800326a:	e7dd      	b.n	8003228 <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800326c:	2208      	movs	r2, #8
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	420b      	tst	r3, r1
 8003274:	d0d8      	beq.n	8003228 <HAL_DMA_IRQHandler+0x42>
 8003276:	f015 0f08 	tst.w	r5, #8
 800327a:	d0d5      	beq.n	8003228 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800327c:	6823      	ldr	r3, [r4, #0]
 800327e:	f023 030e 	bic.w	r3, r3, #14
 8003282:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003284:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003286:	f003 031c 	and.w	r3, r3, #28
 800328a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800328c:	2201      	movs	r2, #1
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003294:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003296:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800329a:	2300      	movs	r3, #0
 800329c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80032a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0c0      	beq.n	8003228 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 80032a6:	4798      	blx	r3
  return;
 80032a8:	e7be      	b.n	8003228 <HAL_DMA_IRQHandler+0x42>
	...

080032ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ae:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 80032b0:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032b2:	e03f      	b.n	8003334 <HAL_GPIO_Init+0x88>

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80032b4:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80032b6:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80032ba:	f3c5 04c0 	ubfx	r4, r5, #3, #1
 80032be:	409c      	lsls	r4, r3
 80032c0:	4334      	orrs	r4, r6
        GPIOx->ASCR = temp;
 80032c2:	62c4      	str	r4, [r0, #44]	; 0x2c
 80032c4:	e05f      	b.n	8003386 <HAL_GPIO_Init+0xda>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032c6:	2406      	movs	r4, #6
 80032c8:	e000      	b.n	80032cc <HAL_GPIO_Init+0x20>
 80032ca:	2400      	movs	r4, #0
 80032cc:	40b4      	lsls	r4, r6
 80032ce:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032d0:	3502      	adds	r5, #2
 80032d2:	4e64      	ldr	r6, [pc, #400]	; (8003464 <HAL_GPIO_Init+0x1b8>)
 80032d4:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80032d8:	4c63      	ldr	r4, [pc, #396]	; (8003468 <HAL_GPIO_Init+0x1bc>)
 80032da:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80032dc:	43d4      	mvns	r4, r2
 80032de:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032e2:	684f      	ldr	r7, [r1, #4]
 80032e4:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80032e8:	d001      	beq.n	80032ee <HAL_GPIO_Init+0x42>
        {
          temp |= iocurrent;
 80032ea:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 80032ee:	4d5e      	ldr	r5, [pc, #376]	; (8003468 <HAL_GPIO_Init+0x1bc>)
 80032f0:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 80032f2:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80032f4:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032f8:	684f      	ldr	r7, [r1, #4]
 80032fa:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80032fe:	d001      	beq.n	8003304 <HAL_GPIO_Init+0x58>
        {
          temp |= iocurrent;
 8003300:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8003304:	4d58      	ldr	r5, [pc, #352]	; (8003468 <HAL_GPIO_Init+0x1bc>)
 8003306:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003308:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 800330a:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800330e:	684f      	ldr	r7, [r1, #4]
 8003310:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8003314:	d001      	beq.n	800331a <HAL_GPIO_Init+0x6e>
        {
          temp |= iocurrent;
 8003316:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800331a:	4d53      	ldr	r5, [pc, #332]	; (8003468 <HAL_GPIO_Init+0x1bc>)
 800331c:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 800331e:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8003320:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003322:	684e      	ldr	r6, [r1, #4]
 8003324:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8003328:	d001      	beq.n	800332e <HAL_GPIO_Init+0x82>
        {
          temp |= iocurrent;
 800332a:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 800332e:	4a4e      	ldr	r2, [pc, #312]	; (8003468 <HAL_GPIO_Init+0x1bc>)
 8003330:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8003332:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003334:	680a      	ldr	r2, [r1, #0]
 8003336:	fa32 f403 	lsrs.w	r4, r2, r3
 800333a:	f000 8091 	beq.w	8003460 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800333e:	2401      	movs	r4, #1
 8003340:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8003342:	4022      	ands	r2, r4
 8003344:	d0f5      	beq.n	8003332 <HAL_GPIO_Init+0x86>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003346:	684d      	ldr	r5, [r1, #4]
 8003348:	1e6e      	subs	r6, r5, #1
 800334a:	2e01      	cmp	r6, #1
 800334c:	d903      	bls.n	8003356 <HAL_GPIO_Init+0xaa>
 800334e:	2d11      	cmp	r5, #17
 8003350:	d001      	beq.n	8003356 <HAL_GPIO_Init+0xaa>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003352:	2d12      	cmp	r5, #18
 8003354:	d112      	bne.n	800337c <HAL_GPIO_Init+0xd0>
        temp = GPIOx->OSPEEDR;
 8003356:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003358:	005f      	lsls	r7, r3, #1
 800335a:	2503      	movs	r5, #3
 800335c:	40bd      	lsls	r5, r7
 800335e:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003362:	68cd      	ldr	r5, [r1, #12]
 8003364:	40bd      	lsls	r5, r7
 8003366:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8003368:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 800336a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800336c:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003370:	684d      	ldr	r5, [r1, #4]
 8003372:	f3c5 1500 	ubfx	r5, r5, #4, #1
 8003376:	409d      	lsls	r5, r3
 8003378:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 800337a:	6045      	str	r5, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800337c:	684d      	ldr	r5, [r1, #4]
 800337e:	f005 0603 	and.w	r6, r5, #3
 8003382:	2e03      	cmp	r6, #3
 8003384:	d096      	beq.n	80032b4 <HAL_GPIO_Init+0x8>
      temp = GPIOx->PUPDR;
 8003386:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003388:	005f      	lsls	r7, r3, #1
 800338a:	2403      	movs	r4, #3
 800338c:	40bc      	lsls	r4, r7
 800338e:	43e4      	mvns	r4, r4
 8003390:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003392:	688e      	ldr	r6, [r1, #8]
 8003394:	40be      	lsls	r6, r7
 8003396:	432e      	orrs	r6, r5
      GPIOx->PUPDR = temp;
 8003398:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800339a:	684d      	ldr	r5, [r1, #4]
 800339c:	2d02      	cmp	r5, #2
 800339e:	d001      	beq.n	80033a4 <HAL_GPIO_Init+0xf8>
 80033a0:	2d12      	cmp	r5, #18
 80033a2:	d113      	bne.n	80033cc <HAL_GPIO_Init+0x120>
        temp = GPIOx->AFR[position >> 3u];
 80033a4:	08de      	lsrs	r6, r3, #3
 80033a6:	3608      	adds	r6, #8
 80033a8:	f850 e026 	ldr.w	lr, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033ac:	f003 0507 	and.w	r5, r3, #7
 80033b0:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 80033b4:	250f      	movs	r5, #15
 80033b6:	fa05 f50c 	lsl.w	r5, r5, ip
 80033ba:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033be:	690d      	ldr	r5, [r1, #16]
 80033c0:	fa05 f50c 	lsl.w	r5, r5, ip
 80033c4:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3u] = temp;
 80033c8:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 80033cc:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033ce:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033d0:	684d      	ldr	r5, [r1, #4]
 80033d2:	f005 0503 	and.w	r5, r5, #3
 80033d6:	40bd      	lsls	r5, r7
 80033d8:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 80033da:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033dc:	684c      	ldr	r4, [r1, #4]
 80033de:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80033e2:	d0a6      	beq.n	8003332 <HAL_GPIO_Init+0x86>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e4:	4c21      	ldr	r4, [pc, #132]	; (800346c <HAL_GPIO_Init+0x1c0>)
 80033e6:	6e25      	ldr	r5, [r4, #96]	; 0x60
 80033e8:	f045 0501 	orr.w	r5, r5, #1
 80033ec:	6625      	str	r5, [r4, #96]	; 0x60
 80033ee:	6e24      	ldr	r4, [r4, #96]	; 0x60
 80033f0:	f004 0401 	and.w	r4, r4, #1
 80033f4:	9401      	str	r4, [sp, #4]
 80033f6:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80033f8:	089d      	lsrs	r5, r3, #2
 80033fa:	1cae      	adds	r6, r5, #2
 80033fc:	4c19      	ldr	r4, [pc, #100]	; (8003464 <HAL_GPIO_Init+0x1b8>)
 80033fe:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003402:	f003 0403 	and.w	r4, r3, #3
 8003406:	00a6      	lsls	r6, r4, #2
 8003408:	240f      	movs	r4, #15
 800340a:	40b4      	lsls	r4, r6
 800340c:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003410:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003414:	f43f af59 	beq.w	80032ca <HAL_GPIO_Init+0x1e>
 8003418:	4c15      	ldr	r4, [pc, #84]	; (8003470 <HAL_GPIO_Init+0x1c4>)
 800341a:	42a0      	cmp	r0, r4
 800341c:	d016      	beq.n	800344c <HAL_GPIO_Init+0x1a0>
 800341e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003422:	42a0      	cmp	r0, r4
 8003424:	d014      	beq.n	8003450 <HAL_GPIO_Init+0x1a4>
 8003426:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800342a:	42a0      	cmp	r0, r4
 800342c:	d012      	beq.n	8003454 <HAL_GPIO_Init+0x1a8>
 800342e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003432:	42a0      	cmp	r0, r4
 8003434:	d010      	beq.n	8003458 <HAL_GPIO_Init+0x1ac>
 8003436:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800343a:	42a0      	cmp	r0, r4
 800343c:	d00e      	beq.n	800345c <HAL_GPIO_Init+0x1b0>
 800343e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003442:	42a0      	cmp	r0, r4
 8003444:	f43f af3f 	beq.w	80032c6 <HAL_GPIO_Init+0x1a>
 8003448:	2407      	movs	r4, #7
 800344a:	e73f      	b.n	80032cc <HAL_GPIO_Init+0x20>
 800344c:	2401      	movs	r4, #1
 800344e:	e73d      	b.n	80032cc <HAL_GPIO_Init+0x20>
 8003450:	2402      	movs	r4, #2
 8003452:	e73b      	b.n	80032cc <HAL_GPIO_Init+0x20>
 8003454:	2403      	movs	r4, #3
 8003456:	e739      	b.n	80032cc <HAL_GPIO_Init+0x20>
 8003458:	2404      	movs	r4, #4
 800345a:	e737      	b.n	80032cc <HAL_GPIO_Init+0x20>
 800345c:	2405      	movs	r4, #5
 800345e:	e735      	b.n	80032cc <HAL_GPIO_Init+0x20>
  }
}
 8003460:	b003      	add	sp, #12
 8003462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003464:	40010000 	.word	0x40010000
 8003468:	40010400 	.word	0x40010400
 800346c:	40021000 	.word	0x40021000
 8003470:	48000400 	.word	0x48000400

08003474 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003474:	b90a      	cbnz	r2, 800347a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003476:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003478:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800347a:	6181      	str	r1, [r0, #24]
 800347c:	4770      	bx	lr
	...

08003480 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003480:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003482:	4b05      	ldr	r3, [pc, #20]	; (8003498 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	4203      	tst	r3, r0
 8003488:	d100      	bne.n	800348c <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 800348a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800348c:	4b02      	ldr	r3, [pc, #8]	; (8003498 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800348e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003490:	f003 fb1e 	bl	8006ad0 <HAL_GPIO_EXTI_Callback>
}
 8003494:	e7f9      	b.n	800348a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003496:	bf00      	nop
 8003498:	40010400 	.word	0x40010400

0800349c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800349c:	b510      	push	{r4, lr}
 800349e:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80034a0:	b9a0      	cbnz	r0, 80034cc <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80034a2:	4b0f      	ldr	r3, [pc, #60]	; (80034e0 <HAL_PWR_EnterSLEEPMode+0x44>)
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80034aa:	d10a      	bne.n	80034c2 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80034ac:	4a0d      	ldr	r2, [pc, #52]	; (80034e4 <HAL_PWR_EnterSLEEPMode+0x48>)
 80034ae:	6913      	ldr	r3, [r2, #16]
 80034b0:	f023 0304 	bic.w	r3, r3, #4
 80034b4:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80034b6:	2c01      	cmp	r4, #1
 80034b8:	d010      	beq.n	80034dc <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80034ba:	bf40      	sev
    __WFE();
 80034bc:	bf20      	wfe
    __WFE();
 80034be:	bf20      	wfe
  }

}
 80034c0:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80034c2:	f000 f82d 	bl	8003520 <HAL_PWREx_DisableLowPowerRunMode>
 80034c6:	2800      	cmp	r0, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_PWR_EnterSLEEPMode+0x10>
 80034ca:	e7f9      	b.n	80034c0 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 80034cc:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <HAL_PWR_EnterSLEEPMode+0x44>)
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	f413 7f00 	tst.w	r3, #512	; 0x200
 80034d4:	d1ea      	bne.n	80034ac <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 80034d6:	f000 f81b 	bl	8003510 <HAL_PWREx_EnableLowPowerRunMode>
 80034da:	e7e7      	b.n	80034ac <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 80034dc:	bf30      	wfi
 80034de:	e7ef      	b.n	80034c0 <HAL_PWR_EnterSLEEPMode+0x24>
 80034e0:	40007000 	.word	0x40007000
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80034e8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 80034ea:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80034ee:	d003      	beq.n	80034f8 <HAL_PWR_EnterSTOPMode+0x10>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 80034f0:	4608      	mov	r0, r1
 80034f2:	f000 f83d 	bl	8003570 <HAL_PWREx_EnterSTOP0Mode>
  }
}
 80034f6:	bd08      	pop	{r3, pc}
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 80034f8:	4608      	mov	r0, r1
 80034fa:	f000 f855 	bl	80035a8 <HAL_PWREx_EnterSTOP1Mode>
 80034fe:	e7fa      	b.n	80034f6 <HAL_PWR_EnterSTOPMode+0xe>

08003500 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003500:	4b02      	ldr	r3, [pc, #8]	; (800350c <HAL_PWREx_GetVoltageRange+0xc>)
 8003502:	6818      	ldr	r0, [r3, #0]
#endif
}
 8003504:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40007000 	.word	0x40007000

08003510 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8003510:	4a02      	ldr	r2, [pc, #8]	; (800351c <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8003512:	6813      	ldr	r3, [r2, #0]
 8003514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003518:	6013      	str	r3, [r2, #0]
}
 800351a:	4770      	bx	lr
 800351c:	40007000 	.word	0x40007000

08003520 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8003520:	4a10      	ldr	r2, [pc, #64]	; (8003564 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8003522:	6813      	ldr	r3, [r2, #0]
 8003524:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003528:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800352a:	4b0f      	ldr	r3, [pc, #60]	; (8003568 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	2332      	movs	r3, #50	; 0x32
 8003530:	fb03 f302 	mul.w	r3, r3, r2
 8003534:	4a0d      	ldr	r2, [pc, #52]	; (800356c <HAL_PWREx_DisableLowPowerRunMode+0x4c>)
 8003536:	fba2 2303 	umull	r2, r3, r2, r3
 800353a:	0c9b      	lsrs	r3, r3, #18
 800353c:	3301      	adds	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800353e:	e000      	b.n	8003542 <HAL_PWREx_DisableLowPowerRunMode+0x22>
  {
    wait_loop_index--;
 8003540:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003542:	4a08      	ldr	r2, [pc, #32]	; (8003564 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8003544:	6952      	ldr	r2, [r2, #20]
 8003546:	f412 7f00 	tst.w	r2, #512	; 0x200
 800354a:	d001      	beq.n	8003550 <HAL_PWREx_DisableLowPowerRunMode+0x30>
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1f7      	bne.n	8003540 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8003550:	4b04      	ldr	r3, [pc, #16]	; (8003564 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003558:	d101      	bne.n	800355e <HAL_PWREx_DisableLowPowerRunMode+0x3e>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 800355a:	2000      	movs	r0, #0
}
 800355c:	4770      	bx	lr
    return HAL_TIMEOUT;
 800355e:	2003      	movs	r0, #3
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40007000 	.word	0x40007000
 8003568:	2000003c 	.word	0x2000003c
 800356c:	431bde83 	.word	0x431bde83

08003570 <HAL_PWREx_EnterSTOP0Mode>:
{
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 8003570:	4a0b      	ldr	r2, [pc, #44]	; (80035a0 <HAL_PWREx_EnterSTOP0Mode+0x30>)
 8003572:	6813      	ldr	r3, [r2, #0]
 8003574:	f023 0307 	bic.w	r3, r3, #7
 8003578:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800357a:	4a0a      	ldr	r2, [pc, #40]	; (80035a4 <HAL_PWREx_EnterSTOP0Mode+0x34>)
 800357c:	6913      	ldr	r3, [r2, #16]
 800357e:	f043 0304 	orr.w	r3, r3, #4
 8003582:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003584:	2801      	cmp	r0, #1
 8003586:	d008      	beq.n	800359a <HAL_PWREx_EnterSTOP0Mode+0x2a>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003588:	bf40      	sev
    __WFE();
 800358a:	bf20      	wfe
    __WFE();
 800358c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800358e:	4a05      	ldr	r2, [pc, #20]	; (80035a4 <HAL_PWREx_EnterSTOP0Mode+0x34>)
 8003590:	6913      	ldr	r3, [r2, #16]
 8003592:	f023 0304 	bic.w	r3, r3, #4
 8003596:	6113      	str	r3, [r2, #16]
}
 8003598:	4770      	bx	lr
    __WFI();
 800359a:	bf30      	wfi
 800359c:	e7f7      	b.n	800358e <HAL_PWREx_EnterSTOP0Mode+0x1e>
 800359e:	bf00      	nop
 80035a0:	40007000 	.word	0x40007000
 80035a4:	e000ed00 	.word	0xe000ed00

080035a8 <HAL_PWREx_EnterSTOP1Mode>:
{
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 80035a8:	4a0c      	ldr	r2, [pc, #48]	; (80035dc <HAL_PWREx_EnterSTOP1Mode+0x34>)
 80035aa:	6813      	ldr	r3, [r2, #0]
 80035ac:	f023 0307 	bic.w	r3, r3, #7
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80035b6:	4a0a      	ldr	r2, [pc, #40]	; (80035e0 <HAL_PWREx_EnterSTOP1Mode+0x38>)
 80035b8:	6913      	ldr	r3, [r2, #16]
 80035ba:	f043 0304 	orr.w	r3, r3, #4
 80035be:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80035c0:	2801      	cmp	r0, #1
 80035c2:	d008      	beq.n	80035d6 <HAL_PWREx_EnterSTOP1Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80035c4:	bf40      	sev
    __WFE();
 80035c6:	bf20      	wfe
    __WFE();
 80035c8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80035ca:	4a05      	ldr	r2, [pc, #20]	; (80035e0 <HAL_PWREx_EnterSTOP1Mode+0x38>)
 80035cc:	6913      	ldr	r3, [r2, #16]
 80035ce:	f023 0304 	bic.w	r3, r3, #4
 80035d2:	6113      	str	r3, [r2, #16]
}
 80035d4:	4770      	bx	lr
    __WFI();
 80035d6:	bf30      	wfi
 80035d8:	e7f7      	b.n	80035ca <HAL_PWREx_EnterSTOP1Mode+0x22>
 80035da:	bf00      	nop
 80035dc:	40007000 	.word	0x40007000
 80035e0:	e000ed00 	.word	0xe000ed00

080035e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035e4:	b530      	push	{r4, r5, lr}
 80035e6:	b083      	sub	sp, #12
 80035e8:	4605      	mov	r5, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035ea:	4b20      	ldr	r3, [pc, #128]	; (800366c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80035ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ee:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80035f2:	d00b      	beq.n	800360c <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035f4:	f7ff ff84 	bl	8003500 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035f8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80035fc:	d017      	beq.n	800362e <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035fe:	2d80      	cmp	r5, #128	; 0x80
 8003600:	d81f      	bhi.n	8003642 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003602:	d02d      	beq.n	8003660 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003604:	2d70      	cmp	r5, #112	; 0x70
 8003606:	d02d      	beq.n	8003664 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003608:	2100      	movs	r1, #0
 800360a:	e01b      	b.n	8003644 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 800360c:	4c17      	ldr	r4, [pc, #92]	; (800366c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800360e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003614:	65a3      	str	r3, [r4, #88]	; 0x58
 8003616:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003620:	f7ff ff6e 	bl	8003500 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003624:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800362a:	65a3      	str	r3, [r4, #88]	; 0x58
 800362c:	e7e4      	b.n	80035f8 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 800362e:	2d80      	cmp	r5, #128	; 0x80
 8003630:	d903      	bls.n	800363a <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8003632:	2da0      	cmp	r5, #160	; 0xa0
 8003634:	d903      	bls.n	800363e <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8003636:	2102      	movs	r1, #2
 8003638:	e004      	b.n	8003644 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800363a:	2100      	movs	r1, #0
 800363c:	e002      	b.n	8003644 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 800363e:	2101      	movs	r1, #1
 8003640:	e000      	b.n	8003644 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8003642:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003644:	4a0a      	ldr	r2, [pc, #40]	; (8003670 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8003646:	6813      	ldr	r3, [r2, #0]
 8003648:	f023 0307 	bic.w	r3, r3, #7
 800364c:	430b      	orrs	r3, r1
 800364e:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003650:	6813      	ldr	r3, [r2, #0]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	428b      	cmp	r3, r1
 8003658:	d006      	beq.n	8003668 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
 800365a:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800365c:	b003      	add	sp, #12
 800365e:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8003660:	2102      	movs	r1, #2
 8003662:	e7ef      	b.n	8003644 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8003664:	2101      	movs	r1, #1
 8003666:	e7ed      	b.n	8003644 <RCC_SetFlashLatencyFromMSIRange+0x60>
  return HAL_OK;
 8003668:	2000      	movs	r0, #0
 800366a:	e7f7      	b.n	800365c <RCC_SetFlashLatencyFromMSIRange+0x78>
 800366c:	40021000 	.word	0x40021000
 8003670:	40022000 	.word	0x40022000

08003674 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003674:	4a28      	ldr	r2, [pc, #160]	; (8003718 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003676:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003678:	68d2      	ldr	r2, [r2, #12]
 800367a:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800367e:	f013 030c 	ands.w	r3, r3, #12
 8003682:	d00a      	beq.n	800369a <HAL_RCC_GetSysClockFreq+0x26>
 8003684:	2b0c      	cmp	r3, #12
 8003686:	d006      	beq.n	8003696 <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003688:	2b04      	cmp	r3, #4
 800368a:	d01f      	beq.n	80036cc <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800368c:	2b08      	cmp	r3, #8
 800368e:	d020      	beq.n	80036d2 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003690:	2000      	movs	r0, #0
 8003692:	4602      	mov	r2, r0
 8003694:	e010      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003696:	2a01      	cmp	r2, #1
 8003698:	d1f6      	bne.n	8003688 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800369a:	4a1f      	ldr	r2, [pc, #124]	; (8003718 <HAL_RCC_GetSysClockFreq+0xa4>)
 800369c:	6812      	ldr	r2, [r2, #0]
 800369e:	f012 0f08 	tst.w	r2, #8
 80036a2:	d10c      	bne.n	80036be <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036a4:	4a1c      	ldr	r2, [pc, #112]	; (8003718 <HAL_RCC_GetSysClockFreq+0xa4>)
 80036a6:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 80036aa:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 80036ae:	491b      	ldr	r1, [pc, #108]	; (800371c <HAL_RCC_GetSysClockFreq+0xa8>)
 80036b0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036b4:	b143      	cbz	r3, 80036c8 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036b6:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036b8:	2b0c      	cmp	r3, #12
 80036ba:	d00d      	beq.n	80036d8 <HAL_RCC_GetSysClockFreq+0x64>
}
 80036bc:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036be:	4a16      	ldr	r2, [pc, #88]	; (8003718 <HAL_RCC_GetSysClockFreq+0xa4>)
 80036c0:	6812      	ldr	r2, [r2, #0]
 80036c2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80036c6:	e7f2      	b.n	80036ae <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 80036c8:	4610      	mov	r0, r2
 80036ca:	e7f5      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 80036cc:	4814      	ldr	r0, [pc, #80]	; (8003720 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036ce:	2200      	movs	r2, #0
 80036d0:	e7f2      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 80036d2:	4814      	ldr	r0, [pc, #80]	; (8003724 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036d4:	2200      	movs	r2, #0
 80036d6:	e7ef      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036d8:	4b0f      	ldr	r3, [pc, #60]	; (8003718 <HAL_RCC_GetSysClockFreq+0xa4>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d015      	beq.n	8003710 <HAL_RCC_GetSysClockFreq+0x9c>
 80036e4:	2b03      	cmp	r3, #3
 80036e6:	d015      	beq.n	8003714 <HAL_RCC_GetSysClockFreq+0xa0>
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036e8:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <HAL_RCC_GetSysClockFreq+0xa4>)
 80036ea:	68d8      	ldr	r0, [r3, #12]
 80036ec:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80036f0:	3001      	adds	r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036f2:	68d9      	ldr	r1, [r3, #12]
 80036f4:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80036f8:	fb02 f201 	mul.w	r2, r2, r1
 80036fc:	fbb2 f2f0 	udiv	r2, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003700:	68d8      	ldr	r0, [r3, #12]
 8003702:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8003706:	3001      	adds	r0, #1
 8003708:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 800370a:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 800370e:	e7d5      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = HSI_VALUE;
 8003710:	4a03      	ldr	r2, [pc, #12]	; (8003720 <HAL_RCC_GetSysClockFreq+0xac>)
 8003712:	e7e9      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = HSE_VALUE;
 8003714:	4a03      	ldr	r2, [pc, #12]	; (8003724 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003716:	e7e7      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x74>
 8003718:	40021000 	.word	0x40021000
 800371c:	0800824c 	.word	0x0800824c
 8003720:	00f42400 	.word	0x00f42400
 8003724:	007a1200 	.word	0x007a1200

08003728 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8003728:	2800      	cmp	r0, #0
 800372a:	f000 8300 	beq.w	8003d2e <HAL_RCC_OscConfig+0x606>
{
 800372e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003730:	b083      	sub	sp, #12
 8003732:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003734:	4baf      	ldr	r3, [pc, #700]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 8003736:	689d      	ldr	r5, [r3, #8]
 8003738:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800373c:	68de      	ldr	r6, [r3, #12]
 800373e:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003742:	6803      	ldr	r3, [r0, #0]
 8003744:	f013 0f10 	tst.w	r3, #16
 8003748:	d05b      	beq.n	8003802 <HAL_RCC_OscConfig+0xda>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800374a:	b1e5      	cbz	r5, 8003786 <HAL_RCC_OscConfig+0x5e>
 800374c:	2d0c      	cmp	r5, #12
 800374e:	d018      	beq.n	8003782 <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003750:	69a3      	ldr	r3, [r4, #24]
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 80bc 	beq.w	80038d0 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_MSI_ENABLE();
 8003758:	4aa6      	ldr	r2, [pc, #664]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 800375a:	6813      	ldr	r3, [r2, #0]
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003762:	f7ff f91f 	bl	80029a4 <HAL_GetTick>
 8003766:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003768:	4ba2      	ldr	r3, [pc, #648]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f013 0f02 	tst.w	r3, #2
 8003770:	f040 809b 	bne.w	80038aa <HAL_RCC_OscConfig+0x182>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003774:	f7ff f916 	bl	80029a4 <HAL_GetTick>
 8003778:	1bc0      	subs	r0, r0, r7
 800377a:	2802      	cmp	r0, #2
 800377c:	d9f4      	bls.n	8003768 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e2e1      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003782:	2e01      	cmp	r6, #1
 8003784:	d1e4      	bne.n	8003750 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003786:	4b9b      	ldr	r3, [pc, #620]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f013 0f02 	tst.w	r3, #2
 800378e:	d003      	beq.n	8003798 <HAL_RCC_OscConfig+0x70>
 8003790:	69a3      	ldr	r3, [r4, #24]
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 82ce 	beq.w	8003d34 <HAL_RCC_OscConfig+0x60c>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003798:	6a20      	ldr	r0, [r4, #32]
 800379a:	4b96      	ldr	r3, [pc, #600]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f013 0f08 	tst.w	r3, #8
 80037a2:	d05c      	beq.n	800385e <HAL_RCC_OscConfig+0x136>
 80037a4:	4b93      	ldr	r3, [pc, #588]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037ac:	4298      	cmp	r0, r3
 80037ae:	d85d      	bhi.n	800386c <HAL_RCC_OscConfig+0x144>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037b0:	4b90      	ldr	r3, [pc, #576]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	f042 0208 	orr.w	r2, r2, #8
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80037c0:	6a21      	ldr	r1, [r4, #32]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80037cc:	69e1      	ldr	r1, [r4, #28]
 80037ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80037d2:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037d4:	2d00      	cmp	r5, #0
 80037d6:	d061      	beq.n	800389c <HAL_RCC_OscConfig+0x174>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037d8:	f7ff ff4c 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 80037dc:	4b85      	ldr	r3, [pc, #532]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80037e4:	4a84      	ldr	r2, [pc, #528]	; (80039f8 <HAL_RCC_OscConfig+0x2d0>)
 80037e6:	5cd3      	ldrb	r3, [r2, r3]
 80037e8:	f003 031f 	and.w	r3, r3, #31
 80037ec:	40d8      	lsrs	r0, r3
 80037ee:	4b83      	ldr	r3, [pc, #524]	; (80039fc <HAL_RCC_OscConfig+0x2d4>)
 80037f0:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80037f2:	4b83      	ldr	r3, [pc, #524]	; (8003a00 <HAL_RCC_OscConfig+0x2d8>)
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	f003 f90c 	bl	8006a12 <HAL_InitTick>
        if(status != HAL_OK)
 80037fa:	4603      	mov	r3, r0
 80037fc:	2800      	cmp	r0, #0
 80037fe:	f040 82a2 	bne.w	8003d46 <HAL_RCC_OscConfig+0x61e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003802:	6823      	ldr	r3, [r4, #0]
 8003804:	f013 0f01 	tst.w	r3, #1
 8003808:	f000 8081 	beq.w	800390e <HAL_RCC_OscConfig+0x1e6>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800380c:	2d08      	cmp	r5, #8
 800380e:	d075      	beq.n	80038fc <HAL_RCC_OscConfig+0x1d4>
 8003810:	2d0c      	cmp	r5, #12
 8003812:	d071      	beq.n	80038f8 <HAL_RCC_OscConfig+0x1d0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003814:	6863      	ldr	r3, [r4, #4]
 8003816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800381a:	f000 8097 	beq.w	800394c <HAL_RCC_OscConfig+0x224>
 800381e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003822:	f000 8099 	beq.w	8003958 <HAL_RCC_OscConfig+0x230>
 8003826:	4b73      	ldr	r3, [pc, #460]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003836:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003838:	6863      	ldr	r3, [r4, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 8099 	beq.w	8003972 <HAL_RCC_OscConfig+0x24a>
        tickstart = HAL_GetTick();
 8003840:	f7ff f8b0 	bl	80029a4 <HAL_GetTick>
 8003844:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003846:	4b6b      	ldr	r3, [pc, #428]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800384e:	d15e      	bne.n	800390e <HAL_RCC_OscConfig+0x1e6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003850:	f7ff f8a8 	bl	80029a4 <HAL_GetTick>
 8003854:	1bc0      	subs	r0, r0, r7
 8003856:	2864      	cmp	r0, #100	; 0x64
 8003858:	d9f5      	bls.n	8003846 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e273      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800385e:	4b65      	ldr	r3, [pc, #404]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 8003860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003864:	091b      	lsrs	r3, r3, #4
 8003866:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800386a:	e79f      	b.n	80037ac <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800386c:	f7ff feba 	bl	80035e4 <RCC_SetFlashLatencyFromMSIRange>
 8003870:	2800      	cmp	r0, #0
 8003872:	f040 8261 	bne.w	8003d38 <HAL_RCC_OscConfig+0x610>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003876:	4b5f      	ldr	r3, [pc, #380]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	f042 0208 	orr.w	r2, r2, #8
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003886:	6a21      	ldr	r1, [r4, #32]
 8003888:	430a      	orrs	r2, r1
 800388a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003892:	69e1      	ldr	r1, [r4, #28]
 8003894:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003898:	605a      	str	r2, [r3, #4]
 800389a:	e79d      	b.n	80037d8 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800389c:	6a20      	ldr	r0, [r4, #32]
 800389e:	f7ff fea1 	bl	80035e4 <RCC_SetFlashLatencyFromMSIRange>
 80038a2:	2800      	cmp	r0, #0
 80038a4:	d098      	beq.n	80037d8 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e24d      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038aa:	4b52      	ldr	r3, [pc, #328]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	f042 0208 	orr.w	r2, r2, #8
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80038ba:	6a21      	ldr	r1, [r4, #32]
 80038bc:	430a      	orrs	r2, r1
 80038be:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80038c6:	69e1      	ldr	r1, [r4, #28]
 80038c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80038cc:	605a      	str	r2, [r3, #4]
 80038ce:	e798      	b.n	8003802 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_MSI_DISABLE();
 80038d0:	4a48      	ldr	r2, [pc, #288]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 80038d2:	6813      	ldr	r3, [r2, #0]
 80038d4:	f023 0301 	bic.w	r3, r3, #1
 80038d8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80038da:	f7ff f863 	bl	80029a4 <HAL_GetTick>
 80038de:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038e0:	4b44      	ldr	r3, [pc, #272]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f013 0f02 	tst.w	r3, #2
 80038e8:	d08b      	beq.n	8003802 <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038ea:	f7ff f85b 	bl	80029a4 <HAL_GetTick>
 80038ee:	1bc0      	subs	r0, r0, r7
 80038f0:	2802      	cmp	r0, #2
 80038f2:	d9f5      	bls.n	80038e0 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e226      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038f8:	2e03      	cmp	r6, #3
 80038fa:	d18b      	bne.n	8003814 <HAL_RCC_OscConfig+0xec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038fc:	4b3d      	ldr	r3, [pc, #244]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003904:	d003      	beq.n	800390e <HAL_RCC_OscConfig+0x1e6>
 8003906:	6863      	ldr	r3, [r4, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 8217 	beq.w	8003d3c <HAL_RCC_OscConfig+0x614>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800390e:	6823      	ldr	r3, [r4, #0]
 8003910:	f013 0f02 	tst.w	r3, #2
 8003914:	d04f      	beq.n	80039b6 <HAL_RCC_OscConfig+0x28e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003916:	2d04      	cmp	r5, #4
 8003918:	d03c      	beq.n	8003994 <HAL_RCC_OscConfig+0x26c>
 800391a:	2d0c      	cmp	r5, #12
 800391c:	d038      	beq.n	8003990 <HAL_RCC_OscConfig+0x268>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800391e:	68e3      	ldr	r3, [r4, #12]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d078      	beq.n	8003a16 <HAL_RCC_OscConfig+0x2ee>
        __HAL_RCC_HSI_ENABLE();
 8003924:	4a33      	ldr	r2, [pc, #204]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 8003926:	6813      	ldr	r3, [r2, #0]
 8003928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800392c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800392e:	f7ff f839 	bl	80029a4 <HAL_GetTick>
 8003932:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003934:	4b2f      	ldr	r3, [pc, #188]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800393c:	d162      	bne.n	8003a04 <HAL_RCC_OscConfig+0x2dc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800393e:	f7ff f831 	bl	80029a4 <HAL_GetTick>
 8003942:	1b80      	subs	r0, r0, r6
 8003944:	2802      	cmp	r0, #2
 8003946:	d9f5      	bls.n	8003934 <HAL_RCC_OscConfig+0x20c>
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e1fc      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800394c:	4a29      	ldr	r2, [pc, #164]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 800394e:	6813      	ldr	r3, [r2, #0]
 8003950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	e76f      	b.n	8003838 <HAL_RCC_OscConfig+0x110>
 8003958:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800395c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	e762      	b.n	8003838 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8003972:	f7ff f817 	bl	80029a4 <HAL_GetTick>
 8003976:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003978:	4b1e      	ldr	r3, [pc, #120]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003980:	d0c5      	beq.n	800390e <HAL_RCC_OscConfig+0x1e6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003982:	f7ff f80f 	bl	80029a4 <HAL_GetTick>
 8003986:	1bc0      	subs	r0, r0, r7
 8003988:	2864      	cmp	r0, #100	; 0x64
 800398a:	d9f5      	bls.n	8003978 <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e1da      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003990:	2e02      	cmp	r6, #2
 8003992:	d1c4      	bne.n	800391e <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003994:	4b17      	ldr	r3, [pc, #92]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800399c:	d003      	beq.n	80039a6 <HAL_RCC_OscConfig+0x27e>
 800399e:	68e3      	ldr	r3, [r4, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 81cd 	beq.w	8003d40 <HAL_RCC_OscConfig+0x618>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a6:	4a13      	ldr	r2, [pc, #76]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 80039a8:	6853      	ldr	r3, [r2, #4]
 80039aa:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80039ae:	6921      	ldr	r1, [r4, #16]
 80039b0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80039b4:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	f013 0f08 	tst.w	r3, #8
 80039bc:	d056      	beq.n	8003a6c <HAL_RCC_OscConfig+0x344>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039be:	6963      	ldr	r3, [r4, #20]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d03c      	beq.n	8003a3e <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_LSI_ENABLE();
 80039c4:	4a0b      	ldr	r2, [pc, #44]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 80039c6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80039ca:	f043 0301 	orr.w	r3, r3, #1
 80039ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80039d2:	f7fe ffe7 	bl	80029a4 <HAL_GetTick>
 80039d6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039d8:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 80039da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039de:	f013 0f02 	tst.w	r3, #2
 80039e2:	d143      	bne.n	8003a6c <HAL_RCC_OscConfig+0x344>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e4:	f7fe ffde 	bl	80029a4 <HAL_GetTick>
 80039e8:	1b80      	subs	r0, r0, r6
 80039ea:	2802      	cmp	r0, #2
 80039ec:	d9f4      	bls.n	80039d8 <HAL_RCC_OscConfig+0x2b0>
          return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e1a9      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
 80039f2:	bf00      	nop
 80039f4:	40021000 	.word	0x40021000
 80039f8:	0800827c 	.word	0x0800827c
 80039fc:	2000003c 	.word	0x2000003c
 8003a00:	20000034 	.word	0x20000034
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a04:	4ab8      	ldr	r2, [pc, #736]	; (8003ce8 <HAL_RCC_OscConfig+0x5c0>)
 8003a06:	6853      	ldr	r3, [r2, #4]
 8003a08:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8003a0c:	6921      	ldr	r1, [r4, #16]
 8003a0e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003a12:	6053      	str	r3, [r2, #4]
 8003a14:	e7cf      	b.n	80039b6 <HAL_RCC_OscConfig+0x28e>
        __HAL_RCC_HSI_DISABLE();
 8003a16:	4ab4      	ldr	r2, [pc, #720]	; (8003ce8 <HAL_RCC_OscConfig+0x5c0>)
 8003a18:	6813      	ldr	r3, [r2, #0]
 8003a1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a1e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003a20:	f7fe ffc0 	bl	80029a4 <HAL_GetTick>
 8003a24:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a26:	4bb0      	ldr	r3, [pc, #704]	; (8003ce8 <HAL_RCC_OscConfig+0x5c0>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003a2e:	d0c2      	beq.n	80039b6 <HAL_RCC_OscConfig+0x28e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a30:	f7fe ffb8 	bl	80029a4 <HAL_GetTick>
 8003a34:	1b80      	subs	r0, r0, r6
 8003a36:	2802      	cmp	r0, #2
 8003a38:	d9f5      	bls.n	8003a26 <HAL_RCC_OscConfig+0x2fe>
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e183      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_LSI_DISABLE();
 8003a3e:	4aaa      	ldr	r2, [pc, #680]	; (8003ce8 <HAL_RCC_OscConfig+0x5c0>)
 8003a40:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003a44:	f023 0301 	bic.w	r3, r3, #1
 8003a48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003a4c:	f7fe ffaa 	bl	80029a4 <HAL_GetTick>
 8003a50:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a52:	4ba5      	ldr	r3, [pc, #660]	; (8003ce8 <HAL_RCC_OscConfig+0x5c0>)
 8003a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a58:	f013 0f02 	tst.w	r3, #2
 8003a5c:	d006      	beq.n	8003a6c <HAL_RCC_OscConfig+0x344>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a5e:	f7fe ffa1 	bl	80029a4 <HAL_GetTick>
 8003a62:	1b80      	subs	r0, r0, r6
 8003a64:	2802      	cmp	r0, #2
 8003a66:	d9f4      	bls.n	8003a52 <HAL_RCC_OscConfig+0x32a>
          return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e16c      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a6c:	6823      	ldr	r3, [r4, #0]
 8003a6e:	f013 0f04 	tst.w	r3, #4
 8003a72:	d07a      	beq.n	8003b6a <HAL_RCC_OscConfig+0x442>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a74:	4b9c      	ldr	r3, [pc, #624]	; (8003ce8 <HAL_RCC_OscConfig+0x5c0>)
 8003a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a78:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003a7c:	d10b      	bne.n	8003a96 <HAL_RCC_OscConfig+0x36e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a7e:	4b9a      	ldr	r3, [pc, #616]	; (8003ce8 <HAL_RCC_OscConfig+0x5c0>)
 8003a80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a82:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a86:	659a      	str	r2, [r3, #88]	; 0x58
 8003a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8e:	9301      	str	r3, [sp, #4]
 8003a90:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003a92:	2601      	movs	r6, #1
 8003a94:	e000      	b.n	8003a98 <HAL_RCC_OscConfig+0x370>
    FlagStatus       pwrclkchanged = RESET;
 8003a96:	2600      	movs	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a98:	4b94      	ldr	r3, [pc, #592]	; (8003cec <HAL_RCC_OscConfig+0x5c4>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003aa0:	d026      	beq.n	8003af0 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa2:	68a3      	ldr	r3, [r4, #8]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d037      	beq.n	8003b18 <HAL_RCC_OscConfig+0x3f0>
 8003aa8:	2b05      	cmp	r3, #5
 8003aaa:	d03d      	beq.n	8003b28 <HAL_RCC_OscConfig+0x400>
 8003aac:	4b8e      	ldr	r3, [pc, #568]	; (8003ce8 <HAL_RCC_OscConfig+0x5c0>)
 8003aae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003ab2:	f022 0201 	bic.w	r2, r2, #1
 8003ab6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003aba:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003abe:	f022 0204 	bic.w	r2, r2, #4
 8003ac2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ac6:	68a3      	ldr	r3, [r4, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d03b      	beq.n	8003b44 <HAL_RCC_OscConfig+0x41c>
      tickstart = HAL_GetTick();
 8003acc:	f7fe ff6a 	bl	80029a4 <HAL_GetTick>
 8003ad0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ad2:	4b85      	ldr	r3, [pc, #532]	; (8003ce8 <HAL_RCC_OscConfig+0x5c0>)
 8003ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad8:	f013 0f02 	tst.w	r3, #2
 8003adc:	d144      	bne.n	8003b68 <HAL_RCC_OscConfig+0x440>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ade:	f7fe ff61 	bl	80029a4 <HAL_GetTick>
 8003ae2:	1bc0      	subs	r0, r0, r7
 8003ae4:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ae8:	4298      	cmp	r0, r3
 8003aea:	d9f2      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x3aa>
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e12a      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003af0:	4a7e      	ldr	r2, [pc, #504]	; (8003cec <HAL_RCC_OscConfig+0x5c4>)
 8003af2:	6813      	ldr	r3, [r2, #0]
 8003af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003afa:	f7fe ff53 	bl	80029a4 <HAL_GetTick>
 8003afe:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b00:	4b7a      	ldr	r3, [pc, #488]	; (8003cec <HAL_RCC_OscConfig+0x5c4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003b08:	d1cb      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x37a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b0a:	f7fe ff4b 	bl	80029a4 <HAL_GetTick>
 8003b0e:	1bc0      	subs	r0, r0, r7
 8003b10:	2802      	cmp	r0, #2
 8003b12:	d9f5      	bls.n	8003b00 <HAL_RCC_OscConfig+0x3d8>
          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e116      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b18:	4a73      	ldr	r2, [pc, #460]	; (8003ce8 <HAL_RCC_OscConfig+0x5c0>)
 8003b1a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b26:	e7ce      	b.n	8003ac6 <HAL_RCC_OscConfig+0x39e>
 8003b28:	4b6f      	ldr	r3, [pc, #444]	; (8003ce8 <HAL_RCC_OscConfig+0x5c0>)
 8003b2a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003b2e:	f042 0204 	orr.w	r2, r2, #4
 8003b32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003b36:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003b42:	e7c0      	b.n	8003ac6 <HAL_RCC_OscConfig+0x39e>
      tickstart = HAL_GetTick();
 8003b44:	f7fe ff2e 	bl	80029a4 <HAL_GetTick>
 8003b48:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b4a:	4b67      	ldr	r3, [pc, #412]	; (8003ce8 <HAL_RCC_OscConfig+0x5c0>)
 8003b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b50:	f013 0f02 	tst.w	r3, #2
 8003b54:	d008      	beq.n	8003b68 <HAL_RCC_OscConfig+0x440>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b56:	f7fe ff25 	bl	80029a4 <HAL_GetTick>
 8003b5a:	1bc0      	subs	r0, r0, r7
 8003b5c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b60:	4298      	cmp	r0, r3
 8003b62:	d9f2      	bls.n	8003b4a <HAL_RCC_OscConfig+0x422>
          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e0ee      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
    if(pwrclkchanged == SET)
 8003b68:	bb6e      	cbnz	r6, 8003bc6 <HAL_RCC_OscConfig+0x49e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 80e9 	beq.w	8003d44 <HAL_RCC_OscConfig+0x61c>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d02d      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x4aa>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b76:	2d0c      	cmp	r5, #12
 8003b78:	f000 80ee 	beq.w	8003d58 <HAL_RCC_OscConfig+0x630>
        __HAL_RCC_PLL_DISABLE();
 8003b7c:	4b5a      	ldr	r3, [pc, #360]	; (8003ce8 <HAL_RCC_OscConfig+0x5c0>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003b84:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
 8003b8c:	d104      	bne.n	8003b98 <HAL_RCC_OscConfig+0x470>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003b8e:	4a56      	ldr	r2, [pc, #344]	; (8003ce8 <HAL_RCC_OscConfig+0x5c0>)
 8003b90:	68d3      	ldr	r3, [r2, #12]
 8003b92:	f023 0303 	bic.w	r3, r3, #3
 8003b96:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b98:	4a53      	ldr	r2, [pc, #332]	; (8003ce8 <HAL_RCC_OscConfig+0x5c0>)
 8003b9a:	68d3      	ldr	r3, [r2, #12]
 8003b9c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003ba0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ba4:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8003ba6:	f7fe fefd 	bl	80029a4 <HAL_GetTick>
 8003baa:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bac:	4b4e      	ldr	r3, [pc, #312]	; (8003ce8 <HAL_RCC_OscConfig+0x5c0>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003bb4:	f000 80b9 	beq.w	8003d2a <HAL_RCC_OscConfig+0x602>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb8:	f7fe fef4 	bl	80029a4 <HAL_GetTick>
 8003bbc:	1b00      	subs	r0, r0, r4
 8003bbe:	2802      	cmp	r0, #2
 8003bc0:	d9f4      	bls.n	8003bac <HAL_RCC_OscConfig+0x484>
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e0bf      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bc6:	4a48      	ldr	r2, [pc, #288]	; (8003ce8 <HAL_RCC_OscConfig+0x5c0>)
 8003bc8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bce:	6593      	str	r3, [r2, #88]	; 0x58
 8003bd0:	e7cb      	b.n	8003b6a <HAL_RCC_OscConfig+0x442>
      pll_config = RCC->PLLCFGR;
 8003bd2:	4b45      	ldr	r3, [pc, #276]	; (8003ce8 <HAL_RCC_OscConfig+0x5c0>)
 8003bd4:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd6:	f003 0103 	and.w	r1, r3, #3
 8003bda:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003bdc:	4291      	cmp	r1, r2
 8003bde:	d00f      	beq.n	8003c00 <HAL_RCC_OscConfig+0x4d8>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003be0:	2d0c      	cmp	r5, #12
 8003be2:	f000 80b3 	beq.w	8003d4c <HAL_RCC_OscConfig+0x624>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003be6:	4b40      	ldr	r3, [pc, #256]	; (8003ce8 <HAL_RCC_OscConfig+0x5c0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8003bee:	f040 80af 	bne.w	8003d50 <HAL_RCC_OscConfig+0x628>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003bf2:	4b3d      	ldr	r3, [pc, #244]	; (8003ce8 <HAL_RCC_OscConfig+0x5c0>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003bfa:	d02d      	beq.n	8003c58 <HAL_RCC_OscConfig+0x530>
            return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0a2      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c00:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c04:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003c06:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c08:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8003c0c:	d1e8      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4b8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c0e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c12:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c14:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003c18:	d1e2      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4b8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c1a:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8003c1e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003c20:	3a07      	subs	r2, #7
 8003c22:	bf18      	it	ne
 8003c24:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c26:	4291      	cmp	r1, r2
 8003c28:	d1da      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4b8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c2a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8003c2e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003c30:	0852      	lsrs	r2, r2, #1
 8003c32:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c34:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8003c38:	d1d2      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4b8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c3a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003c3e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003c40:	0852      	lsrs	r2, r2, #1
 8003c42:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c44:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8003c48:	d1ca      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4b8>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c4a:	4b27      	ldr	r3, [pc, #156]	; (8003ce8 <HAL_RCC_OscConfig+0x5c0>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003c52:	d051      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x5d0>
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
 8003c56:	e076      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
            __HAL_RCC_PLL_DISABLE();
 8003c58:	4a23      	ldr	r2, [pc, #140]	; (8003ce8 <HAL_RCC_OscConfig+0x5c0>)
 8003c5a:	6813      	ldr	r3, [r2, #0]
 8003c5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c60:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8003c62:	f7fe fe9f 	bl	80029a4 <HAL_GetTick>
 8003c66:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c68:	4b1f      	ldr	r3, [pc, #124]	; (8003ce8 <HAL_RCC_OscConfig+0x5c0>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003c70:	d006      	beq.n	8003c80 <HAL_RCC_OscConfig+0x558>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c72:	f7fe fe97 	bl	80029a4 <HAL_GetTick>
 8003c76:	1b40      	subs	r0, r0, r5
 8003c78:	2802      	cmp	r0, #2
 8003c7a:	d9f5      	bls.n	8003c68 <HAL_RCC_OscConfig+0x540>
                return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e062      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c80:	4a19      	ldr	r2, [pc, #100]	; (8003ce8 <HAL_RCC_OscConfig+0x5c0>)
 8003c82:	68d3      	ldr	r3, [r2, #12]
 8003c84:	491a      	ldr	r1, [pc, #104]	; (8003cf0 <HAL_RCC_OscConfig+0x5c8>)
 8003c86:	4019      	ands	r1, r3
 8003c88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c8a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003c8c:	3801      	subs	r0, #1
 8003c8e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8003c92:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003c94:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003c98:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003c9a:	0840      	lsrs	r0, r0, #1
 8003c9c:	3801      	subs	r0, #1
 8003c9e:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8003ca2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003ca4:	0840      	lsrs	r0, r0, #1
 8003ca6:	3801      	subs	r0, #1
 8003ca8:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8003cac:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003cae:	0900      	lsrs	r0, r0, #4
 8003cb0:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8003cb8:	6813      	ldr	r3, [r2, #0]
 8003cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cbe:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cc0:	68d3      	ldr	r3, [r2, #12]
 8003cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cc6:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8003cc8:	f7fe fe6c 	bl	80029a4 <HAL_GetTick>
 8003ccc:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cce:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <HAL_RCC_OscConfig+0x5c0>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003cd6:	d10d      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x5cc>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd8:	f7fe fe64 	bl	80029a4 <HAL_GetTick>
 8003cdc:	1b00      	subs	r0, r0, r4
 8003cde:	2802      	cmp	r0, #2
 8003ce0:	d9f5      	bls.n	8003cce <HAL_RCC_OscConfig+0x5a6>
                return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e02f      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
 8003ce6:	bf00      	nop
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	40007000 	.word	0x40007000
 8003cf0:	f99d808c 	.word	0xf99d808c
  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	e026      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
          __HAL_RCC_PLL_ENABLE();
 8003cf8:	4b18      	ldr	r3, [pc, #96]	; (8003d5c <HAL_RCC_OscConfig+0x634>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003d00:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003d08:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8003d0a:	f7fe fe4b 	bl	80029a4 <HAL_GetTick>
 8003d0e:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d10:	e004      	b.n	8003d1c <HAL_RCC_OscConfig+0x5f4>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d12:	f7fe fe47 	bl	80029a4 <HAL_GetTick>
 8003d16:	1b00      	subs	r0, r0, r4
 8003d18:	2802      	cmp	r0, #2
 8003d1a:	d81b      	bhi.n	8003d54 <HAL_RCC_OscConfig+0x62c>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d1c:	4b0f      	ldr	r3, [pc, #60]	; (8003d5c <HAL_RCC_OscConfig+0x634>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003d24:	d0f5      	beq.n	8003d12 <HAL_RCC_OscConfig+0x5ea>
  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	e00d      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	e00b      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	4770      	bx	lr
        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e006      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
            return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e004      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
        return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e002      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e000      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	b003      	add	sp, #12
 8003d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e7fa      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
            return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e7f8      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
              return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e7f6      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
        return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e7f4      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
 8003d5c:	40021000 	.word	0x40021000

08003d60 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003d60:	2800      	cmp	r0, #0
 8003d62:	f000 809b 	beq.w	8003e9c <HAL_RCC_ClockConfig+0x13c>
{
 8003d66:	b570      	push	{r4, r5, r6, lr}
 8003d68:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d6a:	4b4e      	ldr	r3, [pc, #312]	; (8003ea4 <HAL_RCC_ClockConfig+0x144>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	428b      	cmp	r3, r1
 8003d74:	d20c      	bcs.n	8003d90 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d76:	4a4b      	ldr	r2, [pc, #300]	; (8003ea4 <HAL_RCC_ClockConfig+0x144>)
 8003d78:	6813      	ldr	r3, [r2, #0]
 8003d7a:	f023 0307 	bic.w	r3, r3, #7
 8003d7e:	430b      	orrs	r3, r1
 8003d80:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d82:	6813      	ldr	r3, [r2, #0]
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	428b      	cmp	r3, r1
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8003d8c:	2001      	movs	r0, #1
}
 8003d8e:	bd70      	pop	{r4, r5, r6, pc}
 8003d90:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d92:	6823      	ldr	r3, [r4, #0]
 8003d94:	f013 0f01 	tst.w	r3, #1
 8003d98:	d039      	beq.n	8003e0e <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d9a:	6863      	ldr	r3, [r4, #4]
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d009      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x54>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d026      	beq.n	8003df2 <HAL_RCC_ClockConfig+0x92>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003da4:	bb63      	cbnz	r3, 8003e00 <HAL_RCC_ClockConfig+0xa0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003da6:	4a40      	ldr	r2, [pc, #256]	; (8003ea8 <HAL_RCC_ClockConfig+0x148>)
 8003da8:	6812      	ldr	r2, [r2, #0]
 8003daa:	f012 0f02 	tst.w	r2, #2
 8003dae:	d106      	bne.n	8003dbe <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8003db0:	2001      	movs	r0, #1
 8003db2:	e7ec      	b.n	8003d8e <HAL_RCC_ClockConfig+0x2e>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003db4:	4a3c      	ldr	r2, [pc, #240]	; (8003ea8 <HAL_RCC_ClockConfig+0x148>)
 8003db6:	6812      	ldr	r2, [r2, #0]
 8003db8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003dbc:	d070      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003dbe:	493a      	ldr	r1, [pc, #232]	; (8003ea8 <HAL_RCC_ClockConfig+0x148>)
 8003dc0:	688a      	ldr	r2, [r1, #8]
 8003dc2:	f022 0203 	bic.w	r2, r2, #3
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003dca:	f7fe fdeb 	bl	80029a4 <HAL_GetTick>
 8003dce:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd0:	4b35      	ldr	r3, [pc, #212]	; (8003ea8 <HAL_RCC_ClockConfig+0x148>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 030c 	and.w	r3, r3, #12
 8003dd8:	6862      	ldr	r2, [r4, #4]
 8003dda:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003dde:	d016      	beq.n	8003e0e <HAL_RCC_ClockConfig+0xae>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de0:	f7fe fde0 	bl	80029a4 <HAL_GetTick>
 8003de4:	1b80      	subs	r0, r0, r6
 8003de6:	f241 3388 	movw	r3, #5000	; 0x1388
 8003dea:	4298      	cmp	r0, r3
 8003dec:	d9f0      	bls.n	8003dd0 <HAL_RCC_ClockConfig+0x70>
        return HAL_TIMEOUT;
 8003dee:	2003      	movs	r0, #3
 8003df0:	e7cd      	b.n	8003d8e <HAL_RCC_ClockConfig+0x2e>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003df2:	4a2d      	ldr	r2, [pc, #180]	; (8003ea8 <HAL_RCC_ClockConfig+0x148>)
 8003df4:	6812      	ldr	r2, [r2, #0]
 8003df6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003dfa:	d1e0      	bne.n	8003dbe <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8003dfc:	2001      	movs	r0, #1
 8003dfe:	e7c6      	b.n	8003d8e <HAL_RCC_ClockConfig+0x2e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e00:	4a29      	ldr	r2, [pc, #164]	; (8003ea8 <HAL_RCC_ClockConfig+0x148>)
 8003e02:	6812      	ldr	r2, [r2, #0]
 8003e04:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003e08:	d1d9      	bne.n	8003dbe <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8003e0a:	2001      	movs	r0, #1
 8003e0c:	e7bf      	b.n	8003d8e <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	f013 0f02 	tst.w	r3, #2
 8003e14:	d006      	beq.n	8003e24 <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e16:	4a24      	ldr	r2, [pc, #144]	; (8003ea8 <HAL_RCC_ClockConfig+0x148>)
 8003e18:	6893      	ldr	r3, [r2, #8]
 8003e1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e1e:	68a1      	ldr	r1, [r4, #8]
 8003e20:	430b      	orrs	r3, r1
 8003e22:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e24:	4b1f      	ldr	r3, [pc, #124]	; (8003ea4 <HAL_RCC_ClockConfig+0x144>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	42ab      	cmp	r3, r5
 8003e2e:	d90c      	bls.n	8003e4a <HAL_RCC_ClockConfig+0xea>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e30:	4a1c      	ldr	r2, [pc, #112]	; (8003ea4 <HAL_RCC_ClockConfig+0x144>)
 8003e32:	6813      	ldr	r3, [r2, #0]
 8003e34:	f023 0307 	bic.w	r3, r3, #7
 8003e38:	432b      	orrs	r3, r5
 8003e3a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3c:	6813      	ldr	r3, [r2, #0]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	42ab      	cmp	r3, r5
 8003e44:	d001      	beq.n	8003e4a <HAL_RCC_ClockConfig+0xea>
      return HAL_ERROR;
 8003e46:	2001      	movs	r0, #1
 8003e48:	e7a1      	b.n	8003d8e <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e4a:	6823      	ldr	r3, [r4, #0]
 8003e4c:	f013 0f04 	tst.w	r3, #4
 8003e50:	d006      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e52:	4a15      	ldr	r2, [pc, #84]	; (8003ea8 <HAL_RCC_ClockConfig+0x148>)
 8003e54:	6893      	ldr	r3, [r2, #8]
 8003e56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e5a:	68e1      	ldr	r1, [r4, #12]
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	f013 0f08 	tst.w	r3, #8
 8003e66:	d007      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x118>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e68:	4a0f      	ldr	r2, [pc, #60]	; (8003ea8 <HAL_RCC_ClockConfig+0x148>)
 8003e6a:	6893      	ldr	r3, [r2, #8]
 8003e6c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003e70:	6921      	ldr	r1, [r4, #16]
 8003e72:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003e76:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e78:	f7ff fbfc 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 8003e7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <HAL_RCC_ClockConfig+0x148>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003e84:	4a09      	ldr	r2, [pc, #36]	; (8003eac <HAL_RCC_ClockConfig+0x14c>)
 8003e86:	5cd3      	ldrb	r3, [r2, r3]
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	40d8      	lsrs	r0, r3
 8003e8e:	4b08      	ldr	r3, [pc, #32]	; (8003eb0 <HAL_RCC_ClockConfig+0x150>)
 8003e90:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8003e92:	4b08      	ldr	r3, [pc, #32]	; (8003eb4 <HAL_RCC_ClockConfig+0x154>)
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	f002 fdbc 	bl	8006a12 <HAL_InitTick>
  return status;
 8003e9a:	e778      	b.n	8003d8e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003e9c:	2001      	movs	r0, #1
}
 8003e9e:	4770      	bx	lr
        return HAL_ERROR;
 8003ea0:	2001      	movs	r0, #1
 8003ea2:	e774      	b.n	8003d8e <HAL_RCC_ClockConfig+0x2e>
 8003ea4:	40022000 	.word	0x40022000
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	0800827c 	.word	0x0800827c
 8003eb0:	2000003c 	.word	0x2000003c
 8003eb4:	20000034 	.word	0x20000034

08003eb8 <HAL_RCC_GetHCLKFreq>:
}
 8003eb8:	4b01      	ldr	r3, [pc, #4]	; (8003ec0 <HAL_RCC_GetHCLKFreq+0x8>)
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	2000003c 	.word	0x2000003c

08003ec4 <HAL_RCC_GetPCLK1Freq>:
{
 8003ec4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ec6:	f7ff fff7 	bl	8003eb8 <HAL_RCC_GetHCLKFreq>
 8003eca:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003ed2:	4a04      	ldr	r2, [pc, #16]	; (8003ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ed4:	5cd3      	ldrb	r3, [r2, r3]
 8003ed6:	f003 031f 	and.w	r3, r3, #31
}
 8003eda:	40d8      	lsrs	r0, r3
 8003edc:	bd08      	pop	{r3, pc}
 8003ede:	bf00      	nop
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	0800828c 	.word	0x0800828c

08003ee8 <HAL_RCC_GetPCLK2Freq>:
{
 8003ee8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003eea:	f7ff ffe5 	bl	8003eb8 <HAL_RCC_GetHCLKFreq>
 8003eee:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003ef6:	4a04      	ldr	r2, [pc, #16]	; (8003f08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ef8:	5cd3      	ldrb	r3, [r2, r3]
 8003efa:	f003 031f 	and.w	r3, r3, #31
}
 8003efe:	40d8      	lsrs	r0, r3
 8003f00:	bd08      	pop	{r3, pc}
 8003f02:	bf00      	nop
 8003f04:	40021000 	.word	0x40021000
 8003f08:	0800828c 	.word	0x0800828c

08003f0c <HAL_RCC_GetOscConfig>:
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI | \
 8003f0c:	231f      	movs	r3, #31
 8003f0e:	6003      	str	r3, [r0, #0]
  if(READ_BIT(RCC->CR, RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8003f10:	4b43      	ldr	r3, [pc, #268]	; (8004020 <HAL_RCC_GetOscConfig+0x114>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003f18:	d05a      	beq.n	8003fd0 <HAL_RCC_GetOscConfig+0xc4>
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8003f1a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003f1e:	6043      	str	r3, [r0, #4]
  if(READ_BIT(RCC->CR, RCC_CR_MSION) == RCC_CR_MSION)
 8003f20:	4b3f      	ldr	r3, [pc, #252]	; (8004020 <HAL_RCC_GetOscConfig+0x114>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f013 0f01 	tst.w	r3, #1
 8003f28:	d05e      	beq.n	8003fe8 <HAL_RCC_GetOscConfig+0xdc>
    RCC_OscInitStruct->MSIState = RCC_MSI_ON;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	6183      	str	r3, [r0, #24]
  RCC_OscInitStruct->MSICalibrationValue = READ_BIT(RCC->ICSCR, RCC_ICSCR_MSITRIM) >> RCC_ICSCR_MSITRIM_Pos;
 8003f2e:	4b3c      	ldr	r3, [pc, #240]	; (8004020 <HAL_RCC_GetOscConfig+0x114>)
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003f36:	61c2      	str	r2, [r0, #28]
  RCC_OscInitStruct->MSIClockRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003f3e:	6202      	str	r2, [r0, #32]
  if(READ_BIT(RCC->CR, RCC_CR_HSION) == RCC_CR_HSION)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003f46:	d052      	beq.n	8003fee <HAL_RCC_GetOscConfig+0xe2>
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8003f48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f4c:	60c3      	str	r3, [r0, #12]
  RCC_OscInitStruct->HSICalibrationValue = READ_BIT(RCC->ICSCR, RCC_ICSCR_HSITRIM) >> RCC_ICSCR_HSITRIM_Pos;
 8003f4e:	4a34      	ldr	r2, [pc, #208]	; (8004020 <HAL_RCC_GetOscConfig+0x114>)
 8003f50:	6853      	ldr	r3, [r2, #4]
 8003f52:	f3c3 6304 	ubfx	r3, r3, #24, #5
 8003f56:	6103      	str	r3, [r0, #16]
  if(READ_BIT(RCC->BDCR, RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8003f58:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003f5c:	f013 0f04 	tst.w	r3, #4
 8003f60:	d048      	beq.n	8003ff4 <HAL_RCC_GetOscConfig+0xe8>
      RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8003f62:	2305      	movs	r3, #5
 8003f64:	6083      	str	r3, [r0, #8]
  if(READ_BIT(RCC->CSR, RCC_CSR_LSION) == RCC_CSR_LSION)
 8003f66:	4b2e      	ldr	r3, [pc, #184]	; (8004020 <HAL_RCC_GetOscConfig+0x114>)
 8003f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f6c:	f013 0f01 	tst.w	r3, #1
 8003f70:	d04c      	beq.n	800400c <HAL_RCC_GetOscConfig+0x100>
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8003f72:	2301      	movs	r3, #1
 8003f74:	6143      	str	r3, [r0, #20]
  RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
 8003f76:	2300      	movs	r3, #0
 8003f78:	6243      	str	r3, [r0, #36]	; 0x24
  if(READ_BIT(RCC->CR, RCC_CR_PLLON) == RCC_CR_PLLON)
 8003f7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f7e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003f88:	d043      	beq.n	8004012 <HAL_RCC_GetOscConfig+0x106>
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	6283      	str	r3, [r0, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLSource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f8e:	4a24      	ldr	r2, [pc, #144]	; (8004020 <HAL_RCC_GetOscConfig+0x114>)
 8003f90:	68d3      	ldr	r3, [r2, #12]
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	62c3      	str	r3, [r0, #44]	; 0x2c
  RCC_OscInitStruct->PLL.PLLM = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8003f98:	68d3      	ldr	r3, [r2, #12]
 8003f9a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	6303      	str	r3, [r0, #48]	; 0x30
  RCC_OscInitStruct->PLL.PLLN = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003fa2:	68d3      	ldr	r3, [r2, #12]
 8003fa4:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8003fa8:	6343      	str	r3, [r0, #52]	; 0x34
  RCC_OscInitStruct->PLL.PLLQ = (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8003faa:	68d3      	ldr	r3, [r2, #12]
 8003fac:	f3c3 5341 	ubfx	r3, r3, #21, #2
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	63c3      	str	r3, [r0, #60]	; 0x3c
  RCC_OscInitStruct->PLL.PLLR = (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) << 1U);
 8003fb6:	68d3      	ldr	r3, [r2, #12]
 8003fb8:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	6403      	str	r3, [r0, #64]	; 0x40
  if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003fc2:	68d3      	ldr	r3, [r2, #12]
 8003fc4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003fc8:	d126      	bne.n	8004018 <HAL_RCC_GetOscConfig+0x10c>
    RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV7;
 8003fca:	2307      	movs	r3, #7
 8003fcc:	6383      	str	r3, [r0, #56]	; 0x38
}
 8003fce:	4770      	bx	lr
  else if(READ_BIT(RCC->CR, RCC_CR_HSEON) == RCC_CR_HSEON)
 8003fd0:	4b13      	ldr	r3, [pc, #76]	; (8004020 <HAL_RCC_GetOscConfig+0x114>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003fd8:	d003      	beq.n	8003fe2 <HAL_RCC_GetOscConfig+0xd6>
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8003fda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fde:	6043      	str	r3, [r0, #4]
 8003fe0:	e79e      	b.n	8003f20 <HAL_RCC_GetOscConfig+0x14>
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	6043      	str	r3, [r0, #4]
 8003fe6:	e79b      	b.n	8003f20 <HAL_RCC_GetOscConfig+0x14>
    RCC_OscInitStruct->MSIState = RCC_MSI_OFF;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	6183      	str	r3, [r0, #24]
 8003fec:	e79f      	b.n	8003f2e <HAL_RCC_GetOscConfig+0x22>
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60c3      	str	r3, [r0, #12]
 8003ff2:	e7ac      	b.n	8003f4e <HAL_RCC_GetOscConfig+0x42>
  else if(READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8003ff4:	4b0a      	ldr	r3, [pc, #40]	; (8004020 <HAL_RCC_GetOscConfig+0x114>)
 8003ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffa:	f013 0f01 	tst.w	r3, #1
 8003ffe:	d002      	beq.n	8004006 <HAL_RCC_GetOscConfig+0xfa>
      RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8004000:	2301      	movs	r3, #1
 8004002:	6083      	str	r3, [r0, #8]
 8004004:	e7af      	b.n	8003f66 <HAL_RCC_GetOscConfig+0x5a>
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8004006:	2300      	movs	r3, #0
 8004008:	6083      	str	r3, [r0, #8]
 800400a:	e7ac      	b.n	8003f66 <HAL_RCC_GetOscConfig+0x5a>
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 800400c:	2300      	movs	r3, #0
 800400e:	6143      	str	r3, [r0, #20]
 8004010:	e7b1      	b.n	8003f76 <HAL_RCC_GetOscConfig+0x6a>
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8004012:	2301      	movs	r3, #1
 8004014:	6283      	str	r3, [r0, #40]	; 0x28
 8004016:	e7ba      	b.n	8003f8e <HAL_RCC_GetOscConfig+0x82>
    RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV17;
 8004018:	2311      	movs	r3, #17
 800401a:	6383      	str	r3, [r0, #56]	; 0x38
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40021000 	.word	0x40021000

08004024 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004024:	230f      	movs	r3, #15
 8004026:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004028:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <HAL_RCC_GetClockConfig+0x34>)
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	f002 0203 	and.w	r2, r2, #3
 8004030:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004038:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004040:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	08db      	lsrs	r3, r3, #3
 8004046:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800404a:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800404c:	4b03      	ldr	r3, [pc, #12]	; (800405c <HAL_RCC_GetClockConfig+0x38>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	600b      	str	r3, [r1, #0]
}
 8004056:	4770      	bx	lr
 8004058:	40021000 	.word	0x40021000
 800405c:	40022000 	.word	0x40022000

08004060 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004062:	4b5a      	ldr	r3, [pc, #360]	; (80041cc <RCCEx_PLLSAI1_Config+0x16c>)
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f013 0f03 	tst.w	r3, #3
 800406a:	d018      	beq.n	800409e <RCCEx_PLLSAI1_Config+0x3e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800406c:	4b57      	ldr	r3, [pc, #348]	; (80041cc <RCCEx_PLLSAI1_Config+0x16c>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f003 0303 	and.w	r3, r3, #3
 8004074:	6802      	ldr	r2, [r0, #0]
 8004076:	4293      	cmp	r3, r2
 8004078:	d002      	beq.n	8004080 <RCCEx_PLLSAI1_Config+0x20>
 800407a:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 800407c:	4628      	mov	r0, r5
 800407e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8004080:	2a00      	cmp	r2, #0
 8004082:	f000 80a0 	beq.w	80041c6 <RCCEx_PLLSAI1_Config+0x166>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004086:	4b51      	ldr	r3, [pc, #324]	; (80041cc <RCCEx_PLLSAI1_Config+0x16c>)
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800408e:	3301      	adds	r3, #1
 8004090:	6842      	ldr	r2, [r0, #4]
       ||
 8004092:	4293      	cmp	r3, r2
 8004094:	d001      	beq.n	800409a <RCCEx_PLLSAI1_Config+0x3a>
 8004096:	2501      	movs	r5, #1
 8004098:	e7f0      	b.n	800407c <RCCEx_PLLSAI1_Config+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 800409a:	2500      	movs	r5, #0
 800409c:	e01a      	b.n	80040d4 <RCCEx_PLLSAI1_Config+0x74>
    switch(PllSai1->PLLSAI1Source)
 800409e:	6803      	ldr	r3, [r0, #0]
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d059      	beq.n	8004158 <RCCEx_PLLSAI1_Config+0xf8>
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d05e      	beq.n	8004166 <RCCEx_PLLSAI1_Config+0x106>
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d001      	beq.n	80040b0 <RCCEx_PLLSAI1_Config+0x50>
      status = HAL_ERROR;
 80040ac:	2501      	movs	r5, #1
 80040ae:	e00f      	b.n	80040d0 <RCCEx_PLLSAI1_Config+0x70>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040b0:	4a46      	ldr	r2, [pc, #280]	; (80041cc <RCCEx_PLLSAI1_Config+0x16c>)
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	f012 0f02 	tst.w	r2, #2
 80040b8:	d061      	beq.n	800417e <RCCEx_PLLSAI1_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040ba:	4d44      	ldr	r5, [pc, #272]	; (80041cc <RCCEx_PLLSAI1_Config+0x16c>)
 80040bc:	68ea      	ldr	r2, [r5, #12]
 80040be:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80040c2:	6844      	ldr	r4, [r0, #4]
 80040c4:	3c01      	subs	r4, #1
 80040c6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60eb      	str	r3, [r5, #12]
 80040ce:	2500      	movs	r5, #0
  if(status == HAL_OK)
 80040d0:	2d00      	cmp	r5, #0
 80040d2:	d1d3      	bne.n	800407c <RCCEx_PLLSAI1_Config+0x1c>
 80040d4:	460f      	mov	r7, r1
 80040d6:	4604      	mov	r4, r0
    __HAL_RCC_PLLSAI1_DISABLE();
 80040d8:	4a3c      	ldr	r2, [pc, #240]	; (80041cc <RCCEx_PLLSAI1_Config+0x16c>)
 80040da:	6813      	ldr	r3, [r2, #0]
 80040dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040e0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80040e2:	f7fe fc5f 	bl	80029a4 <HAL_GetTick>
 80040e6:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040e8:	4b38      	ldr	r3, [pc, #224]	; (80041cc <RCCEx_PLLSAI1_Config+0x16c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80040f0:	d005      	beq.n	80040fe <RCCEx_PLLSAI1_Config+0x9e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040f2:	f7fe fc57 	bl	80029a4 <HAL_GetTick>
 80040f6:	1b80      	subs	r0, r0, r6
 80040f8:	2802      	cmp	r0, #2
 80040fa:	d9f5      	bls.n	80040e8 <RCCEx_PLLSAI1_Config+0x88>
        status = HAL_TIMEOUT;
 80040fc:	2503      	movs	r5, #3
    if(status == HAL_OK)
 80040fe:	2d00      	cmp	r5, #0
 8004100:	d1bc      	bne.n	800407c <RCCEx_PLLSAI1_Config+0x1c>
      if(Divider == DIVIDER_P_UPDATE)
 8004102:	2f00      	cmp	r7, #0
 8004104:	d13d      	bne.n	8004182 <RCCEx_PLLSAI1_Config+0x122>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004106:	4931      	ldr	r1, [pc, #196]	; (80041cc <RCCEx_PLLSAI1_Config+0x16c>)
 8004108:	690b      	ldr	r3, [r1, #16]
 800410a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800410e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004112:	68a0      	ldr	r0, [r4, #8]
 8004114:	68e2      	ldr	r2, [r4, #12]
 8004116:	0912      	lsrs	r2, r2, #4
 8004118:	0452      	lsls	r2, r2, #17
 800411a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800411e:	4313      	orrs	r3, r2
 8004120:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8004122:	4a2a      	ldr	r2, [pc, #168]	; (80041cc <RCCEx_PLLSAI1_Config+0x16c>)
 8004124:	6813      	ldr	r3, [r2, #0]
 8004126:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800412a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800412c:	f7fe fc3a 	bl	80029a4 <HAL_GetTick>
 8004130:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004132:	4b26      	ldr	r3, [pc, #152]	; (80041cc <RCCEx_PLLSAI1_Config+0x16c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800413a:	d105      	bne.n	8004148 <RCCEx_PLLSAI1_Config+0xe8>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800413c:	f7fe fc32 	bl	80029a4 <HAL_GetTick>
 8004140:	1b80      	subs	r0, r0, r6
 8004142:	2802      	cmp	r0, #2
 8004144:	d9f5      	bls.n	8004132 <RCCEx_PLLSAI1_Config+0xd2>
          status = HAL_TIMEOUT;
 8004146:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8004148:	2d00      	cmp	r5, #0
 800414a:	d197      	bne.n	800407c <RCCEx_PLLSAI1_Config+0x1c>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800414c:	4a1f      	ldr	r2, [pc, #124]	; (80041cc <RCCEx_PLLSAI1_Config+0x16c>)
 800414e:	6913      	ldr	r3, [r2, #16]
 8004150:	69a1      	ldr	r1, [r4, #24]
 8004152:	430b      	orrs	r3, r1
 8004154:	6113      	str	r3, [r2, #16]
 8004156:	e791      	b.n	800407c <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004158:	4a1c      	ldr	r2, [pc, #112]	; (80041cc <RCCEx_PLLSAI1_Config+0x16c>)
 800415a:	6812      	ldr	r2, [r2, #0]
 800415c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004160:	d1ab      	bne.n	80040ba <RCCEx_PLLSAI1_Config+0x5a>
        status = HAL_ERROR;
 8004162:	2501      	movs	r5, #1
 8004164:	e7b4      	b.n	80040d0 <RCCEx_PLLSAI1_Config+0x70>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004166:	4a19      	ldr	r2, [pc, #100]	; (80041cc <RCCEx_PLLSAI1_Config+0x16c>)
 8004168:	6812      	ldr	r2, [r2, #0]
 800416a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800416e:	d1a4      	bne.n	80040ba <RCCEx_PLLSAI1_Config+0x5a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004170:	4a16      	ldr	r2, [pc, #88]	; (80041cc <RCCEx_PLLSAI1_Config+0x16c>)
 8004172:	6812      	ldr	r2, [r2, #0]
 8004174:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8004178:	d19f      	bne.n	80040ba <RCCEx_PLLSAI1_Config+0x5a>
          status = HAL_ERROR;
 800417a:	2501      	movs	r5, #1
 800417c:	e7a8      	b.n	80040d0 <RCCEx_PLLSAI1_Config+0x70>
        status = HAL_ERROR;
 800417e:	2501      	movs	r5, #1
 8004180:	e7a6      	b.n	80040d0 <RCCEx_PLLSAI1_Config+0x70>
      else if(Divider == DIVIDER_Q_UPDATE)
 8004182:	2f01      	cmp	r7, #1
 8004184:	d00f      	beq.n	80041a6 <RCCEx_PLLSAI1_Config+0x146>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004186:	4811      	ldr	r0, [pc, #68]	; (80041cc <RCCEx_PLLSAI1_Config+0x16c>)
 8004188:	6902      	ldr	r2, [r0, #16]
 800418a:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800418e:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8004192:	68a1      	ldr	r1, [r4, #8]
 8004194:	6963      	ldr	r3, [r4, #20]
 8004196:	085b      	lsrs	r3, r3, #1
 8004198:	3b01      	subs	r3, #1
 800419a:	065b      	lsls	r3, r3, #25
 800419c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80041a0:	4313      	orrs	r3, r2
 80041a2:	6103      	str	r3, [r0, #16]
 80041a4:	e7bd      	b.n	8004122 <RCCEx_PLLSAI1_Config+0xc2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041a6:	4809      	ldr	r0, [pc, #36]	; (80041cc <RCCEx_PLLSAI1_Config+0x16c>)
 80041a8:	6902      	ldr	r2, [r0, #16]
 80041aa:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80041ae:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80041b2:	68a1      	ldr	r1, [r4, #8]
 80041b4:	6923      	ldr	r3, [r4, #16]
 80041b6:	085b      	lsrs	r3, r3, #1
 80041b8:	3b01      	subs	r3, #1
 80041ba:	055b      	lsls	r3, r3, #21
 80041bc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80041c0:	4313      	orrs	r3, r2
 80041c2:	6103      	str	r3, [r0, #16]
 80041c4:	e7ad      	b.n	8004122 <RCCEx_PLLSAI1_Config+0xc2>
 80041c6:	2501      	movs	r5, #1
 80041c8:	e758      	b.n	800407c <RCCEx_PLLSAI1_Config+0x1c>
 80041ca:	bf00      	nop
 80041cc:	40021000 	.word	0x40021000

080041d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80041d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041d2:	4b51      	ldr	r3, [pc, #324]	; (8004318 <RCCEx_PLLSAI2_Config+0x148>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f013 0f03 	tst.w	r3, #3
 80041da:	d018      	beq.n	800420e <RCCEx_PLLSAI2_Config+0x3e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80041dc:	4b4e      	ldr	r3, [pc, #312]	; (8004318 <RCCEx_PLLSAI2_Config+0x148>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f003 0303 	and.w	r3, r3, #3
 80041e4:	6802      	ldr	r2, [r0, #0]
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d002      	beq.n	80041f0 <RCCEx_PLLSAI2_Config+0x20>
 80041ea:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 80041ec:	4628      	mov	r0, r5
 80041ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80041f0:	2a00      	cmp	r2, #0
 80041f2:	f000 808e 	beq.w	8004312 <RCCEx_PLLSAI2_Config+0x142>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80041f6:	4b48      	ldr	r3, [pc, #288]	; (8004318 <RCCEx_PLLSAI2_Config+0x148>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80041fe:	3301      	adds	r3, #1
 8004200:	6842      	ldr	r2, [r0, #4]
       ||
 8004202:	4293      	cmp	r3, r2
 8004204:	d001      	beq.n	800420a <RCCEx_PLLSAI2_Config+0x3a>
 8004206:	2501      	movs	r5, #1
 8004208:	e7f0      	b.n	80041ec <RCCEx_PLLSAI2_Config+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 800420a:	2500      	movs	r5, #0
 800420c:	e01a      	b.n	8004244 <RCCEx_PLLSAI2_Config+0x74>
    switch(PllSai2->PLLSAI2Source)
 800420e:	6803      	ldr	r3, [r0, #0]
 8004210:	2b02      	cmp	r3, #2
 8004212:	d059      	beq.n	80042c8 <RCCEx_PLLSAI2_Config+0xf8>
 8004214:	2b03      	cmp	r3, #3
 8004216:	d05e      	beq.n	80042d6 <RCCEx_PLLSAI2_Config+0x106>
 8004218:	2b01      	cmp	r3, #1
 800421a:	d001      	beq.n	8004220 <RCCEx_PLLSAI2_Config+0x50>
      status = HAL_ERROR;
 800421c:	2501      	movs	r5, #1
 800421e:	e00f      	b.n	8004240 <RCCEx_PLLSAI2_Config+0x70>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004220:	4a3d      	ldr	r2, [pc, #244]	; (8004318 <RCCEx_PLLSAI2_Config+0x148>)
 8004222:	6812      	ldr	r2, [r2, #0]
 8004224:	f012 0f02 	tst.w	r2, #2
 8004228:	d061      	beq.n	80042ee <RCCEx_PLLSAI2_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800422a:	4d3b      	ldr	r5, [pc, #236]	; (8004318 <RCCEx_PLLSAI2_Config+0x148>)
 800422c:	68ea      	ldr	r2, [r5, #12]
 800422e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8004232:	6844      	ldr	r4, [r0, #4]
 8004234:	3c01      	subs	r4, #1
 8004236:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800423a:	4313      	orrs	r3, r2
 800423c:	60eb      	str	r3, [r5, #12]
 800423e:	2500      	movs	r5, #0
  if(status == HAL_OK)
 8004240:	2d00      	cmp	r5, #0
 8004242:	d1d3      	bne.n	80041ec <RCCEx_PLLSAI2_Config+0x1c>
 8004244:	460f      	mov	r7, r1
 8004246:	4604      	mov	r4, r0
    __HAL_RCC_PLLSAI2_DISABLE();
 8004248:	4a33      	ldr	r2, [pc, #204]	; (8004318 <RCCEx_PLLSAI2_Config+0x148>)
 800424a:	6813      	ldr	r3, [r2, #0]
 800424c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004250:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004252:	f7fe fba7 	bl	80029a4 <HAL_GetTick>
 8004256:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004258:	4b2f      	ldr	r3, [pc, #188]	; (8004318 <RCCEx_PLLSAI2_Config+0x148>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004260:	d005      	beq.n	800426e <RCCEx_PLLSAI2_Config+0x9e>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004262:	f7fe fb9f 	bl	80029a4 <HAL_GetTick>
 8004266:	1b80      	subs	r0, r0, r6
 8004268:	2802      	cmp	r0, #2
 800426a:	d9f5      	bls.n	8004258 <RCCEx_PLLSAI2_Config+0x88>
        status = HAL_TIMEOUT;
 800426c:	2503      	movs	r5, #3
    if(status == HAL_OK)
 800426e:	2d00      	cmp	r5, #0
 8004270:	d1bc      	bne.n	80041ec <RCCEx_PLLSAI2_Config+0x1c>
      if(Divider == DIVIDER_P_UPDATE)
 8004272:	2f00      	cmp	r7, #0
 8004274:	d13d      	bne.n	80042f2 <RCCEx_PLLSAI2_Config+0x122>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004276:	4928      	ldr	r1, [pc, #160]	; (8004318 <RCCEx_PLLSAI2_Config+0x148>)
 8004278:	694b      	ldr	r3, [r1, #20]
 800427a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800427e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004282:	68a0      	ldr	r0, [r4, #8]
 8004284:	68e2      	ldr	r2, [r4, #12]
 8004286:	0912      	lsrs	r2, r2, #4
 8004288:	0452      	lsls	r2, r2, #17
 800428a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800428e:	4313      	orrs	r3, r2
 8004290:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8004292:	4a21      	ldr	r2, [pc, #132]	; (8004318 <RCCEx_PLLSAI2_Config+0x148>)
 8004294:	6813      	ldr	r3, [r2, #0]
 8004296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800429a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800429c:	f7fe fb82 	bl	80029a4 <HAL_GetTick>
 80042a0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042a2:	4b1d      	ldr	r3, [pc, #116]	; (8004318 <RCCEx_PLLSAI2_Config+0x148>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80042aa:	d105      	bne.n	80042b8 <RCCEx_PLLSAI2_Config+0xe8>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042ac:	f7fe fb7a 	bl	80029a4 <HAL_GetTick>
 80042b0:	1b80      	subs	r0, r0, r6
 80042b2:	2802      	cmp	r0, #2
 80042b4:	d9f5      	bls.n	80042a2 <RCCEx_PLLSAI2_Config+0xd2>
          status = HAL_TIMEOUT;
 80042b6:	2503      	movs	r5, #3
      if(status == HAL_OK)
 80042b8:	2d00      	cmp	r5, #0
 80042ba:	d197      	bne.n	80041ec <RCCEx_PLLSAI2_Config+0x1c>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042bc:	4a16      	ldr	r2, [pc, #88]	; (8004318 <RCCEx_PLLSAI2_Config+0x148>)
 80042be:	6953      	ldr	r3, [r2, #20]
 80042c0:	6961      	ldr	r1, [r4, #20]
 80042c2:	430b      	orrs	r3, r1
 80042c4:	6153      	str	r3, [r2, #20]
 80042c6:	e791      	b.n	80041ec <RCCEx_PLLSAI2_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042c8:	4a13      	ldr	r2, [pc, #76]	; (8004318 <RCCEx_PLLSAI2_Config+0x148>)
 80042ca:	6812      	ldr	r2, [r2, #0]
 80042cc:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80042d0:	d1ab      	bne.n	800422a <RCCEx_PLLSAI2_Config+0x5a>
        status = HAL_ERROR;
 80042d2:	2501      	movs	r5, #1
 80042d4:	e7b4      	b.n	8004240 <RCCEx_PLLSAI2_Config+0x70>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042d6:	4a10      	ldr	r2, [pc, #64]	; (8004318 <RCCEx_PLLSAI2_Config+0x148>)
 80042d8:	6812      	ldr	r2, [r2, #0]
 80042da:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80042de:	d1a4      	bne.n	800422a <RCCEx_PLLSAI2_Config+0x5a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042e0:	4a0d      	ldr	r2, [pc, #52]	; (8004318 <RCCEx_PLLSAI2_Config+0x148>)
 80042e2:	6812      	ldr	r2, [r2, #0]
 80042e4:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80042e8:	d19f      	bne.n	800422a <RCCEx_PLLSAI2_Config+0x5a>
          status = HAL_ERROR;
 80042ea:	2501      	movs	r5, #1
 80042ec:	e7a8      	b.n	8004240 <RCCEx_PLLSAI2_Config+0x70>
        status = HAL_ERROR;
 80042ee:	2501      	movs	r5, #1
 80042f0:	e7a6      	b.n	8004240 <RCCEx_PLLSAI2_Config+0x70>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042f2:	4809      	ldr	r0, [pc, #36]	; (8004318 <RCCEx_PLLSAI2_Config+0x148>)
 80042f4:	6942      	ldr	r2, [r0, #20]
 80042f6:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80042fa:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80042fe:	68a1      	ldr	r1, [r4, #8]
 8004300:	6923      	ldr	r3, [r4, #16]
 8004302:	085b      	lsrs	r3, r3, #1
 8004304:	3b01      	subs	r3, #1
 8004306:	065b      	lsls	r3, r3, #25
 8004308:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800430c:	4313      	orrs	r3, r2
 800430e:	6143      	str	r3, [r0, #20]
 8004310:	e7bf      	b.n	8004292 <RCCEx_PLLSAI2_Config+0xc2>
 8004312:	2501      	movs	r5, #1
 8004314:	e76a      	b.n	80041ec <RCCEx_PLLSAI2_Config+0x1c>
 8004316:	bf00      	nop
 8004318:	40021000 	.word	0x40021000

0800431c <HAL_RCCEx_PeriphCLKConfig>:
{
 800431c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004320:	b082      	sub	sp, #8
 8004322:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004324:	6803      	ldr	r3, [r0, #0]
 8004326:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800432a:	d02f      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 800432c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800432e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004332:	d025      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004334:	d908      	bls.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x2c>
 8004336:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800433a:	d010      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x42>
 800433c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004340:	f040 8099 	bne.w	8004476 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004344:	2600      	movs	r6, #0
 8004346:	e010      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004348:	2b00      	cmp	r3, #0
 800434a:	f040 8094 	bne.w	8004476 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800434e:	2100      	movs	r1, #0
 8004350:	3004      	adds	r0, #4
 8004352:	f7ff fe85 	bl	8004060 <RCCEx_PLLSAI1_Config>
 8004356:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004358:	b13e      	cbz	r6, 800436a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800435a:	4637      	mov	r7, r6
 800435c:	e018      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x74>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800435e:	4a5e      	ldr	r2, [pc, #376]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004360:	68d3      	ldr	r3, [r2, #12]
 8004362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004366:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004368:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800436a:	4a5b      	ldr	r2, [pc, #364]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800436c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004370:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004374:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004376:	430b      	orrs	r3, r1
 8004378:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800437c:	2700      	movs	r7, #0
 800437e:	e007      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x74>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004380:	2100      	movs	r1, #0
 8004382:	3020      	adds	r0, #32
 8004384:	f7ff ff24 	bl	80041d0 <RCCEx_PLLSAI2_Config>
 8004388:	4606      	mov	r6, r0
      break;
 800438a:	e7e5      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x3c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800438c:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800438e:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004390:	6823      	ldr	r3, [r4, #0]
 8004392:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004396:	d015      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004398:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800439a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800439e:	d07a      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80043a0:	d96c      	bls.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80043a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043a6:	d070      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80043a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043ac:	d17a      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
    if(ret == HAL_OK)
 80043ae:	2e00      	cmp	r6, #0
 80043b0:	d17b      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043b2:	4a49      	ldr	r2, [pc, #292]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043b4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80043b8:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80043bc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80043be:	430b      	orrs	r3, r1
 80043c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043c4:	6823      	ldr	r3, [r4, #0]
 80043c6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80043ca:	f000 808e 	beq.w	80044ea <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043ce:	4b42      	ldr	r3, [pc, #264]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80043d6:	d16a      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x192>
      __HAL_RCC_PWR_CLK_ENABLE();
 80043d8:	4b3f      	ldr	r3, [pc, #252]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80043dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80043e0:	659a      	str	r2, [r3, #88]	; 0x58
 80043e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e8:	9301      	str	r3, [sp, #4]
 80043ea:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80043ec:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043f0:	4a3a      	ldr	r2, [pc, #232]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043f2:	6813      	ldr	r3, [r2, #0]
 80043f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80043fa:	f7fe fad3 	bl	80029a4 <HAL_GetTick>
 80043fe:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004400:	4b36      	ldr	r3, [pc, #216]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004408:	d105      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800440a:	f7fe facb 	bl	80029a4 <HAL_GetTick>
 800440e:	1b40      	subs	r0, r0, r5
 8004410:	2802      	cmp	r0, #2
 8004412:	d9f5      	bls.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xe4>
        ret = HAL_TIMEOUT;
 8004414:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 8004416:	2e00      	cmp	r6, #0
 8004418:	d162      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800441a:	4b2f      	ldr	r3, [pc, #188]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800441c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004420:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004424:	d016      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8004426:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800442a:	429a      	cmp	r2, r3
 800442c:	d012      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x138>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800442e:	4a2a      	ldr	r2, [pc, #168]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004430:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8004438:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800443c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004440:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004444:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8004448:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800444c:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8004450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004454:	f013 0f01 	tst.w	r3, #1
 8004458:	d12c      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      if(ret == HAL_OK)
 800445a:	2e00      	cmp	r6, #0
 800445c:	f040 8143 	bne.w	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004460:	4a1d      	ldr	r2, [pc, #116]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004462:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800446a:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800446e:	430b      	orrs	r3, r1
 8004470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004474:	e035      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
      ret = HAL_ERROR;
 8004476:	2701      	movs	r7, #1
 8004478:	463e      	mov	r6, r7
 800447a:	e789      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch(PeriphClkInit->Sai2ClockSelection)
 800447c:	b993      	cbnz	r3, 80044a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800447e:	2100      	movs	r1, #0
 8004480:	1d20      	adds	r0, r4, #4
 8004482:	f7ff fded 	bl	8004060 <RCCEx_PLLSAI1_Config>
 8004486:	4606      	mov	r6, r0
      break;
 8004488:	e791      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x92>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800448a:	4a13      	ldr	r2, [pc, #76]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800448c:	68d3      	ldr	r3, [r2, #12]
 800448e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004492:	60d3      	str	r3, [r2, #12]
      break;
 8004494:	e78b      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004496:	2100      	movs	r1, #0
 8004498:	f104 0020 	add.w	r0, r4, #32
 800449c:	f7ff fe98 	bl	80041d0 <RCCEx_PLLSAI2_Config>
 80044a0:	4606      	mov	r6, r0
      break;
 80044a2:	e784      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = HAL_ERROR;
 80044a4:	2701      	movs	r7, #1
 80044a6:	463e      	mov	r6, r7
 80044a8:	e78c      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
 80044aa:	4637      	mov	r7, r6
 80044ac:	e78a      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    FlagStatus       pwrclkchanged = RESET;
 80044ae:	f04f 0800 	mov.w	r8, #0
 80044b2:	e79d      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        tickstart = HAL_GetTick();
 80044b4:	f7fe fa76 	bl	80029a4 <HAL_GetTick>
 80044b8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ba:	4b07      	ldr	r3, [pc, #28]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c0:	f013 0f02 	tst.w	r3, #2
 80044c4:	d1c9      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044c6:	f7fe fa6d 	bl	80029a4 <HAL_GetTick>
 80044ca:	1b40      	subs	r0, r0, r5
 80044cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80044d0:	4298      	cmp	r0, r3
 80044d2:	d9f2      	bls.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
            ret = HAL_TIMEOUT;
 80044d4:	2603      	movs	r6, #3
 80044d6:	e7c0      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80044d8:	40021000 	.word	0x40021000
 80044dc:	40007000 	.word	0x40007000
      status = ret;
 80044e0:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 80044e2:	f1b8 0f00 	cmp.w	r8, #0
 80044e6:	f040 8100 	bne.w	80046ea <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044ea:	6823      	ldr	r3, [r4, #0]
 80044ec:	f013 0f01 	tst.w	r3, #1
 80044f0:	d008      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044f2:	4a9d      	ldr	r2, [pc, #628]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80044f4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80044f8:	f023 0303 	bic.w	r3, r3, #3
 80044fc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80044fe:	430b      	orrs	r3, r1
 8004500:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	f013 0f02 	tst.w	r3, #2
 800450a:	d008      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x202>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800450c:	4a96      	ldr	r2, [pc, #600]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800450e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004512:	f023 030c 	bic.w	r3, r3, #12
 8004516:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004518:	430b      	orrs	r3, r1
 800451a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	f013 0f04 	tst.w	r3, #4
 8004524:	d008      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004526:	4a90      	ldr	r2, [pc, #576]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8004528:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800452c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004530:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004532:	430b      	orrs	r3, r1
 8004534:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	f013 0f08 	tst.w	r3, #8
 800453e:	d008      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004540:	4a89      	ldr	r2, [pc, #548]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8004542:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004546:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800454a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800454c:	430b      	orrs	r3, r1
 800454e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004552:	6823      	ldr	r3, [r4, #0]
 8004554:	f013 0f10 	tst.w	r3, #16
 8004558:	d008      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x250>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800455a:	4a83      	ldr	r2, [pc, #524]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800455c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004564:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004566:	430b      	orrs	r3, r1
 8004568:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800456c:	6823      	ldr	r3, [r4, #0]
 800456e:	f013 0f20 	tst.w	r3, #32
 8004572:	d008      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x26a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004574:	4a7c      	ldr	r2, [pc, #496]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8004576:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800457a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800457e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004580:	430b      	orrs	r3, r1
 8004582:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	f413 7f00 	tst.w	r3, #512	; 0x200
 800458c:	d008      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800458e:	4a76      	ldr	r2, [pc, #472]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8004590:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004594:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8004598:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800459a:	430b      	orrs	r3, r1
 800459c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80045a6:	d008      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x29e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045a8:	4a6f      	ldr	r2, [pc, #444]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80045aa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80045ae:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80045b2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80045b4:	430b      	orrs	r3, r1
 80045b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80045c0:	d008      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045c2:	4a69      	ldr	r2, [pc, #420]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80045c4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80045c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80045cc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80045ce:	430b      	orrs	r3, r1
 80045d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045d4:	6823      	ldr	r3, [r4, #0]
 80045d6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80045da:	d008      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045dc:	4a62      	ldr	r2, [pc, #392]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80045de:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80045e2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80045e6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80045e8:	430b      	orrs	r3, r1
 80045ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045ee:	6823      	ldr	r3, [r4, #0]
 80045f0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80045f4:	d008      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045f6:	4a5c      	ldr	r2, [pc, #368]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80045f8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80045fc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004600:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004602:	430b      	orrs	r3, r1
 8004604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004608:	6823      	ldr	r3, [r4, #0]
 800460a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800460e:	d00f      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004610:	4a55      	ldr	r2, [pc, #340]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8004612:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004616:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800461a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800461c:	430b      	orrs	r3, r1
 800461e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004622:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004624:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004628:	d065      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800462a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800462e:	d067      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004636:	d00f      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004638:	4a4b      	ldr	r2, [pc, #300]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800463a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800463e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004642:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004644:	430b      	orrs	r3, r1
 8004646:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800464a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800464c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004650:	d05e      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004652:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004656:	d060      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004658:	6823      	ldr	r3, [r4, #0]
 800465a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800465e:	d00f      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x364>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004660:	4a41      	ldr	r2, [pc, #260]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8004662:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004666:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800466a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800466c:	430b      	orrs	r3, r1
 800466e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004672:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004678:	d057      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800467a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800467e:	d059      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x418>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004686:	d00f      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004688:	4a37      	ldr	r2, [pc, #220]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800468a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800468e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004692:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004694:	430b      	orrs	r3, r1
 8004696:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800469a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800469c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046a0:	d050      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x428>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80046a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046a6:	d055      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x438>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046a8:	6823      	ldr	r3, [r4, #0]
 80046aa:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80046ae:	d008      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046b0:	4a2d      	ldr	r2, [pc, #180]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80046b2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80046b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046ba:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80046bc:	430b      	orrs	r3, r1
 80046be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80046c8:	d009      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046ca:	4a27      	ldr	r2, [pc, #156]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80046cc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80046d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046d4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80046d8:	430b      	orrs	r3, r1
 80046da:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80046de:	4638      	mov	r0, r7
 80046e0:	b002      	add	sp, #8
 80046e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 80046e6:	4637      	mov	r7, r6
 80046e8:	e6fb      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ea:	4a1f      	ldr	r2, [pc, #124]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80046ec:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80046ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046f2:	6593      	str	r3, [r2, #88]	; 0x58
 80046f4:	e6f9      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046f6:	68d3      	ldr	r3, [r2, #12]
 80046f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046fc:	60d3      	str	r3, [r2, #12]
 80046fe:	e797      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x314>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004700:	2101      	movs	r1, #1
 8004702:	1d20      	adds	r0, r4, #4
 8004704:	f7ff fcac 	bl	8004060 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8004708:	2800      	cmp	r0, #0
 800470a:	d091      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x314>
          status = ret;
 800470c:	4607      	mov	r7, r0
 800470e:	e78f      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x314>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004710:	68d3      	ldr	r3, [r2, #12]
 8004712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004716:	60d3      	str	r3, [r2, #12]
 8004718:	e79e      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800471a:	2101      	movs	r1, #1
 800471c:	1d20      	adds	r0, r4, #4
 800471e:	f7ff fc9f 	bl	8004060 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004722:	2800      	cmp	r0, #0
 8004724:	d098      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x33c>
        status = ret;
 8004726:	4607      	mov	r7, r0
 8004728:	e796      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800472a:	68d3      	ldr	r3, [r2, #12]
 800472c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004730:	60d3      	str	r3, [r2, #12]
 8004732:	e7a5      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x364>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004734:	2101      	movs	r1, #1
 8004736:	1d20      	adds	r0, r4, #4
 8004738:	f7ff fc92 	bl	8004060 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800473c:	2800      	cmp	r0, #0
 800473e:	d09f      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x364>
        status = ret;
 8004740:	4607      	mov	r7, r0
 8004742:	e79d      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x364>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004744:	2102      	movs	r1, #2
 8004746:	1d20      	adds	r0, r4, #4
 8004748:	f7ff fc8a 	bl	8004060 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800474c:	2800      	cmp	r0, #0
 800474e:	d0ab      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
        status = ret;
 8004750:	4607      	mov	r7, r0
 8004752:	e7a9      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004754:	2102      	movs	r1, #2
 8004756:	f104 0020 	add.w	r0, r4, #32
 800475a:	f7ff fd39 	bl	80041d0 <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 800475e:	2800      	cmp	r0, #0
 8004760:	d0a2      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
        status = ret;
 8004762:	4607      	mov	r7, r0
 8004764:	e7a0      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8004766:	bf00      	nop
 8004768:	40021000 	.word	0x40021000

0800476c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800476c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800476e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d05d      	beq.n	8004832 <HAL_RTC_DeactivateAlarm+0xc6>
 8004776:	4604      	mov	r4, r0
 8004778:	2301      	movs	r3, #1
 800477a:	f880 3020 	strb.w	r3, [r0, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800477e:	2302      	movs	r3, #2
 8004780:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004784:	6803      	ldr	r3, [r0, #0]
 8004786:	22ca      	movs	r2, #202	; 0xca
 8004788:	625a      	str	r2, [r3, #36]	; 0x24
 800478a:	6803      	ldr	r3, [r0, #0]
 800478c:	2253      	movs	r2, #83	; 0x53
 800478e:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8004790:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004794:	d021      	beq.n	80047da <HAL_RTC_DeactivateAlarm+0x6e>
#endif
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004796:	6802      	ldr	r2, [r0, #0]
 8004798:	6893      	ldr	r3, [r2, #8]
 800479a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800479e:	6093      	str	r3, [r2, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80047a0:	6802      	ldr	r2, [r0, #0]
 80047a2:	6893      	ldr	r3, [r2, #8]
 80047a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047a8:	6093      	str	r3, [r2, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 80047aa:	f7fe f8fb 	bl	80029a4 <HAL_GetTick>
 80047ae:	4605      	mov	r5, r0
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f013 0f02 	tst.w	r3, #2
 80047b8:	d131      	bne.n	800481e <HAL_RTC_DeactivateAlarm+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80047ba:	f7fe f8f3 	bl	80029a4 <HAL_GetTick>
 80047be:	1b40      	subs	r0, r0, r5
 80047c0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80047c4:	d9f4      	bls.n	80047b0 <HAL_RTC_DeactivateAlarm+0x44>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	22ff      	movs	r2, #255	; 0xff
 80047ca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80047cc:	2003      	movs	r0, #3
 80047ce:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80047d2:	2300      	movs	r3, #0
 80047d4:	f884 3020 	strb.w	r3, [r4, #32]

        return HAL_TIMEOUT;
 80047d8:	e02a      	b.n	8004830 <HAL_RTC_DeactivateAlarm+0xc4>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80047da:	6802      	ldr	r2, [r0, #0]
 80047dc:	6893      	ldr	r3, [r2, #8]
 80047de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047e2:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80047e4:	6802      	ldr	r2, [r0, #0]
 80047e6:	6893      	ldr	r3, [r2, #8]
 80047e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047ec:	6093      	str	r3, [r2, #8]
    uint32_t tickstart = HAL_GetTick();
 80047ee:	f7fe f8d9 	bl	80029a4 <HAL_GetTick>
 80047f2:	4605      	mov	r5, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f013 0f01 	tst.w	r3, #1
 80047fc:	d10f      	bne.n	800481e <HAL_RTC_DeactivateAlarm+0xb2>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80047fe:	f7fe f8d1 	bl	80029a4 <HAL_GetTick>
 8004802:	1b40      	subs	r0, r0, r5
 8004804:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004808:	d9f4      	bls.n	80047f4 <HAL_RTC_DeactivateAlarm+0x88>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	22ff      	movs	r2, #255	; 0xff
 800480e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004810:	2003      	movs	r0, #3
 8004812:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8004816:	2300      	movs	r3, #0
 8004818:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_TIMEOUT;
 800481c:	e008      	b.n	8004830 <HAL_RTC_DeactivateAlarm+0xc4>
      }
    }
#endif
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	22ff      	movs	r2, #255	; 0xff
 8004822:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004824:	2301      	movs	r3, #1
 8004826:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800482a:	2000      	movs	r0, #0
 800482c:	f884 0020 	strb.w	r0, [r4, #32]

  return HAL_OK;
}
 8004830:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hrtc);
 8004832:	2002      	movs	r0, #2
 8004834:	e7fc      	b.n	8004830 <HAL_RTC_DeactivateAlarm+0xc4>

08004836 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004836:	b538      	push	{r3, r4, r5, lr}
 8004838:	4604      	mov	r4, r0

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800483a:	6802      	ldr	r2, [r0, #0]
 800483c:	68d3      	ldr	r3, [r2, #12]
 800483e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004842:	60d3      	str	r3, [r2, #12]
#endif

  tickstart = HAL_GetTick();
 8004844:	f7fe f8ae 	bl	80029a4 <HAL_GetTick>
 8004848:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f013 0f20 	tst.w	r3, #32
 8004852:	d107      	bne.n	8004864 <HAL_RTC_WaitForSynchro+0x2e>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004854:	f7fe f8a6 	bl	80029a4 <HAL_GetTick>
 8004858:	1b40      	subs	r0, r0, r5
 800485a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800485e:	d9f4      	bls.n	800484a <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8004860:	2003      	movs	r0, #3
 8004862:	e000      	b.n	8004866 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8004864:	2000      	movs	r0, #0
}
 8004866:	bd38      	pop	{r3, r4, r5, pc}

08004868 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004868:	b570      	push	{r4, r5, r6, lr}
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800486a:	6803      	ldr	r3, [r0, #0]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004872:	d002      	beq.n	800487a <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8004874:	2500      	movs	r5, #0
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return status;
}
 8004876:	4628      	mov	r0, r5
 8004878:	bd70      	pop	{r4, r5, r6, pc}
 800487a:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800487c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004880:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8004882:	f7fe f88f 	bl	80029a4 <HAL_GetTick>
 8004886:	4606      	mov	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 8004888:	2500      	movs	r5, #0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004892:	d1f0      	bne.n	8004876 <RTC_EnterInitMode+0xe>
 8004894:	2d03      	cmp	r5, #3
 8004896:	d0ee      	beq.n	8004876 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004898:	f7fe f884 	bl	80029a4 <HAL_GetTick>
 800489c:	1b80      	subs	r0, r0, r6
 800489e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80048a2:	d9f2      	bls.n	800488a <RTC_EnterInitMode+0x22>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80048a4:	2503      	movs	r5, #3
 80048a6:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 80048aa:	e7ee      	b.n	800488a <RTC_EnterInitMode+0x22>

080048ac <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80048ac:	b510      	push	{r4, lr}
 80048ae:	4604      	mov	r4, r0
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80048b0:	4b11      	ldr	r3, [pc, #68]	; (80048f8 <RTC_ExitInitMode+0x4c>)
 80048b2:	68da      	ldr	r2, [r3, #12]
 80048b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048b8:	60da      	str	r2, [r3, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f013 0f20 	tst.w	r3, #32
 80048c0:	d107      	bne.n	80048d2 <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048c2:	f7ff ffb8 	bl	8004836 <HAL_RTC_WaitForSynchro>
 80048c6:	4603      	mov	r3, r0
 80048c8:	b1a0      	cbz	r0, 80048f4 <RTC_ExitInitMode+0x48>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 80048d0:	e010      	b.n	80048f4 <RTC_ExitInitMode+0x48>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80048d2:	4a09      	ldr	r2, [pc, #36]	; (80048f8 <RTC_ExitInitMode+0x4c>)
 80048d4:	6893      	ldr	r3, [r2, #8]
 80048d6:	f023 0320 	bic.w	r3, r3, #32
 80048da:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048dc:	f7ff ffab 	bl	8004836 <HAL_RTC_WaitForSynchro>
 80048e0:	4603      	mov	r3, r0
 80048e2:	b110      	cbz	r0, 80048ea <RTC_ExitInitMode+0x3e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80048ea:	4903      	ldr	r1, [pc, #12]	; (80048f8 <RTC_ExitInitMode+0x4c>)
 80048ec:	688a      	ldr	r2, [r1, #8]
 80048ee:	f042 0220 	orr.w	r2, r2, #32
 80048f2:	608a      	str	r2, [r1, #8]
  }

  return status;
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	bd10      	pop	{r4, pc}
 80048f8:	40002800 	.word	0x40002800

080048fc <HAL_RTC_Init>:
{
 80048fc:	b538      	push	{r3, r4, r5, lr}
  if (hrtc != NULL)
 80048fe:	2800      	cmp	r0, #0
 8004900:	d04a      	beq.n	8004998 <HAL_RTC_Init+0x9c>
 8004902:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004904:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8004908:	b17b      	cbz	r3, 800492a <HAL_RTC_Init+0x2e>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800490a:	2302      	movs	r3, #2
 800490c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	22ca      	movs	r2, #202	; 0xca
 8004914:	625a      	str	r2, [r3, #36]	; 0x24
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	2253      	movs	r2, #83	; 0x53
 800491a:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 800491c:	4620      	mov	r0, r4
 800491e:	f7ff ffa3 	bl	8004868 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8004922:	4603      	mov	r3, r0
 8004924:	b130      	cbz	r0, 8004934 <HAL_RTC_Init+0x38>
}
 8004926:	4618      	mov	r0, r3
 8004928:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 800492a:	f880 3020 	strb.w	r3, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 800492e:	f002 f893 	bl	8006a58 <HAL_RTC_MspInit>
 8004932:	e7ea      	b.n	800490a <HAL_RTC_Init+0xe>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004934:	6822      	ldr	r2, [r4, #0]
 8004936:	6893      	ldr	r3, [r2, #8]
 8004938:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800493c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004940:	6093      	str	r3, [r2, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004942:	6821      	ldr	r1, [r4, #0]
 8004944:	688a      	ldr	r2, [r1, #8]
 8004946:	6863      	ldr	r3, [r4, #4]
 8004948:	6920      	ldr	r0, [r4, #16]
 800494a:	4303      	orrs	r3, r0
 800494c:	69a0      	ldr	r0, [r4, #24]
 800494e:	4303      	orrs	r3, r0
 8004950:	4313      	orrs	r3, r2
 8004952:	608b      	str	r3, [r1, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	68e2      	ldr	r2, [r4, #12]
 8004958:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800495a:	6822      	ldr	r2, [r4, #0]
 800495c:	6913      	ldr	r3, [r2, #16]
 800495e:	68a1      	ldr	r1, [r4, #8]
 8004960:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004964:	6113      	str	r3, [r2, #16]
      status = RTC_ExitInitMode(hrtc);
 8004966:	4620      	mov	r0, r4
 8004968:	f7ff ffa0 	bl	80048ac <RTC_ExitInitMode>
      if (status == HAL_OK)
 800496c:	4603      	mov	r3, r0
 800496e:	2800      	cmp	r0, #0
 8004970:	d1d9      	bne.n	8004926 <HAL_RTC_Init+0x2a>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004972:	6821      	ldr	r1, [r4, #0]
 8004974:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004976:	f022 0203 	bic.w	r2, r2, #3
 800497a:	64ca      	str	r2, [r1, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800497c:	6820      	ldr	r0, [r4, #0]
 800497e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8004980:	69e1      	ldr	r1, [r4, #28]
 8004982:	6965      	ldr	r5, [r4, #20]
 8004984:	4329      	orrs	r1, r5
 8004986:	430a      	orrs	r2, r1
 8004988:	64c2      	str	r2, [r0, #76]	; 0x4c
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800498a:	6822      	ldr	r2, [r4, #0]
 800498c:	21ff      	movs	r1, #255	; 0xff
 800498e:	6251      	str	r1, [r2, #36]	; 0x24
          hrtc->State = HAL_RTC_STATE_READY;
 8004990:	2201      	movs	r2, #1
 8004992:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
 8004996:	e7c6      	b.n	8004926 <HAL_RTC_Init+0x2a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e7c4      	b.n	8004926 <HAL_RTC_Init+0x2a>

0800499c <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800499c:	2300      	movs	r3, #0
  uint8_t temp = Value;

  while (temp >= 10U)
 800499e:	e002      	b.n	80049a6 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 80049a0:	3301      	adds	r3, #1
    temp -= 10U;
 80049a2:	380a      	subs	r0, #10
 80049a4:	b2c0      	uxtb	r0, r0
  while (temp >= 10U)
 80049a6:	2809      	cmp	r0, #9
 80049a8:	d8fa      	bhi.n	80049a0 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	b2db      	uxtb	r3, r3
}
 80049ae:	4318      	orrs	r0, r3
 80049b0:	4770      	bx	lr

080049b2 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 80049b2:	f890 3020 	ldrb.w	r3, [r0, #32]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d061      	beq.n	8004a7e <HAL_RTC_SetTime+0xcc>
{
 80049ba:	b570      	push	{r4, r5, r6, lr}
 80049bc:	4616      	mov	r6, r2
 80049be:	460d      	mov	r5, r1
 80049c0:	4604      	mov	r4, r0
  __HAL_LOCK(hrtc);
 80049c2:	2301      	movs	r3, #1
 80049c4:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80049c8:	2302      	movs	r3, #2
 80049ca:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049ce:	6803      	ldr	r3, [r0, #0]
 80049d0:	22ca      	movs	r2, #202	; 0xca
 80049d2:	625a      	str	r2, [r3, #36]	; 0x24
 80049d4:	6803      	ldr	r3, [r0, #0]
 80049d6:	2253      	movs	r2, #83	; 0x53
 80049d8:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 80049da:	f7ff ff45 	bl	8004868 <RTC_EnterInitMode>
  if (status == HAL_OK)
 80049de:	4603      	mov	r3, r0
 80049e0:	2800      	cmp	r0, #0
 80049e2:	d12e      	bne.n	8004a42 <HAL_RTC_SetTime+0x90>
    if (Format == RTC_FORMAT_BIN)
 80049e4:	2e00      	cmp	r6, #0
 80049e6:	d138      	bne.n	8004a5a <HAL_RTC_SetTime+0xa8>
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 80049f0:	d101      	bne.n	80049f6 <HAL_RTC_SetTime+0x44>
        sTime->TimeFormat = 0x00U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	70eb      	strb	r3, [r5, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80049f6:	7828      	ldrb	r0, [r5, #0]
 80049f8:	f7ff ffd0 	bl	800499c <RTC_ByteToBcd2>
 80049fc:	0406      	lsls	r6, r0, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80049fe:	7868      	ldrb	r0, [r5, #1]
 8004a00:	f7ff ffcc 	bl	800499c <RTC_ByteToBcd2>
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a04:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004a08:	78a8      	ldrb	r0, [r5, #2]
 8004a0a:	f7ff ffc7 	bl	800499c <RTC_ByteToBcd2>
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a0e:	4330      	orrs	r0, r6
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004a10:	78eb      	ldrb	r3, [r5, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a12:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	f000 307f 	and.w	r0, r0, #2139062143	; 0x7f7f7f7f
 8004a1c:	f020 40fe 	bic.w	r0, r0, #2130706432	; 0x7f000000
 8004a20:	6018      	str	r0, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004a22:	6822      	ldr	r2, [r4, #0]
 8004a24:	6893      	ldr	r3, [r2, #8]
 8004a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a2a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004a2c:	6821      	ldr	r1, [r4, #0]
 8004a2e:	688b      	ldr	r3, [r1, #8]
 8004a30:	68ea      	ldr	r2, [r5, #12]
 8004a32:	6928      	ldr	r0, [r5, #16]
 8004a34:	4302      	orrs	r2, r0
 8004a36:	4313      	orrs	r3, r2
 8004a38:	608b      	str	r3, [r1, #8]
    status = RTC_ExitInitMode(hrtc);
 8004a3a:	4620      	mov	r0, r4
 8004a3c:	f7ff ff36 	bl	80048ac <RTC_ExitInitMode>
 8004a40:	4603      	mov	r3, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a42:	6822      	ldr	r2, [r4, #0]
 8004a44:	21ff      	movs	r1, #255	; 0xff
 8004a46:	6251      	str	r1, [r2, #36]	; 0x24
  if (status == HAL_OK)
 8004a48:	b913      	cbnz	r3, 8004a50 <HAL_RTC_SetTime+0x9e>
    hrtc->State = HAL_RTC_STATE_READY;
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 8004a50:	2200      	movs	r2, #0
 8004a52:	f884 2020 	strb.w	r2, [r4, #32]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	bd70      	pop	{r4, r5, r6, pc}
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a5a:	6823      	ldr	r3, [r4, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004a62:	d101      	bne.n	8004a68 <HAL_RTC_SetTime+0xb6>
        sTime->TimeFormat = 0x00U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	70eb      	strb	r3, [r5, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a68:	782b      	ldrb	r3, [r5, #0]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a6a:	7868      	ldrb	r0, [r5, #1]
 8004a6c:	0200      	lsls	r0, r0, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004a72:	78ab      	ldrb	r3, [r5, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a74:	4318      	orrs	r0, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004a76:	78eb      	ldrb	r3, [r5, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a78:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 8004a7c:	e7cb      	b.n	8004a16 <HAL_RTC_SetTime+0x64>
  __HAL_LOCK(hrtc);
 8004a7e:	2302      	movs	r3, #2
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	4770      	bx	lr

08004a84 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 8004a84:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d04f      	beq.n	8004b2c <HAL_RTC_SetDate+0xa8>
{
 8004a8c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hrtc);
 8004a8e:	2301      	movs	r3, #1
 8004a90:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a94:	2302      	movs	r3, #2
 8004a96:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004a9a:	b93a      	cbnz	r2, 8004aac <HAL_RTC_SetDate+0x28>
 8004a9c:	784b      	ldrb	r3, [r1, #1]
 8004a9e:	f013 0f10 	tst.w	r3, #16
 8004aa2:	d003      	beq.n	8004aac <HAL_RTC_SetDate+0x28>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004aa4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8004aa8:	330a      	adds	r3, #10
 8004aaa:	704b      	strb	r3, [r1, #1]
 8004aac:	460e      	mov	r6, r1
 8004aae:	4604      	mov	r4, r0
  if (Format == RTC_FORMAT_BIN)
 8004ab0:	bb32      	cbnz	r2, 8004b00 <HAL_RTC_SetDate+0x7c>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004ab2:	78c8      	ldrb	r0, [r1, #3]
 8004ab4:	f7ff ff72 	bl	800499c <RTC_ByteToBcd2>
 8004ab8:	0405      	lsls	r5, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004aba:	7870      	ldrb	r0, [r6, #1]
 8004abc:	f7ff ff6e 	bl	800499c <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004ac0:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004ac4:	78b0      	ldrb	r0, [r6, #2]
 8004ac6:	f7ff ff69 	bl	800499c <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004aca:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004acc:	7830      	ldrb	r0, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004ace:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	22ca      	movs	r2, #202	; 0xca
 8004ad6:	625a      	str	r2, [r3, #36]	; 0x24
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	2253      	movs	r2, #83	; 0x53
 8004adc:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8004ade:	4620      	mov	r0, r4
 8004ae0:	f7ff fec2 	bl	8004868 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	b1b0      	cbz	r0, 8004b16 <HAL_RTC_SetDate+0x92>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ae8:	6822      	ldr	r2, [r4, #0]
 8004aea:	21ff      	movs	r1, #255	; 0xff
 8004aec:	6251      	str	r1, [r2, #36]	; 0x24
  if (status == HAL_OK)
 8004aee:	b913      	cbnz	r3, 8004af6 <HAL_RTC_SetDate+0x72>
    hrtc->State = HAL_RTC_STATE_READY ;
 8004af0:	2201      	movs	r2, #1
 8004af2:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 8004af6:	2200      	movs	r2, #0
 8004af8:	f884 2020 	strb.w	r2, [r4, #32]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004b00:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004b02:	784d      	ldrb	r5, [r1, #1]
 8004b04:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004b06:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004b0a:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004b0c:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004b0e:	7808      	ldrb	r0, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004b10:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
 8004b14:	e7dd      	b.n	8004ad2 <HAL_RTC_SetDate+0x4e>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8004b1c:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8004b20:	605d      	str	r5, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 8004b22:	4620      	mov	r0, r4
 8004b24:	f7ff fec2 	bl	80048ac <RTC_ExitInitMode>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	e7dd      	b.n	8004ae8 <HAL_RTC_SetDate+0x64>
  __HAL_LOCK(hrtc);
 8004b2c:	2302      	movs	r3, #2
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	4770      	bx	lr
	...

08004b34 <HAL_RTC_SetAlarm_IT>:
{
 8004b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004b36:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	f000 80c6 	beq.w	8004ccc <HAL_RTC_SetAlarm_IT+0x198>
 8004b40:	460d      	mov	r5, r1
 8004b42:	4604      	mov	r4, r0
 8004b44:	2301      	movs	r3, #1
 8004b46:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  if (Format == RTC_FORMAT_BIN)
 8004b50:	2a00      	cmp	r2, #0
 8004b52:	d150      	bne.n	8004bf6 <HAL_RTC_SetAlarm_IT+0xc2>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b54:	6803      	ldr	r3, [r0, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004b5c:	d101      	bne.n	8004b62 <HAL_RTC_SetAlarm_IT+0x2e>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	70cb      	strb	r3, [r1, #3]
    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8004b62:	69ee      	ldr	r6, [r5, #28]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004b64:	7828      	ldrb	r0, [r5, #0]
 8004b66:	f7ff ff19 	bl	800499c <RTC_ByteToBcd2>
 8004b6a:	0407      	lsls	r7, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004b6c:	7868      	ldrb	r0, [r5, #1]
 8004b6e:	f7ff ff15 	bl	800499c <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004b72:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004b76:	78a8      	ldrb	r0, [r5, #2]
 8004b78:	f7ff ff10 	bl	800499c <RTC_ByteToBcd2>
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004b7c:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004b7e:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004b80:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004b84:	f895 0020 	ldrb.w	r0, [r5, #32]
 8004b88:	f7ff ff08 	bl	800499c <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004b8c:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004b90:	4306      	orrs	r6, r0
              ((uint32_t)sAlarm->AlarmMask));
 8004b92:	6968      	ldr	r0, [r5, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004b94:	4306      	orrs	r6, r0
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004b96:	686f      	ldr	r7, [r5, #4]
 8004b98:	69ab      	ldr	r3, [r5, #24]
 8004b9a:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b9c:	6823      	ldr	r3, [r4, #0]
 8004b9e:	22ca      	movs	r2, #202	; 0xca
 8004ba0:	625a      	str	r2, [r3, #36]	; 0x24
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	2253      	movs	r2, #83	; 0x53
 8004ba6:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004ba8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bae:	d03c      	beq.n	8004c2a <HAL_RTC_SetAlarm_IT+0xf6>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004bb0:	6822      	ldr	r2, [r4, #0]
 8004bb2:	6893      	ldr	r3, [r2, #8]
 8004bb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bb8:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004bba:	6822      	ldr	r2, [r4, #0]
 8004bbc:	68d3      	ldr	r3, [r2, #12]
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	f463 7320 	orn	r3, r3, #640	; 0x280
 8004bc4:	60d3      	str	r3, [r2, #12]
    uint32_t tickstart = HAL_GetTick();
 8004bc6:	f7fd feed 	bl	80029a4 <HAL_GetTick>
 8004bca:	4605      	mov	r5, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	68da      	ldr	r2, [r3, #12]
 8004bd0:	f012 0f02 	tst.w	r2, #2
 8004bd4:	d15a      	bne.n	8004c8c <HAL_RTC_SetAlarm_IT+0x158>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004bd6:	f7fd fee5 	bl	80029a4 <HAL_GetTick>
 8004bda:	1b40      	subs	r0, r0, r5
 8004bdc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004be0:	d9f4      	bls.n	8004bcc <HAL_RTC_SetAlarm_IT+0x98>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	22ff      	movs	r2, #255	; 0xff
 8004be6:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004be8:	2003      	movs	r0, #3
 8004bea:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8004bee:	2300      	movs	r3, #0
 8004bf0:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_TIMEOUT;
 8004bf4:	e069      	b.n	8004cca <HAL_RTC_SetAlarm_IT+0x196>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004bf6:	6803      	ldr	r3, [r0, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004bfe:	d101      	bne.n	8004c04 <HAL_RTC_SetAlarm_IT+0xd0>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004c04:	782b      	ldrb	r3, [r5, #0]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004c06:	786e      	ldrb	r6, [r5, #1]
 8004c08:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004c0a:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004c0e:	78ab      	ldrb	r3, [r5, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004c10:	431e      	orrs	r6, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004c12:	78eb      	ldrb	r3, [r5, #3]
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004c14:	ea46 5683 	orr.w	r6, r6, r3, lsl #22
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004c18:	f895 3020 	ldrb.w	r3, [r5, #32]
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004c1c:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004c20:	69eb      	ldr	r3, [r5, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004c22:	431e      	orrs	r6, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004c24:	6968      	ldr	r0, [r5, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004c26:	4306      	orrs	r6, r0
 8004c28:	e7b5      	b.n	8004b96 <HAL_RTC_SetAlarm_IT+0x62>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004c2a:	6822      	ldr	r2, [r4, #0]
 8004c2c:	6893      	ldr	r3, [r2, #8]
 8004c2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c32:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004c34:	6822      	ldr	r2, [r4, #0]
 8004c36:	68d3      	ldr	r3, [r2, #12]
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8004c3e:	60d3      	str	r3, [r2, #12]
    uint32_t tickstart = HAL_GetTick();
 8004c40:	f7fd feb0 	bl	80029a4 <HAL_GetTick>
 8004c44:	4605      	mov	r5, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004c46:	6823      	ldr	r3, [r4, #0]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	f012 0f01 	tst.w	r2, #1
 8004c4e:	d10f      	bne.n	8004c70 <HAL_RTC_SetAlarm_IT+0x13c>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c50:	f7fd fea8 	bl	80029a4 <HAL_GetTick>
 8004c54:	1b40      	subs	r0, r0, r5
 8004c56:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004c5a:	d9f4      	bls.n	8004c46 <HAL_RTC_SetAlarm_IT+0x112>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c5c:	6823      	ldr	r3, [r4, #0]
 8004c5e:	22ff      	movs	r2, #255	; 0xff
 8004c60:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c62:	2003      	movs	r0, #3
 8004c64:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_TIMEOUT;
 8004c6e:	e02c      	b.n	8004cca <HAL_RTC_SetAlarm_IT+0x196>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004c70:	61de      	str	r6, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	645f      	str	r7, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004c76:	6822      	ldr	r2, [r4, #0]
 8004c78:	6893      	ldr	r3, [r2, #8]
 8004c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c7e:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004c80:	6822      	ldr	r2, [r4, #0]
 8004c82:	6893      	ldr	r3, [r2, #8]
 8004c84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c88:	6093      	str	r3, [r2, #8]
 8004c8a:	e00c      	b.n	8004ca6 <HAL_RTC_SetAlarm_IT+0x172>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004c8c:	621e      	str	r6, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	649f      	str	r7, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004c92:	6822      	ldr	r2, [r4, #0]
 8004c94:	6893      	ldr	r3, [r2, #8]
 8004c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c9a:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004c9c:	6822      	ldr	r2, [r4, #0]
 8004c9e:	6893      	ldr	r3, [r2, #8]
 8004ca0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004ca4:	6093      	str	r3, [r2, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004ca6:	4b0a      	ldr	r3, [pc, #40]	; (8004cd0 <HAL_RTC_SetAlarm_IT+0x19c>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004cae:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004cb0:	689a      	ldr	r2, [r3, #8]
 8004cb2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004cb6:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cb8:	6823      	ldr	r3, [r4, #0]
 8004cba:	22ff      	movs	r2, #255	; 0xff
 8004cbc:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	f884 0020 	strb.w	r0, [r4, #32]
}
 8004cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 8004ccc:	2002      	movs	r0, #2
 8004cce:	e7fc      	b.n	8004cca <HAL_RTC_SetAlarm_IT+0x196>
 8004cd0:	40010400 	.word	0x40010400

08004cd4 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8004cd4:	0903      	lsrs	r3, r0, #4
 8004cd6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004cda:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & 0x0FU));
 8004cdc:	f000 000f 	and.w	r0, r0, #15
 8004ce0:	4410      	add	r0, r2
}
 8004ce2:	b2c0      	uxtb	r0, r0
 8004ce4:	4770      	bx	lr

08004ce6 <HAL_RTC_GetTime>:
{
 8004ce6:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004ce8:	6803      	ldr	r3, [r0, #0]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cec:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004cee:	6803      	ldr	r3, [r0, #0]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004cf6:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004cf8:	6803      	ldr	r3, [r0, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004d00:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004d04:	f3c3 4005 	ubfx	r0, r3, #16, #6
 8004d08:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004d0a:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8004d0e:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004d10:	f003 057f 	and.w	r5, r3, #127	; 0x7f
 8004d14:	708d      	strb	r5, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004d16:	0d9b      	lsrs	r3, r3, #22
 8004d18:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8004d1a:	b95a      	cbnz	r2, 8004d34 <HAL_RTC_GetTime+0x4e>
 8004d1c:	460c      	mov	r4, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004d1e:	f7ff ffd9 	bl	8004cd4 <RTC_Bcd2ToByte>
 8004d22:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004d24:	4630      	mov	r0, r6
 8004d26:	f7ff ffd5 	bl	8004cd4 <RTC_Bcd2ToByte>
 8004d2a:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	f7ff ffd1 	bl	8004cd4 <RTC_Bcd2ToByte>
 8004d32:	70a0      	strb	r0, [r4, #2]
}
 8004d34:	2000      	movs	r0, #0
 8004d36:	bd70      	pop	{r4, r5, r6, pc}

08004d38 <HAL_RTC_GetDate>:
{
 8004d38:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004d3a:	6803      	ldr	r3, [r0, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004d42:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004d46:	0c18      	lsrs	r0, r3, #16
 8004d48:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004d4a:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8004d4e:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004d50:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8004d54:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004d56:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004d5a:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8004d5c:	b95a      	cbnz	r2, 8004d76 <HAL_RTC_GetDate+0x3e>
 8004d5e:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004d60:	f7ff ffb8 	bl	8004cd4 <RTC_Bcd2ToByte>
 8004d64:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004d66:	4630      	mov	r0, r6
 8004d68:	f7ff ffb4 	bl	8004cd4 <RTC_Bcd2ToByte>
 8004d6c:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004d6e:	4628      	mov	r0, r5
 8004d70:	f7ff ffb0 	bl	8004cd4 <RTC_Bcd2ToByte>
 8004d74:	70a0      	strb	r0, [r4, #2]
}
 8004d76:	2000      	movs	r0, #0
 8004d78:	bd70      	pop	{r4, r5, r6, pc}

08004d7a <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d7a:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d01a      	beq.n	8004db8 <HAL_RTCEx_EnableBypassShadow+0x3e>
 8004d82:	2201      	movs	r2, #1
 8004d84:	f880 2020 	strb.w	r2, [r0, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d88:	2302      	movs	r3, #2
 8004d8a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d8e:	6803      	ldr	r3, [r0, #0]
 8004d90:	21ca      	movs	r1, #202	; 0xca
 8004d92:	6259      	str	r1, [r3, #36]	; 0x24
 8004d94:	6803      	ldr	r3, [r0, #0]
 8004d96:	2153      	movs	r1, #83	; 0x53
 8004d98:	6259      	str	r1, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8004d9a:	6801      	ldr	r1, [r0, #0]
 8004d9c:	688b      	ldr	r3, [r1, #8]
 8004d9e:	f043 0320 	orr.w	r3, r3, #32
 8004da2:	608b      	str	r3, [r1, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004da4:	6803      	ldr	r3, [r0, #0]
 8004da6:	21ff      	movs	r1, #255	; 0xff
 8004da8:	6259      	str	r1, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004daa:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004dae:	2300      	movs	r3, #0
 8004db0:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8004db4:	4618      	mov	r0, r3
 8004db6:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8004db8:	2002      	movs	r0, #2
}
 8004dba:	4770      	bx	lr

08004dbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dbe:	4605      	mov	r5, r0
 8004dc0:	460f      	mov	r7, r1
 8004dc2:	4616      	mov	r6, r2
 8004dc4:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dc6:	682b      	ldr	r3, [r5, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	ea37 0303 	bics.w	r3, r7, r3
 8004dce:	bf0c      	ite	eq
 8004dd0:	2301      	moveq	r3, #1
 8004dd2:	2300      	movne	r3, #0
 8004dd4:	42b3      	cmp	r3, r6
 8004dd6:	d037      	beq.n	8004e48 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004dd8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8004ddc:	d0f3      	beq.n	8004dc6 <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004dde:	f7fd fde1 	bl	80029a4 <HAL_GetTick>
 8004de2:	9b06      	ldr	r3, [sp, #24]
 8004de4:	1ac0      	subs	r0, r0, r3
 8004de6:	42a0      	cmp	r0, r4
 8004de8:	d201      	bcs.n	8004dee <SPI_WaitFlagStateUntilTimeout+0x32>
 8004dea:	2c00      	cmp	r4, #0
 8004dec:	d1eb      	bne.n	8004dc6 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dee:	682a      	ldr	r2, [r5, #0]
 8004df0:	6853      	ldr	r3, [r2, #4]
 8004df2:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004df6:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004df8:	686b      	ldr	r3, [r5, #4]
 8004dfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dfe:	d00b      	beq.n	8004e18 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e00:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e06:	d014      	beq.n	8004e32 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004e14:	2003      	movs	r0, #3
 8004e16:	e018      	b.n	8004e4a <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e18:	68ab      	ldr	r3, [r5, #8]
 8004e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e1e:	d002      	beq.n	8004e26 <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e24:	d1ec      	bne.n	8004e00 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8004e26:	682a      	ldr	r2, [r5, #0]
 8004e28:	6813      	ldr	r3, [r2, #0]
 8004e2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	e7e6      	b.n	8004e00 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8004e32:	682a      	ldr	r2, [r5, #0]
 8004e34:	6813      	ldr	r3, [r2, #0]
 8004e36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e3a:	6013      	str	r3, [r2, #0]
 8004e3c:	682a      	ldr	r2, [r5, #0]
 8004e3e:	6813      	ldr	r3, [r2, #0]
 8004e40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	e7df      	b.n	8004e08 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8004e48:	2000      	movs	r0, #0
}
 8004e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004e4c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4e:	4607      	mov	r7, r0
 8004e50:	460c      	mov	r4, r1
 8004e52:	4615      	mov	r5, r2
 8004e54:	461e      	mov	r6, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8004e56:	e002      	b.n	8004e5e <SPI_WaitFifoStateUntilTimeout+0x12>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 8004e58:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8004e5c:	d10b      	bne.n	8004e76 <SPI_WaitFifoStateUntilTimeout+0x2a>
  while ((hspi->Instance->SR & Fifo) != State)
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	6893      	ldr	r3, [r2, #8]
 8004e62:	4023      	ands	r3, r4
 8004e64:	42ab      	cmp	r3, r5
 8004e66:	d03b      	beq.n	8004ee0 <SPI_WaitFifoStateUntilTimeout+0x94>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004e68:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8004e6c:	d1f4      	bne.n	8004e58 <SPI_WaitFifoStateUntilTimeout+0xc>
 8004e6e:	2d00      	cmp	r5, #0
 8004e70:	d1f2      	bne.n	8004e58 <SPI_WaitFifoStateUntilTimeout+0xc>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004e72:	7b13      	ldrb	r3, [r2, #12]
 8004e74:	e7f0      	b.n	8004e58 <SPI_WaitFifoStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004e76:	f7fd fd95 	bl	80029a4 <HAL_GetTick>
 8004e7a:	9b06      	ldr	r3, [sp, #24]
 8004e7c:	1ac0      	subs	r0, r0, r3
 8004e7e:	42b0      	cmp	r0, r6
 8004e80:	d201      	bcs.n	8004e86 <SPI_WaitFifoStateUntilTimeout+0x3a>
 8004e82:	2e00      	cmp	r6, #0
 8004e84:	d1eb      	bne.n	8004e5e <SPI_WaitFifoStateUntilTimeout+0x12>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	6853      	ldr	r3, [r2, #4]
 8004e8a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004e8e:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e96:	d00b      	beq.n	8004eb0 <SPI_WaitFifoStateUntilTimeout+0x64>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e9e:	d014      	beq.n	8004eca <SPI_WaitFifoStateUntilTimeout+0x7e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004eac:	2003      	movs	r0, #3
 8004eae:	e018      	b.n	8004ee2 <SPI_WaitFifoStateUntilTimeout+0x96>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eb6:	d002      	beq.n	8004ebe <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ebc:	d1ec      	bne.n	8004e98 <SPI_WaitFifoStateUntilTimeout+0x4c>
          __HAL_SPI_DISABLE(hspi);
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	6813      	ldr	r3, [r2, #0]
 8004ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	e7e6      	b.n	8004e98 <SPI_WaitFifoStateUntilTimeout+0x4c>
          SPI_RESET_CRC(hspi);
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	6813      	ldr	r3, [r2, #0]
 8004ece:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	6813      	ldr	r3, [r2, #0]
 8004ed8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	e7df      	b.n	8004ea0 <SPI_WaitFifoStateUntilTimeout+0x54>
      }
    }
  }

  return HAL_OK;
 8004ee0:	2000      	movs	r0, #0
}
 8004ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004ee4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee4:	b570      	push	{r4, r5, r6, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	4604      	mov	r4, r0
 8004eea:	460d      	mov	r5, r1
 8004eec:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004eee:	9200      	str	r2, [sp, #0]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004ef8:	f7ff ffa8 	bl	8004e4c <SPI_WaitFifoStateUntilTimeout>
 8004efc:	b9b8      	cbnz	r0, 8004f2e <SPI_EndRxTxTransaction+0x4a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004efe:	9600      	str	r6, [sp, #0]
 8004f00:	462b      	mov	r3, r5
 8004f02:	2200      	movs	r2, #0
 8004f04:	2180      	movs	r1, #128	; 0x80
 8004f06:	4620      	mov	r0, r4
 8004f08:	f7ff ff58 	bl	8004dbc <SPI_WaitFlagStateUntilTimeout>
 8004f0c:	b9b8      	cbnz	r0, 8004f3e <SPI_EndRxTxTransaction+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f0e:	9600      	str	r6, [sp, #0]
 8004f10:	462b      	mov	r3, r5
 8004f12:	2200      	movs	r2, #0
 8004f14:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f18:	4620      	mov	r0, r4
 8004f1a:	f7ff ff97 	bl	8004e4c <SPI_WaitFifoStateUntilTimeout>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	b150      	cbz	r0, 8004f38 <SPI_EndRxTxTransaction+0x54>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f22:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004f24:	f043 0320 	orr.w	r3, r3, #32
 8004f28:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e004      	b.n	8004f38 <SPI_EndRxTxTransaction+0x54>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f2e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004f30:	f043 0320 	orr.w	r3, r3, #32
 8004f34:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
  }

  return HAL_OK;
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	b002      	add	sp, #8
 8004f3c:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f3e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004f40:	f043 0320 	orr.w	r3, r3, #32
 8004f44:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e7f6      	b.n	8004f38 <SPI_EndRxTxTransaction+0x54>

08004f4a <HAL_SPI_MspInit>:
}
 8004f4a:	4770      	bx	lr

08004f4c <HAL_SPI_Init>:
  if (hspi == NULL)
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	d053      	beq.n	8004ff8 <HAL_SPI_Init+0xac>
{
 8004f50:	b510      	push	{r4, lr}
 8004f52:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f54:	2300      	movs	r3, #0
 8004f56:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f58:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d040      	beq.n	8004fe2 <HAL_SPI_Init+0x96>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004f60:	2302      	movs	r3, #2
 8004f62:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8004f66:	6822      	ldr	r2, [r4, #0]
 8004f68:	6813      	ldr	r3, [r2, #0]
 8004f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f6e:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f70:	68e3      	ldr	r3, [r4, #12]
 8004f72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f76:	d939      	bls.n	8004fec <HAL_SPI_Init+0xa0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f78:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f7a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004f7e:	d004      	beq.n	8004f8a <HAL_SPI_Init+0x3e>
 8004f80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f84:	d001      	beq.n	8004f8a <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f86:	2100      	movs	r1, #0
 8004f88:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004f8a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004f8c:	b921      	cbnz	r1, 8004f98 <HAL_SPI_Init+0x4c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f92:	d92e      	bls.n	8004ff2 <HAL_SPI_Init+0xa6>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004f94:	2302      	movs	r3, #2
 8004f96:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004f98:	6863      	ldr	r3, [r4, #4]
 8004f9a:	68a1      	ldr	r1, [r4, #8]
 8004f9c:	430b      	orrs	r3, r1
 8004f9e:	6921      	ldr	r1, [r4, #16]
 8004fa0:	430b      	orrs	r3, r1
 8004fa2:	6961      	ldr	r1, [r4, #20]
 8004fa4:	430b      	orrs	r3, r1
 8004fa6:	69a1      	ldr	r1, [r4, #24]
 8004fa8:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8004fac:	430b      	orrs	r3, r1
 8004fae:	69e1      	ldr	r1, [r4, #28]
 8004fb0:	430b      	orrs	r3, r1
 8004fb2:	6a21      	ldr	r1, [r4, #32]
 8004fb4:	430b      	orrs	r3, r1
 8004fb6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004fb8:	6821      	ldr	r1, [r4, #0]
 8004fba:	4303      	orrs	r3, r0
 8004fbc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004fbe:	8b63      	ldrh	r3, [r4, #26]
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004fc6:	430b      	orrs	r3, r1
 8004fc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fca:	430b      	orrs	r3, r1
 8004fcc:	68e1      	ldr	r1, [r4, #12]
 8004fce:	430b      	orrs	r3, r1
 8004fd0:	6821      	ldr	r1, [r4, #0]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fd6:	2000      	movs	r0, #0
 8004fd8:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8004fe0:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004fe2:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004fe6:	f7ff ffb0 	bl	8004f4a <HAL_SPI_MspInit>
 8004fea:	e7b9      	b.n	8004f60 <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004fec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ff0:	e7c3      	b.n	8004f7a <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	6323      	str	r3, [r4, #48]	; 0x30
 8004ff6:	e7cf      	b.n	8004f98 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8004ff8:	2001      	movs	r0, #1
}
 8004ffa:	4770      	bx	lr

08004ffc <HAL_SPI_TransmitReceive>:
{
 8004ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005000:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 8005004:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8005008:	2c01      	cmp	r4, #1
 800500a:	f000 815c 	beq.w	80052c6 <HAL_SPI_TransmitReceive+0x2ca>
 800500e:	461d      	mov	r5, r3
 8005010:	4617      	mov	r7, r2
 8005012:	460e      	mov	r6, r1
 8005014:	4604      	mov	r4, r0
 8005016:	2301      	movs	r3, #1
 8005018:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800501c:	f7fd fcc2 	bl	80029a4 <HAL_GetTick>
 8005020:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 8005022:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8005026:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 8005028:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800502a:	2801      	cmp	r0, #1
 800502c:	d014      	beq.n	8005058 <HAL_SPI_TransmitReceive+0x5c>
 800502e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005032:	d009      	beq.n	8005048 <HAL_SPI_TransmitReceive+0x4c>
    errorcode = HAL_BUSY;
 8005034:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005036:	2201      	movs	r2, #1
 8005038:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800503c:	2200      	movs	r2, #0
 800503e:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 8005042:	4618      	mov	r0, r3
 8005044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005048:	68a3      	ldr	r3, [r4, #8]
 800504a:	2b00      	cmp	r3, #0
 800504c:	f040 812d 	bne.w	80052aa <HAL_SPI_TransmitReceive+0x2ae>
 8005050:	2804      	cmp	r0, #4
 8005052:	d001      	beq.n	8005058 <HAL_SPI_TransmitReceive+0x5c>
    errorcode = HAL_BUSY;
 8005054:	2302      	movs	r3, #2
 8005056:	e7ee      	b.n	8005036 <HAL_SPI_TransmitReceive+0x3a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005058:	2e00      	cmp	r6, #0
 800505a:	f000 8128 	beq.w	80052ae <HAL_SPI_TransmitReceive+0x2b2>
 800505e:	2f00      	cmp	r7, #0
 8005060:	f000 8127 	beq.w	80052b2 <HAL_SPI_TransmitReceive+0x2b6>
 8005064:	2d00      	cmp	r5, #0
 8005066:	f000 8126 	beq.w	80052b6 <HAL_SPI_TransmitReceive+0x2ba>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800506a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b04      	cmp	r3, #4
 8005072:	d002      	beq.n	800507a <HAL_SPI_TransmitReceive+0x7e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005074:	2305      	movs	r3, #5
 8005076:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800507a:	2300      	movs	r3, #0
 800507c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800507e:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005080:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005084:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005088:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800508a:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800508c:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800508e:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005090:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005092:	68e3      	ldr	r3, [r4, #12]
 8005094:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005098:	d801      	bhi.n	800509e <HAL_SPI_TransmitReceive+0xa2>
 800509a:	2d01      	cmp	r5, #1
 800509c:	d922      	bls.n	80050e4 <HAL_SPI_TransmitReceive+0xe8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800509e:	6822      	ldr	r2, [r4, #0]
 80050a0:	6853      	ldr	r3, [r2, #4]
 80050a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050a6:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050a8:	6823      	ldr	r3, [r4, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	f012 0f40 	tst.w	r2, #64	; 0x40
 80050b0:	d103      	bne.n	80050ba <HAL_SPI_TransmitReceive+0xbe>
    __HAL_SPI_ENABLE(hspi);
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050b8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050ba:	68e3      	ldr	r3, [r4, #12]
 80050bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050c0:	d956      	bls.n	8005170 <HAL_SPI_TransmitReceive+0x174>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050c2:	6863      	ldr	r3, [r4, #4]
 80050c4:	b10b      	cbz	r3, 80050ca <HAL_SPI_TransmitReceive+0xce>
 80050c6:	2d01      	cmp	r5, #1
 80050c8:	d10a      	bne.n	80050e0 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80050cc:	6823      	ldr	r3, [r4, #0]
 80050ce:	8812      	ldrh	r2, [r2, #0]
 80050d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050d4:	3302      	adds	r3, #2
 80050d6:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80050d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050da:	3b01      	subs	r3, #1
 80050dc:	b29b      	uxth	r3, r3
 80050de:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80050e0:	2501      	movs	r5, #1
 80050e2:	e025      	b.n	8005130 <HAL_SPI_TransmitReceive+0x134>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050e4:	6822      	ldr	r2, [r4, #0]
 80050e6:	6853      	ldr	r3, [r2, #4]
 80050e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050ec:	6053      	str	r3, [r2, #4]
 80050ee:	e7db      	b.n	80050a8 <HAL_SPI_TransmitReceive+0xac>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050f0:	6823      	ldr	r3, [r4, #0]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	f012 0f01 	tst.w	r2, #1
 80050f8:	d010      	beq.n	800511c <HAL_SPI_TransmitReceive+0x120>
 80050fa:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80050fe:	b292      	uxth	r2, r2
 8005100:	b162      	cbz	r2, 800511c <HAL_SPI_TransmitReceive+0x120>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005106:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005108:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800510a:	3302      	adds	r3, #2
 800510c:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800510e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005112:	3b01      	subs	r3, #1
 8005114:	b29b      	uxth	r3, r3
 8005116:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800511a:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800511c:	f7fd fc42 	bl	80029a4 <HAL_GetTick>
 8005120:	eba0 0009 	sub.w	r0, r0, r9
 8005124:	4540      	cmp	r0, r8
 8005126:	d303      	bcc.n	8005130 <HAL_SPI_TransmitReceive+0x134>
 8005128:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800512c:	f040 80c5 	bne.w	80052ba <HAL_SPI_TransmitReceive+0x2be>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005130:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005132:	b29b      	uxth	r3, r3
 8005134:	b92b      	cbnz	r3, 8005142 <HAL_SPI_TransmitReceive+0x146>
 8005136:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800513a:	b29b      	uxth	r3, r3
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 80a7 	beq.w	8005290 <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	f012 0f02 	tst.w	r2, #2
 800514a:	d0d1      	beq.n	80050f0 <HAL_SPI_TransmitReceive+0xf4>
 800514c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800514e:	b292      	uxth	r2, r2
 8005150:	2a00      	cmp	r2, #0
 8005152:	d0cd      	beq.n	80050f0 <HAL_SPI_TransmitReceive+0xf4>
 8005154:	2d00      	cmp	r5, #0
 8005156:	d0cb      	beq.n	80050f0 <HAL_SPI_TransmitReceive+0xf4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005158:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800515a:	8812      	ldrh	r2, [r2, #0]
 800515c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800515e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005160:	3302      	adds	r3, #2
 8005162:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005164:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005166:	3b01      	subs	r3, #1
 8005168:	b29b      	uxth	r3, r3
 800516a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800516c:	2500      	movs	r5, #0
 800516e:	e7bf      	b.n	80050f0 <HAL_SPI_TransmitReceive+0xf4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005170:	6863      	ldr	r3, [r4, #4]
 8005172:	b10b      	cbz	r3, 8005178 <HAL_SPI_TransmitReceive+0x17c>
 8005174:	2d01      	cmp	r5, #1
 8005176:	d10e      	bne.n	8005196 <HAL_SPI_TransmitReceive+0x19a>
      if (hspi->TxXferCount > 1U)
 8005178:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800517a:	b29b      	uxth	r3, r3
 800517c:	2b01      	cmp	r3, #1
 800517e:	d90c      	bls.n	800519a <HAL_SPI_TransmitReceive+0x19e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005180:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	8812      	ldrh	r2, [r2, #0]
 8005186:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005188:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800518a:	3302      	adds	r3, #2
 800518c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800518e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005190:	3b02      	subs	r3, #2
 8005192:	b29b      	uxth	r3, r3
 8005194:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005196:	2501      	movs	r5, #1
 8005198:	e047      	b.n	800522a <HAL_SPI_TransmitReceive+0x22e>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800519a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800519c:	6823      	ldr	r3, [r4, #0]
 800519e:	7812      	ldrb	r2, [r2, #0]
 80051a0:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80051a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051a4:	3301      	adds	r3, #1
 80051a6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80051a8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80051aa:	3b01      	subs	r3, #1
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80051b0:	e7f1      	b.n	8005196 <HAL_SPI_TransmitReceive+0x19a>
        if (hspi->TxXferCount > 1U)
 80051b2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80051b4:	b292      	uxth	r2, r2
 80051b6:	2a01      	cmp	r2, #1
 80051b8:	d90b      	bls.n	80051d2 <HAL_SPI_TransmitReceive+0x1d6>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80051bc:	8812      	ldrh	r2, [r2, #0]
 80051be:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80051c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051c2:	3302      	adds	r3, #2
 80051c4:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80051c6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80051c8:	3b02      	subs	r3, #2
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80051ce:	2500      	movs	r5, #0
 80051d0:	e03c      	b.n	800524c <HAL_SPI_TransmitReceive+0x250>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80051d4:	7812      	ldrb	r2, [r2, #0]
 80051d6:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 80051d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051da:	3301      	adds	r3, #1
 80051dc:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80051de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80051e0:	3b01      	subs	r3, #1
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80051e6:	2500      	movs	r5, #0
 80051e8:	e030      	b.n	800524c <HAL_SPI_TransmitReceive+0x250>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051ea:	6822      	ldr	r2, [r4, #0]
 80051ec:	6853      	ldr	r3, [r2, #4]
 80051ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80051f2:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 80051f4:	2501      	movs	r5, #1
 80051f6:	e00c      	b.n	8005212 <HAL_SPI_TransmitReceive+0x216>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80051f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80051fa:	7b1b      	ldrb	r3, [r3, #12]
 80051fc:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 80051fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005200:	3301      	adds	r3, #1
 8005202:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8005204:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005208:	3b01      	subs	r3, #1
 800520a:	b29b      	uxth	r3, r3
 800520c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8005210:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005212:	f7fd fbc7 	bl	80029a4 <HAL_GetTick>
 8005216:	eba0 0009 	sub.w	r0, r0, r9
 800521a:	4540      	cmp	r0, r8
 800521c:	d302      	bcc.n	8005224 <HAL_SPI_TransmitReceive+0x228>
 800521e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8005222:	d14c      	bne.n	80052be <HAL_SPI_TransmitReceive+0x2c2>
 8005224:	f1b8 0f00 	cmp.w	r8, #0
 8005228:	d04b      	beq.n	80052c2 <HAL_SPI_TransmitReceive+0x2c6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800522a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800522c:	b29b      	uxth	r3, r3
 800522e:	b91b      	cbnz	r3, 8005238 <HAL_SPI_TransmitReceive+0x23c>
 8005230:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005234:	b29b      	uxth	r3, r3
 8005236:	b35b      	cbz	r3, 8005290 <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005238:	6823      	ldr	r3, [r4, #0]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	f012 0f02 	tst.w	r2, #2
 8005240:	d004      	beq.n	800524c <HAL_SPI_TransmitReceive+0x250>
 8005242:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005244:	b292      	uxth	r2, r2
 8005246:	b10a      	cbz	r2, 800524c <HAL_SPI_TransmitReceive+0x250>
 8005248:	2d00      	cmp	r5, #0
 800524a:	d1b2      	bne.n	80051b2 <HAL_SPI_TransmitReceive+0x1b6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	f012 0f01 	tst.w	r2, #1
 8005254:	d0dd      	beq.n	8005212 <HAL_SPI_TransmitReceive+0x216>
 8005256:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800525a:	b292      	uxth	r2, r2
 800525c:	2a00      	cmp	r2, #0
 800525e:	d0d8      	beq.n	8005212 <HAL_SPI_TransmitReceive+0x216>
        if (hspi->RxXferCount > 1U)
 8005260:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005264:	b292      	uxth	r2, r2
 8005266:	2a01      	cmp	r2, #1
 8005268:	d9c6      	bls.n	80051f8 <HAL_SPI_TransmitReceive+0x1fc>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800526a:	68da      	ldr	r2, [r3, #12]
 800526c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800526e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005270:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005272:	3302      	adds	r3, #2
 8005274:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005276:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800527a:	3b02      	subs	r3, #2
 800527c:	b29b      	uxth	r3, r3
 800527e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005282:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005286:	b29b      	uxth	r3, r3
 8005288:	2b01      	cmp	r3, #1
 800528a:	d9ae      	bls.n	80051ea <HAL_SPI_TransmitReceive+0x1ee>
        txallowed = 1U;
 800528c:	2501      	movs	r5, #1
 800528e:	e7c0      	b.n	8005212 <HAL_SPI_TransmitReceive+0x216>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005290:	464a      	mov	r2, r9
 8005292:	4641      	mov	r1, r8
 8005294:	4620      	mov	r0, r4
 8005296:	f7ff fe25 	bl	8004ee4 <SPI_EndRxTxTransaction>
 800529a:	4603      	mov	r3, r0
 800529c:	2800      	cmp	r0, #0
 800529e:	f43f aeca 	beq.w	8005036 <HAL_SPI_TransmitReceive+0x3a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052a2:	2320      	movs	r3, #32
 80052a4:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e6c5      	b.n	8005036 <HAL_SPI_TransmitReceive+0x3a>
    errorcode = HAL_BUSY;
 80052aa:	2302      	movs	r3, #2
 80052ac:	e6c3      	b.n	8005036 <HAL_SPI_TransmitReceive+0x3a>
    errorcode = HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e6c1      	b.n	8005036 <HAL_SPI_TransmitReceive+0x3a>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e6bf      	b.n	8005036 <HAL_SPI_TransmitReceive+0x3a>
 80052b6:	2301      	movs	r3, #1
 80052b8:	e6bd      	b.n	8005036 <HAL_SPI_TransmitReceive+0x3a>
        errorcode = HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e6bb      	b.n	8005036 <HAL_SPI_TransmitReceive+0x3a>
        errorcode = HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e6b9      	b.n	8005036 <HAL_SPI_TransmitReceive+0x3a>
 80052c2:	2303      	movs	r3, #3
 80052c4:	e6b7      	b.n	8005036 <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 80052c6:	2302      	movs	r3, #2
 80052c8:	e6bb      	b.n	8005042 <HAL_SPI_TransmitReceive+0x46>

080052ca <UART_EndTxTransfer>:
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80052ca:	6802      	ldr	r2, [r0, #0]
 80052cc:	6813      	ldr	r3, [r2, #0]
 80052ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80052d2:	6013      	str	r3, [r2, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052d4:	2320      	movs	r3, #32
 80052d6:	6743      	str	r3, [r0, #116]	; 0x74
}
 80052d8:	4770      	bx	lr

080052da <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052da:	6802      	ldr	r2, [r0, #0]
 80052dc:	6813      	ldr	r3, [r2, #0]
 80052de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052e2:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e4:	6802      	ldr	r2, [r0, #0]
 80052e6:	6893      	ldr	r3, [r2, #8]
 80052e8:	f023 0301 	bic.w	r3, r3, #1
 80052ec:	6093      	str	r3, [r2, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052ee:	2320      	movs	r3, #32
 80052f0:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052f2:	2300      	movs	r3, #0
 80052f4:	6603      	str	r3, [r0, #96]	; 0x60
}
 80052f6:	4770      	bx	lr

080052f8 <HAL_UART_Transmit_DMA>:
{
 80052f8:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 80052fa:	6f44      	ldr	r4, [r0, #116]	; 0x74
 80052fc:	2c20      	cmp	r4, #32
 80052fe:	d13e      	bne.n	800537e <HAL_UART_Transmit_DMA+0x86>
    if ((pData == NULL) || (Size == 0U))
 8005300:	2900      	cmp	r1, #0
 8005302:	d03e      	beq.n	8005382 <HAL_UART_Transmit_DMA+0x8a>
 8005304:	2a00      	cmp	r2, #0
 8005306:	d03e      	beq.n	8005386 <HAL_UART_Transmit_DMA+0x8e>
    __HAL_LOCK(huart);
 8005308:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800530c:	2b01      	cmp	r3, #1
 800530e:	d03c      	beq.n	800538a <HAL_UART_Transmit_DMA+0x92>
 8005310:	4613      	mov	r3, r2
 8005312:	4604      	mov	r4, r0
 8005314:	2201      	movs	r2, #1
 8005316:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    huart->pTxBuffPtr  = pData;
 800531a:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800531c:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 8005320:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005324:	2200      	movs	r2, #0
 8005326:	67c2      	str	r2, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005328:	2221      	movs	r2, #33	; 0x21
 800532a:	6742      	str	r2, [r0, #116]	; 0x74
    if (huart->hdmatx != NULL)
 800532c:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800532e:	b18a      	cbz	r2, 8005354 <HAL_UART_Transmit_DMA+0x5c>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005330:	4917      	ldr	r1, [pc, #92]	; (8005390 <HAL_UART_Transmit_DMA+0x98>)
 8005332:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005334:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8005336:	4917      	ldr	r1, [pc, #92]	; (8005394 <HAL_UART_Transmit_DMA+0x9c>)
 8005338:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800533a:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800533c:	4916      	ldr	r1, [pc, #88]	; (8005398 <HAL_UART_Transmit_DMA+0xa0>)
 800533e:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8005340:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8005342:	2100      	movs	r1, #0
 8005344:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005346:	6802      	ldr	r2, [r0, #0]
 8005348:	3228      	adds	r2, #40	; 0x28
 800534a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800534c:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800534e:	f7fd fee7 	bl	8003120 <HAL_DMA_Start_IT>
 8005352:	b958      	cbnz	r0, 800536c <HAL_UART_Transmit_DMA+0x74>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	2240      	movs	r2, #64	; 0x40
 8005358:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 800535a:	2000      	movs	r0, #0
 800535c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005360:	6822      	ldr	r2, [r4, #0]
 8005362:	6893      	ldr	r3, [r2, #8]
 8005364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005368:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 800536a:	e009      	b.n	8005380 <HAL_UART_Transmit_DMA+0x88>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800536c:	2310      	movs	r3, #16
 800536e:	67e3      	str	r3, [r4, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8005370:	2300      	movs	r3, #0
 8005372:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        huart->gState = HAL_UART_STATE_READY;
 8005376:	2320      	movs	r3, #32
 8005378:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_ERROR;
 800537a:	2001      	movs	r0, #1
 800537c:	e000      	b.n	8005380 <HAL_UART_Transmit_DMA+0x88>
    return HAL_BUSY;
 800537e:	2002      	movs	r0, #2
}
 8005380:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8005382:	2001      	movs	r0, #1
 8005384:	e7fc      	b.n	8005380 <HAL_UART_Transmit_DMA+0x88>
 8005386:	2001      	movs	r0, #1
 8005388:	e7fa      	b.n	8005380 <HAL_UART_Transmit_DMA+0x88>
    __HAL_LOCK(huart);
 800538a:	2002      	movs	r0, #2
 800538c:	e7f8      	b.n	8005380 <HAL_UART_Transmit_DMA+0x88>
 800538e:	bf00      	nop
 8005390:	0800539d 	.word	0x0800539d
 8005394:	080053eb 	.word	0x080053eb
 8005398:	080053f7 	.word	0x080053f7

0800539c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800539c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800539e:	6a83      	ldr	r3, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80053a0:	6802      	ldr	r2, [r0, #0]
 80053a2:	6812      	ldr	r2, [r2, #0]
 80053a4:	f012 0f20 	tst.w	r2, #32
 80053a8:	d10d      	bne.n	80053c6 <UART_DMATransmitCplt+0x2a>
  {
    huart->TxXferCount = 0U;
 80053aa:	2200      	movs	r2, #0
 80053ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80053b0:	6819      	ldr	r1, [r3, #0]
 80053b2:	688a      	ldr	r2, [r1, #8]
 80053b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053b8:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	6813      	ldr	r3, [r2, #0]
 80053be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053c2:	6013      	str	r3, [r2, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80053c4:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80053c6:	4618      	mov	r0, r3
 80053c8:	f001 ff90 	bl	80072ec <HAL_UART_TxCpltCallback>
}
 80053cc:	e7fa      	b.n	80053c4 <UART_DMATransmitCplt+0x28>

080053ce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053ce:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053d0:	6801      	ldr	r1, [r0, #0]
 80053d2:	680a      	ldr	r2, [r1, #0]
 80053d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053d8:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053da:	2220      	movs	r2, #32
 80053dc:	6742      	str	r2, [r0, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053de:	2200      	movs	r2, #0
 80053e0:	6642      	str	r2, [r0, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053e2:	f001 ff83 	bl	80072ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053e6:	bd08      	pop	{r3, pc}

080053e8 <HAL_UART_TxHalfCpltCallback>:
}
 80053e8:	4770      	bx	lr

080053ea <UART_DMATxHalfCplt>:
{
 80053ea:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80053ec:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80053ee:	f7ff fffb 	bl	80053e8 <HAL_UART_TxHalfCpltCallback>
}
 80053f2:	bd08      	pop	{r3, pc}

080053f4 <HAL_UART_ErrorCallback>:
}
 80053f4:	4770      	bx	lr

080053f6 <UART_DMAError>:
{
 80053f6:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053f8:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80053fa:	6f62      	ldr	r2, [r4, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80053fc:	6fa5      	ldr	r5, [r4, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005406:	d001      	beq.n	800540c <UART_DMAError+0x16>
 8005408:	2a21      	cmp	r2, #33	; 0x21
 800540a:	d00e      	beq.n	800542a <UART_DMAError+0x34>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005414:	d001      	beq.n	800541a <UART_DMAError+0x24>
 8005416:	2d22      	cmp	r5, #34	; 0x22
 8005418:	d00e      	beq.n	8005438 <UART_DMAError+0x42>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800541a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800541c:	f043 0310 	orr.w	r3, r3, #16
 8005420:	67e3      	str	r3, [r4, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 8005422:	4620      	mov	r0, r4
 8005424:	f7ff ffe6 	bl	80053f4 <HAL_UART_ErrorCallback>
}
 8005428:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005430:	4620      	mov	r0, r4
 8005432:	f7ff ff4a 	bl	80052ca <UART_EndTxTransfer>
 8005436:	e7e9      	b.n	800540c <UART_DMAError+0x16>
    huart->RxXferCount = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800543e:	4620      	mov	r0, r4
 8005440:	f7ff ff4b 	bl	80052da <UART_EndRxTransfer>
 8005444:	e7e9      	b.n	800541a <UART_DMAError+0x24>
	...

08005448 <HAL_UART_IRQHandler>:
{
 8005448:	b538      	push	{r3, r4, r5, lr}
 800544a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800544c:	6801      	ldr	r1, [r0, #0]
 800544e:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005450:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005452:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005454:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8005458:	401a      	ands	r2, r3
 800545a:	d10c      	bne.n	8005476 <HAL_UART_IRQHandler+0x2e>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800545c:	f013 0f20 	tst.w	r3, #32
 8005460:	d009      	beq.n	8005476 <HAL_UART_IRQHandler+0x2e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005462:	f010 0f20 	tst.w	r0, #32
 8005466:	d006      	beq.n	8005476 <HAL_UART_IRQHandler+0x2e>
      if (huart->RxISR != NULL)
 8005468:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 80a1 	beq.w	80055b2 <HAL_UART_IRQHandler+0x16a>
        huart->RxISR(huart);
 8005470:	4620      	mov	r0, r4
 8005472:	4798      	blx	r3
 8005474:	e09d      	b.n	80055b2 <HAL_UART_IRQHandler+0x16a>
  if ((errorflags != 0U)
 8005476:	2a00      	cmp	r2, #0
 8005478:	d07d      	beq.n	8005576 <HAL_UART_IRQHandler+0x12e>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800547a:	f015 0201 	ands.w	r2, r5, #1
 800547e:	d102      	bne.n	8005486 <HAL_UART_IRQHandler+0x3e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005480:	f410 7f90 	tst.w	r0, #288	; 0x120
 8005484:	d077      	beq.n	8005576 <HAL_UART_IRQHandler+0x12e>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005486:	f013 0f01 	tst.w	r3, #1
 800548a:	d007      	beq.n	800549c <HAL_UART_IRQHandler+0x54>
 800548c:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005490:	d004      	beq.n	800549c <HAL_UART_IRQHandler+0x54>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005492:	2501      	movs	r5, #1
 8005494:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005496:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005498:	4329      	orrs	r1, r5
 800549a:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800549c:	f013 0f02 	tst.w	r3, #2
 80054a0:	d007      	beq.n	80054b2 <HAL_UART_IRQHandler+0x6a>
 80054a2:	b132      	cbz	r2, 80054b2 <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80054a4:	6821      	ldr	r1, [r4, #0]
 80054a6:	2502      	movs	r5, #2
 80054a8:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054aa:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80054ac:	f041 0104 	orr.w	r1, r1, #4
 80054b0:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054b2:	f013 0f04 	tst.w	r3, #4
 80054b6:	d007      	beq.n	80054c8 <HAL_UART_IRQHandler+0x80>
 80054b8:	b132      	cbz	r2, 80054c8 <HAL_UART_IRQHandler+0x80>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80054ba:	6821      	ldr	r1, [r4, #0]
 80054bc:	2504      	movs	r5, #4
 80054be:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054c0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80054c2:	f041 0102 	orr.w	r1, r1, #2
 80054c6:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80054c8:	f013 0f08 	tst.w	r3, #8
 80054cc:	d009      	beq.n	80054e2 <HAL_UART_IRQHandler+0x9a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054ce:	f010 0f20 	tst.w	r0, #32
 80054d2:	d100      	bne.n	80054d6 <HAL_UART_IRQHandler+0x8e>
 80054d4:	b12a      	cbz	r2, 80054e2 <HAL_UART_IRQHandler+0x9a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054d6:	6822      	ldr	r2, [r4, #0]
 80054d8:	2108      	movs	r1, #8
 80054da:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054dc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80054de:	430a      	orrs	r2, r1
 80054e0:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80054e2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80054e6:	d00a      	beq.n	80054fe <HAL_UART_IRQHandler+0xb6>
 80054e8:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80054ec:	d007      	beq.n	80054fe <HAL_UART_IRQHandler+0xb6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054ee:	6822      	ldr	r2, [r4, #0]
 80054f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80054f4:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80054f6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80054f8:	f042 0220 	orr.w	r2, r2, #32
 80054fc:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054fe:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005500:	2a00      	cmp	r2, #0
 8005502:	d056      	beq.n	80055b2 <HAL_UART_IRQHandler+0x16a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005504:	f013 0f20 	tst.w	r3, #32
 8005508:	d006      	beq.n	8005518 <HAL_UART_IRQHandler+0xd0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800550a:	f010 0f20 	tst.w	r0, #32
 800550e:	d003      	beq.n	8005518 <HAL_UART_IRQHandler+0xd0>
        if (huart->RxISR != NULL)
 8005510:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005512:	b10b      	cbz	r3, 8005518 <HAL_UART_IRQHandler+0xd0>
          huart->RxISR(huart);
 8005514:	4620      	mov	r0, r4
 8005516:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8005518:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005522:	d102      	bne.n	800552a <HAL_UART_IRQHandler+0xe2>
 8005524:	f012 0f28 	tst.w	r2, #40	; 0x28
 8005528:	d01f      	beq.n	800556a <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 800552a:	4620      	mov	r0, r4
 800552c:	f7ff fed5 	bl	80052da <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005530:	6823      	ldr	r3, [r4, #0]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005538:	d013      	beq.n	8005562 <HAL_UART_IRQHandler+0x11a>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800553a:	689a      	ldr	r2, [r3, #8]
 800553c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005540:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8005542:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005544:	b14b      	cbz	r3, 800555a <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005546:	4a1d      	ldr	r2, [pc, #116]	; (80055bc <HAL_UART_IRQHandler+0x174>)
 8005548:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800554a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800554c:	f7fd fe23 	bl	8003196 <HAL_DMA_Abort_IT>
 8005550:	b378      	cbz	r0, 80055b2 <HAL_UART_IRQHandler+0x16a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005552:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005554:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005556:	4798      	blx	r3
 8005558:	e02b      	b.n	80055b2 <HAL_UART_IRQHandler+0x16a>
            HAL_UART_ErrorCallback(huart);
 800555a:	4620      	mov	r0, r4
 800555c:	f7ff ff4a 	bl	80053f4 <HAL_UART_ErrorCallback>
 8005560:	e027      	b.n	80055b2 <HAL_UART_IRQHandler+0x16a>
          HAL_UART_ErrorCallback(huart);
 8005562:	4620      	mov	r0, r4
 8005564:	f7ff ff46 	bl	80053f4 <HAL_UART_ErrorCallback>
 8005568:	e023      	b.n	80055b2 <HAL_UART_IRQHandler+0x16a>
        HAL_UART_ErrorCallback(huart);
 800556a:	4620      	mov	r0, r4
 800556c:	f7ff ff42 	bl	80053f4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005570:	2300      	movs	r3, #0
 8005572:	67e3      	str	r3, [r4, #124]	; 0x7c
 8005574:	e01d      	b.n	80055b2 <HAL_UART_IRQHandler+0x16a>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005576:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800557a:	d002      	beq.n	8005582 <HAL_UART_IRQHandler+0x13a>
 800557c:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8005580:	d10a      	bne.n	8005598 <HAL_UART_IRQHandler+0x150>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005582:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005586:	d00e      	beq.n	80055a6 <HAL_UART_IRQHandler+0x15e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005588:	f010 0f80 	tst.w	r0, #128	; 0x80
 800558c:	d00b      	beq.n	80055a6 <HAL_UART_IRQHandler+0x15e>
    if (huart->TxISR != NULL)
 800558e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005590:	b17b      	cbz	r3, 80055b2 <HAL_UART_IRQHandler+0x16a>
      huart->TxISR(huart);
 8005592:	4620      	mov	r0, r4
 8005594:	4798      	blx	r3
 8005596:	e00c      	b.n	80055b2 <HAL_UART_IRQHandler+0x16a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005598:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800559c:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800559e:	4620      	mov	r0, r4
 80055a0:	f000 fb44 	bl	8005c2c <HAL_UARTEx_WakeupCallback>
    return;
 80055a4:	e005      	b.n	80055b2 <HAL_UART_IRQHandler+0x16a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80055a6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80055aa:	d002      	beq.n	80055b2 <HAL_UART_IRQHandler+0x16a>
 80055ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055b0:	d100      	bne.n	80055b4 <HAL_UART_IRQHandler+0x16c>
}
 80055b2:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 80055b4:	4620      	mov	r0, r4
 80055b6:	f7ff ff0a 	bl	80053ce <UART_EndTransmit_IT>
    return;
 80055ba:	e7fa      	b.n	80055b2 <HAL_UART_IRQHandler+0x16a>
 80055bc:	080055c1 	.word	0x080055c1

080055c0 <UART_DMAAbortOnError>:
{
 80055c0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055c2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80055ca:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 80055ce:	f7ff ff11 	bl	80053f4 <HAL_UART_ErrorCallback>
}
 80055d2:	bd08      	pop	{r3, pc}

080055d4 <UART_SetConfig>:
{
 80055d4:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80055d8:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80055da:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055dc:	6883      	ldr	r3, [r0, #8]
 80055de:	6902      	ldr	r2, [r0, #16]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	6942      	ldr	r2, [r0, #20]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	69c2      	ldr	r2, [r0, #28]
 80055e8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055ea:	6808      	ldr	r0, [r1, #0]
 80055ec:	4aa2      	ldr	r2, [pc, #648]	; (8005878 <UART_SetConfig+0x2a4>)
 80055ee:	4002      	ands	r2, r0
 80055f0:	4313      	orrs	r3, r2
 80055f2:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055f4:	6822      	ldr	r2, [r4, #0]
 80055f6:	6853      	ldr	r3, [r2, #4]
 80055f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80055fc:	68e1      	ldr	r1, [r4, #12]
 80055fe:	430b      	orrs	r3, r1
 8005600:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005602:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005604:	6822      	ldr	r2, [r4, #0]
 8005606:	4b9d      	ldr	r3, [pc, #628]	; (800587c <UART_SetConfig+0x2a8>)
 8005608:	429a      	cmp	r2, r3
 800560a:	d001      	beq.n	8005610 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 800560c:	6a23      	ldr	r3, [r4, #32]
 800560e:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005610:	6893      	ldr	r3, [r2, #8]
 8005612:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005616:	430b      	orrs	r3, r1
 8005618:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800561a:	6823      	ldr	r3, [r4, #0]
 800561c:	4a98      	ldr	r2, [pc, #608]	; (8005880 <UART_SetConfig+0x2ac>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d027      	beq.n	8005672 <UART_SetConfig+0x9e>
 8005622:	4a98      	ldr	r2, [pc, #608]	; (8005884 <UART_SetConfig+0x2b0>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d038      	beq.n	800569a <UART_SetConfig+0xc6>
 8005628:	4a97      	ldr	r2, [pc, #604]	; (8005888 <UART_SetConfig+0x2b4>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d04e      	beq.n	80056cc <UART_SetConfig+0xf8>
 800562e:	4a97      	ldr	r2, [pc, #604]	; (800588c <UART_SetConfig+0x2b8>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d061      	beq.n	80056f8 <UART_SetConfig+0x124>
 8005634:	4a96      	ldr	r2, [pc, #600]	; (8005890 <UART_SetConfig+0x2bc>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d074      	beq.n	8005724 <UART_SetConfig+0x150>
 800563a:	4a90      	ldr	r2, [pc, #576]	; (800587c <UART_SetConfig+0x2a8>)
 800563c:	4293      	cmp	r3, r2
 800563e:	f000 808a 	beq.w	8005756 <UART_SetConfig+0x182>
 8005642:	2510      	movs	r5, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8005644:	4a8d      	ldr	r2, [pc, #564]	; (800587c <UART_SetConfig+0x2a8>)
 8005646:	4293      	cmp	r3, r2
 8005648:	f000 80aa 	beq.w	80057a0 <UART_SetConfig+0x1cc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800564c:	69e3      	ldr	r3, [r4, #28]
 800564e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005652:	f000 8135 	beq.w	80058c0 <UART_SetConfig+0x2ec>
    switch (clocksource)
 8005656:	2d08      	cmp	r5, #8
 8005658:	f200 81bf 	bhi.w	80059da <UART_SetConfig+0x406>
 800565c:	e8df f015 	tbh	[pc, r5, lsl #1]
 8005660:	0195017f 	.word	0x0195017f
 8005664:	01bd019f 	.word	0x01bd019f
 8005668:	01bd01aa 	.word	0x01bd01aa
 800566c:	01bd01bd 	.word	0x01bd01bd
 8005670:	01b4      	.short	0x01b4
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005672:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8005676:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800567a:	f002 0203 	and.w	r2, r2, #3
 800567e:	2a03      	cmp	r2, #3
 8005680:	d809      	bhi.n	8005696 <UART_SetConfig+0xc2>
 8005682:	e8df f002 	tbb	[pc, r2]
 8005686:	0402      	.short	0x0402
 8005688:	0681      	.short	0x0681
 800568a:	2501      	movs	r5, #1
 800568c:	e7da      	b.n	8005644 <UART_SetConfig+0x70>
 800568e:	2504      	movs	r5, #4
 8005690:	e7d8      	b.n	8005644 <UART_SetConfig+0x70>
 8005692:	2508      	movs	r5, #8
 8005694:	e7d6      	b.n	8005644 <UART_SetConfig+0x70>
 8005696:	2510      	movs	r5, #16
 8005698:	e7d4      	b.n	8005644 <UART_SetConfig+0x70>
 800569a:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 800569e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80056a2:	f002 020c 	and.w	r2, r2, #12
 80056a6:	2a0c      	cmp	r2, #12
 80056a8:	d80e      	bhi.n	80056c8 <UART_SetConfig+0xf4>
 80056aa:	e8df f002 	tbb	[pc, r2]
 80056ae:	0d07      	.short	0x0d07
 80056b0:	0d090d0d 	.word	0x0d090d0d
 80056b4:	0d6f0d0d 	.word	0x0d6f0d0d
 80056b8:	0d0d      	.short	0x0d0d
 80056ba:	0b          	.byte	0x0b
 80056bb:	00          	.byte	0x00
 80056bc:	2500      	movs	r5, #0
 80056be:	e7c1      	b.n	8005644 <UART_SetConfig+0x70>
 80056c0:	2504      	movs	r5, #4
 80056c2:	e7bf      	b.n	8005644 <UART_SetConfig+0x70>
 80056c4:	2508      	movs	r5, #8
 80056c6:	e7bd      	b.n	8005644 <UART_SetConfig+0x70>
 80056c8:	2510      	movs	r5, #16
 80056ca:	e7bb      	b.n	8005644 <UART_SetConfig+0x70>
 80056cc:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 80056d0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80056d4:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80056d8:	2a10      	cmp	r2, #16
 80056da:	d009      	beq.n	80056f0 <UART_SetConfig+0x11c>
 80056dc:	d905      	bls.n	80056ea <UART_SetConfig+0x116>
 80056de:	2a20      	cmp	r2, #32
 80056e0:	d056      	beq.n	8005790 <UART_SetConfig+0x1bc>
 80056e2:	2a30      	cmp	r2, #48	; 0x30
 80056e4:	d106      	bne.n	80056f4 <UART_SetConfig+0x120>
 80056e6:	2508      	movs	r5, #8
 80056e8:	e7ac      	b.n	8005644 <UART_SetConfig+0x70>
 80056ea:	b91a      	cbnz	r2, 80056f4 <UART_SetConfig+0x120>
 80056ec:	2500      	movs	r5, #0
 80056ee:	e7a9      	b.n	8005644 <UART_SetConfig+0x70>
 80056f0:	2504      	movs	r5, #4
 80056f2:	e7a7      	b.n	8005644 <UART_SetConfig+0x70>
 80056f4:	2510      	movs	r5, #16
 80056f6:	e7a5      	b.n	8005644 <UART_SetConfig+0x70>
 80056f8:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 80056fc:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005700:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8005704:	2a40      	cmp	r2, #64	; 0x40
 8005706:	d009      	beq.n	800571c <UART_SetConfig+0x148>
 8005708:	d905      	bls.n	8005716 <UART_SetConfig+0x142>
 800570a:	2a80      	cmp	r2, #128	; 0x80
 800570c:	d042      	beq.n	8005794 <UART_SetConfig+0x1c0>
 800570e:	2ac0      	cmp	r2, #192	; 0xc0
 8005710:	d106      	bne.n	8005720 <UART_SetConfig+0x14c>
 8005712:	2508      	movs	r5, #8
 8005714:	e796      	b.n	8005644 <UART_SetConfig+0x70>
 8005716:	b91a      	cbnz	r2, 8005720 <UART_SetConfig+0x14c>
 8005718:	2500      	movs	r5, #0
 800571a:	e793      	b.n	8005644 <UART_SetConfig+0x70>
 800571c:	2504      	movs	r5, #4
 800571e:	e791      	b.n	8005644 <UART_SetConfig+0x70>
 8005720:	2510      	movs	r5, #16
 8005722:	e78f      	b.n	8005644 <UART_SetConfig+0x70>
 8005724:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8005728:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800572c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005730:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005734:	d00b      	beq.n	800574e <UART_SetConfig+0x17a>
 8005736:	d907      	bls.n	8005748 <UART_SetConfig+0x174>
 8005738:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800573c:	d02c      	beq.n	8005798 <UART_SetConfig+0x1c4>
 800573e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005742:	d106      	bne.n	8005752 <UART_SetConfig+0x17e>
 8005744:	2508      	movs	r5, #8
 8005746:	e77d      	b.n	8005644 <UART_SetConfig+0x70>
 8005748:	b91a      	cbnz	r2, 8005752 <UART_SetConfig+0x17e>
 800574a:	2500      	movs	r5, #0
 800574c:	e77a      	b.n	8005644 <UART_SetConfig+0x70>
 800574e:	2504      	movs	r5, #4
 8005750:	e778      	b.n	8005644 <UART_SetConfig+0x70>
 8005752:	2510      	movs	r5, #16
 8005754:	e776      	b.n	8005644 <UART_SetConfig+0x70>
 8005756:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 800575a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800575e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8005762:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005766:	d00b      	beq.n	8005780 <UART_SetConfig+0x1ac>
 8005768:	d907      	bls.n	800577a <UART_SetConfig+0x1a6>
 800576a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800576e:	d015      	beq.n	800579c <UART_SetConfig+0x1c8>
 8005770:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8005774:	d106      	bne.n	8005784 <UART_SetConfig+0x1b0>
 8005776:	2508      	movs	r5, #8
 8005778:	e764      	b.n	8005644 <UART_SetConfig+0x70>
 800577a:	b91a      	cbnz	r2, 8005784 <UART_SetConfig+0x1b0>
 800577c:	2500      	movs	r5, #0
 800577e:	e761      	b.n	8005644 <UART_SetConfig+0x70>
 8005780:	2504      	movs	r5, #4
 8005782:	e75f      	b.n	8005644 <UART_SetConfig+0x70>
 8005784:	2510      	movs	r5, #16
 8005786:	e75d      	b.n	8005644 <UART_SetConfig+0x70>
 8005788:	2502      	movs	r5, #2
 800578a:	e75b      	b.n	8005644 <UART_SetConfig+0x70>
 800578c:	2502      	movs	r5, #2
 800578e:	e759      	b.n	8005644 <UART_SetConfig+0x70>
 8005790:	2502      	movs	r5, #2
 8005792:	e757      	b.n	8005644 <UART_SetConfig+0x70>
 8005794:	2502      	movs	r5, #2
 8005796:	e755      	b.n	8005644 <UART_SetConfig+0x70>
 8005798:	2502      	movs	r5, #2
 800579a:	e753      	b.n	8005644 <UART_SetConfig+0x70>
 800579c:	2502      	movs	r5, #2
 800579e:	e751      	b.n	8005644 <UART_SetConfig+0x70>
    switch (clocksource)
 80057a0:	2d08      	cmp	r5, #8
 80057a2:	f200 811d 	bhi.w	80059e0 <UART_SetConfig+0x40c>
 80057a6:	e8df f015 	tbh	[pc, r5, lsl #1]
 80057aa:	000c      	.short	0x000c
 80057ac:	0014011b 	.word	0x0014011b
 80057b0:	0011011b 	.word	0x0011011b
 80057b4:	011b011b 	.word	0x011b011b
 80057b8:	0009011b 	.word	0x0009011b
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80057bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80057c0:	e008      	b.n	80057d4 <UART_SetConfig+0x200>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80057c2:	f7fe fb7f 	bl	8003ec4 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 80057c6:	b928      	cbnz	r0, 80057d4 <UART_SetConfig+0x200>
 80057c8:	2000      	movs	r0, #0
 80057ca:	e0d9      	b.n	8005980 <UART_SetConfig+0x3ac>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80057cc:	f7fd ff52 	bl	8003674 <HAL_RCC_GetSysClockFreq>
        break;
 80057d0:	e7f9      	b.n	80057c6 <UART_SetConfig+0x1f2>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80057d2:	4830      	ldr	r0, [pc, #192]	; (8005894 <UART_SetConfig+0x2c0>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057d4:	6862      	ldr	r2, [r4, #4]
 80057d6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80057da:	4283      	cmp	r3, r0
 80057dc:	f200 8102 	bhi.w	80059e4 <UART_SetConfig+0x410>
 80057e0:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80057e4:	f200 8100 	bhi.w	80059e8 <UART_SetConfig+0x414>
        switch (clocksource)
 80057e8:	2d08      	cmp	r5, #8
 80057ea:	d866      	bhi.n	80058ba <UART_SetConfig+0x2e6>
 80057ec:	e8df f005 	tbb	[pc, r5]
 80057f0:	65206505 	.word	0x65206505
 80057f4:	65656530 	.word	0x65656530
 80057f8:	58          	.byte	0x58
 80057f9:	00          	.byte	0x00
            pclk = HAL_RCC_GetPCLK1Freq();
 80057fa:	f7fe fb63 	bl	8003ec4 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80057fe:	2500      	movs	r5, #0
 8005800:	0e07      	lsrs	r7, r0, #24
 8005802:	0206      	lsls	r6, r0, #8
 8005804:	6862      	ldr	r2, [r4, #4]
 8005806:	0850      	lsrs	r0, r2, #1
 8005808:	462b      	mov	r3, r5
 800580a:	eb16 0b00 	adds.w	fp, r6, r0
 800580e:	f147 0c00 	adc.w	ip, r7, #0
 8005812:	4658      	mov	r0, fp
 8005814:	4661      	mov	r1, ip
 8005816:	f7fb f9a1 	bl	8000b5c <__aeabi_uldivmod>
 800581a:	4603      	mov	r3, r0
            break;
 800581c:	4628      	mov	r0, r5
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800581e:	f5a3 7140 	sub.w	r1, r3, #768	; 0x300
 8005822:	4a1d      	ldr	r2, [pc, #116]	; (8005898 <UART_SetConfig+0x2c4>)
 8005824:	4291      	cmp	r1, r2
 8005826:	f200 80e1 	bhi.w	80059ec <UART_SetConfig+0x418>
          huart->Instance->BRR = usartdiv;
 800582a:	6822      	ldr	r2, [r4, #0]
 800582c:	60d3      	str	r3, [r2, #12]
 800582e:	e0a7      	b.n	8005980 <UART_SetConfig+0x3ac>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005830:	0856      	lsrs	r6, r2, #1
 8005832:	2500      	movs	r5, #0
 8005834:	462b      	mov	r3, r5
 8005836:	f8df b064 	ldr.w	fp, [pc, #100]	; 800589c <UART_SetConfig+0x2c8>
 800583a:	f04f 0c00 	mov.w	ip, #0
 800583e:	eb1b 0006 	adds.w	r0, fp, r6
 8005842:	f14c 0100 	adc.w	r1, ip, #0
 8005846:	f7fb f989 	bl	8000b5c <__aeabi_uldivmod>
 800584a:	4603      	mov	r3, r0
            break;
 800584c:	4628      	mov	r0, r5
 800584e:	e7e6      	b.n	800581e <UART_SetConfig+0x24a>
            pclk = HAL_RCC_GetSysClockFreq();
 8005850:	f7fd ff10 	bl	8003674 <HAL_RCC_GetSysClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005854:	2500      	movs	r5, #0
 8005856:	0e07      	lsrs	r7, r0, #24
 8005858:	0206      	lsls	r6, r0, #8
 800585a:	6862      	ldr	r2, [r4, #4]
 800585c:	0850      	lsrs	r0, r2, #1
 800585e:	462b      	mov	r3, r5
 8005860:	eb16 0b00 	adds.w	fp, r6, r0
 8005864:	f147 0c00 	adc.w	ip, r7, #0
 8005868:	4658      	mov	r0, fp
 800586a:	4661      	mov	r1, ip
 800586c:	f7fb f976 	bl	8000b5c <__aeabi_uldivmod>
 8005870:	4603      	mov	r3, r0
            break;
 8005872:	4628      	mov	r0, r5
 8005874:	e7d3      	b.n	800581e <UART_SetConfig+0x24a>
 8005876:	bf00      	nop
 8005878:	efff69f3 	.word	0xefff69f3
 800587c:	40008000 	.word	0x40008000
 8005880:	40013800 	.word	0x40013800
 8005884:	40004400 	.word	0x40004400
 8005888:	40004800 	.word	0x40004800
 800588c:	40004c00 	.word	0x40004c00
 8005890:	40005000 	.word	0x40005000
 8005894:	00f42400 	.word	0x00f42400
 8005898:	000ffcff 	.word	0x000ffcff
 800589c:	f4240000 	.word	0xf4240000
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80058a0:	0850      	lsrs	r0, r2, #1
 80058a2:	2700      	movs	r7, #0
 80058a4:	2500      	movs	r5, #0
 80058a6:	462b      	mov	r3, r5
 80058a8:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 80058ac:	f147 0100 	adc.w	r1, r7, #0
 80058b0:	f7fb f954 	bl	8000b5c <__aeabi_uldivmod>
 80058b4:	4603      	mov	r3, r0
            break;
 80058b6:	4628      	mov	r0, r5
 80058b8:	e7b1      	b.n	800581e <UART_SetConfig+0x24a>
            ret = HAL_ERROR;
 80058ba:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80058bc:	2300      	movs	r3, #0
 80058be:	e7ae      	b.n	800581e <UART_SetConfig+0x24a>
    switch (clocksource)
 80058c0:	2d08      	cmp	r5, #8
 80058c2:	d849      	bhi.n	8005958 <UART_SetConfig+0x384>
 80058c4:	e8df f005 	tbb	[pc, r5]
 80058c8:	48291e05 	.word	0x48291e05
 80058cc:	48484834 	.word	0x48484834
 80058d0:	3f          	.byte	0x3f
 80058d1:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 80058d2:	f7fe faf7 	bl	8003ec4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058d6:	6862      	ldr	r2, [r4, #4]
 80058d8:	0853      	lsrs	r3, r2, #1
 80058da:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80058de:	fbb3 f3f2 	udiv	r3, r3, r2
 80058e2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80058e4:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058e6:	f1a3 0110 	sub.w	r1, r3, #16
 80058ea:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80058ee:	4291      	cmp	r1, r2
 80058f0:	d87e      	bhi.n	80059f0 <UART_SetConfig+0x41c>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058f8:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80058fc:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 80058fe:	6822      	ldr	r2, [r4, #0]
 8005900:	60d3      	str	r3, [r2, #12]
 8005902:	e03d      	b.n	8005980 <UART_SetConfig+0x3ac>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005904:	f7fe faf0 	bl	8003ee8 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005908:	6862      	ldr	r2, [r4, #4]
 800590a:	0853      	lsrs	r3, r2, #1
 800590c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005910:	fbb3 f3f2 	udiv	r3, r3, r2
 8005914:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005916:	2000      	movs	r0, #0
        break;
 8005918:	e7e5      	b.n	80058e6 <UART_SetConfig+0x312>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800591a:	6862      	ldr	r2, [r4, #4]
 800591c:	0853      	lsrs	r3, r2, #1
 800591e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005922:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005926:	fbb3 f3f2 	udiv	r3, r3, r2
 800592a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800592c:	2000      	movs	r0, #0
        break;
 800592e:	e7da      	b.n	80058e6 <UART_SetConfig+0x312>
        pclk = HAL_RCC_GetSysClockFreq();
 8005930:	f7fd fea0 	bl	8003674 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005934:	6862      	ldr	r2, [r4, #4]
 8005936:	0853      	lsrs	r3, r2, #1
 8005938:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800593c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005940:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005942:	2000      	movs	r0, #0
        break;
 8005944:	e7cf      	b.n	80058e6 <UART_SetConfig+0x312>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005946:	6862      	ldr	r2, [r4, #4]
 8005948:	0853      	lsrs	r3, r2, #1
 800594a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800594e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005952:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005954:	2000      	movs	r0, #0
        break;
 8005956:	e7c6      	b.n	80058e6 <UART_SetConfig+0x312>
        ret = HAL_ERROR;
 8005958:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800595a:	2300      	movs	r3, #0
 800595c:	e7c3      	b.n	80058e6 <UART_SetConfig+0x312>
        pclk = HAL_RCC_GetPCLK1Freq();
 800595e:	f7fe fab1 	bl	8003ec4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005962:	6863      	ldr	r3, [r4, #4]
 8005964:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 8005968:	fbb2 f2f3 	udiv	r2, r2, r3
 800596c:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800596e:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005970:	f1a2 0110 	sub.w	r1, r2, #16
 8005974:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005978:	4299      	cmp	r1, r3
 800597a:	d83b      	bhi.n	80059f4 <UART_SetConfig+0x420>
      huart->Instance->BRR = usartdiv;
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	60da      	str	r2, [r3, #12]
  huart->RxISR = NULL;
 8005980:	2200      	movs	r2, #0
 8005982:	6622      	str	r2, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8005984:	6662      	str	r2, [r4, #100]	; 0x64
}
 8005986:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800598a:	f7fe faad 	bl	8003ee8 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800598e:	6863      	ldr	r3, [r4, #4]
 8005990:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 8005994:	fbb2 f2f3 	udiv	r2, r2, r3
 8005998:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800599a:	2000      	movs	r0, #0
        break;
 800599c:	e7e8      	b.n	8005970 <UART_SetConfig+0x39c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800599e:	6863      	ldr	r3, [r4, #4]
 80059a0:	085a      	lsrs	r2, r3, #1
 80059a2:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
 80059a6:	f502 5210 	add.w	r2, r2, #9216	; 0x2400
 80059aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80059ae:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 80059b0:	2000      	movs	r0, #0
        break;
 80059b2:	e7dd      	b.n	8005970 <UART_SetConfig+0x39c>
        pclk = HAL_RCC_GetSysClockFreq();
 80059b4:	f7fd fe5e 	bl	8003674 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059b8:	6863      	ldr	r3, [r4, #4]
 80059ba:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 80059be:	fbb2 f2f3 	udiv	r2, r2, r3
 80059c2:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 80059c4:	2000      	movs	r0, #0
        break;
 80059c6:	e7d3      	b.n	8005970 <UART_SetConfig+0x39c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80059c8:	6863      	ldr	r3, [r4, #4]
 80059ca:	085a      	lsrs	r2, r3, #1
 80059cc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80059d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80059d4:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 80059d6:	2000      	movs	r0, #0
        break;
 80059d8:	e7ca      	b.n	8005970 <UART_SetConfig+0x39c>
        ret = HAL_ERROR;
 80059da:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80059dc:	2200      	movs	r2, #0
 80059de:	e7c7      	b.n	8005970 <UART_SetConfig+0x39c>
        ret = HAL_ERROR;
 80059e0:	2001      	movs	r0, #1
 80059e2:	e7cd      	b.n	8005980 <UART_SetConfig+0x3ac>
        ret = HAL_ERROR;
 80059e4:	2001      	movs	r0, #1
 80059e6:	e7cb      	b.n	8005980 <UART_SetConfig+0x3ac>
 80059e8:	2001      	movs	r0, #1
 80059ea:	e7c9      	b.n	8005980 <UART_SetConfig+0x3ac>
          ret = HAL_ERROR;
 80059ec:	2001      	movs	r0, #1
 80059ee:	e7c7      	b.n	8005980 <UART_SetConfig+0x3ac>
      ret = HAL_ERROR;
 80059f0:	2001      	movs	r0, #1
 80059f2:	e7c5      	b.n	8005980 <UART_SetConfig+0x3ac>
      ret = HAL_ERROR;
 80059f4:	2001      	movs	r0, #1
 80059f6:	e7c3      	b.n	8005980 <UART_SetConfig+0x3ac>

080059f8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80059fa:	f013 0f01 	tst.w	r3, #1
 80059fe:	d006      	beq.n	8005a0e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a00:	6802      	ldr	r2, [r0, #0]
 8005a02:	6853      	ldr	r3, [r2, #4]
 8005a04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a08:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8005a0a:	430b      	orrs	r3, r1
 8005a0c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a0e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005a10:	f013 0f02 	tst.w	r3, #2
 8005a14:	d006      	beq.n	8005a24 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a16:	6802      	ldr	r2, [r0, #0]
 8005a18:	6853      	ldr	r3, [r2, #4]
 8005a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a1e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005a20:	430b      	orrs	r3, r1
 8005a22:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a24:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005a26:	f013 0f04 	tst.w	r3, #4
 8005a2a:	d006      	beq.n	8005a3a <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a2c:	6802      	ldr	r2, [r0, #0]
 8005a2e:	6853      	ldr	r3, [r2, #4]
 8005a30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a34:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005a36:	430b      	orrs	r3, r1
 8005a38:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a3a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005a3c:	f013 0f08 	tst.w	r3, #8
 8005a40:	d006      	beq.n	8005a50 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a42:	6802      	ldr	r2, [r0, #0]
 8005a44:	6853      	ldr	r3, [r2, #4]
 8005a46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a4a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005a4c:	430b      	orrs	r3, r1
 8005a4e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005a52:	f013 0f10 	tst.w	r3, #16
 8005a56:	d006      	beq.n	8005a66 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a58:	6802      	ldr	r2, [r0, #0]
 8005a5a:	6893      	ldr	r3, [r2, #8]
 8005a5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a60:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005a62:	430b      	orrs	r3, r1
 8005a64:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a66:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005a68:	f013 0f20 	tst.w	r3, #32
 8005a6c:	d006      	beq.n	8005a7c <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a6e:	6802      	ldr	r2, [r0, #0]
 8005a70:	6893      	ldr	r3, [r2, #8]
 8005a72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a76:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005a78:	430b      	orrs	r3, r1
 8005a7a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005a7e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005a82:	d00a      	beq.n	8005a9a <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a84:	6802      	ldr	r2, [r0, #0]
 8005a86:	6853      	ldr	r3, [r2, #4]
 8005a88:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005a8c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005a8e:	430b      	orrs	r3, r1
 8005a90:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a92:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005a94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a98:	d00b      	beq.n	8005ab2 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a9a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005a9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005aa0:	d006      	beq.n	8005ab0 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005aa2:	6802      	ldr	r2, [r0, #0]
 8005aa4:	6853      	ldr	r3, [r2, #4]
 8005aa6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005aaa:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005aac:	430b      	orrs	r3, r1
 8005aae:	6053      	str	r3, [r2, #4]
}
 8005ab0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ab2:	6802      	ldr	r2, [r0, #0]
 8005ab4:	6853      	ldr	r3, [r2, #4]
 8005ab6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005aba:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8005abc:	430b      	orrs	r3, r1
 8005abe:	6053      	str	r3, [r2, #4]
 8005ac0:	e7eb      	b.n	8005a9a <UART_AdvFeatureConfig+0xa2>

08005ac2 <UART_WaitOnFlagUntilTimeout>:
{
 8005ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ac6:	4604      	mov	r4, r0
 8005ac8:	460f      	mov	r7, r1
 8005aca:	4616      	mov	r6, r2
 8005acc:	4698      	mov	r8, r3
 8005ace:	9d06      	ldr	r5, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	ea37 0303 	bics.w	r3, r7, r3
 8005ad8:	bf0c      	ite	eq
 8005ada:	2301      	moveq	r3, #1
 8005adc:	2300      	movne	r3, #0
 8005ade:	42b3      	cmp	r3, r6
 8005ae0:	d13a      	bne.n	8005b58 <UART_WaitOnFlagUntilTimeout+0x96>
    if (Timeout != HAL_MAX_DELAY)
 8005ae2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005ae6:	d0f3      	beq.n	8005ad0 <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ae8:	f7fc ff5c 	bl	80029a4 <HAL_GetTick>
 8005aec:	eba0 0008 	sub.w	r0, r0, r8
 8005af0:	42a8      	cmp	r0, r5
 8005af2:	d81f      	bhi.n	8005b34 <UART_WaitOnFlagUntilTimeout+0x72>
 8005af4:	b1f5      	cbz	r5, 8005b34 <UART_WaitOnFlagUntilTimeout+0x72>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	f012 0f04 	tst.w	r2, #4
 8005afe:	d0e7      	beq.n	8005ad0 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b00:	69da      	ldr	r2, [r3, #28]
 8005b02:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8005b06:	d0e3      	beq.n	8005ad0 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b0c:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b0e:	6822      	ldr	r2, [r4, #0]
 8005b10:	6813      	ldr	r3, [r2, #0]
 8005b12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b16:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b18:	6822      	ldr	r2, [r4, #0]
 8005b1a:	6893      	ldr	r3, [r2, #8]
 8005b1c:	f023 0301 	bic.w	r3, r3, #1
 8005b20:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 8005b22:	2320      	movs	r3, #32
 8005b24:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005b26:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b28:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 8005b30:	2003      	movs	r0, #3
 8005b32:	e012      	b.n	8005b5a <UART_WaitOnFlagUntilTimeout+0x98>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b34:	6822      	ldr	r2, [r4, #0]
 8005b36:	6813      	ldr	r3, [r2, #0]
 8005b38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b3c:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b3e:	6822      	ldr	r2, [r4, #0]
 8005b40:	6893      	ldr	r3, [r2, #8]
 8005b42:	f023 0301 	bic.w	r3, r3, #1
 8005b46:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005b48:	2320      	movs	r3, #32
 8005b4a:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005b4c:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        return HAL_TIMEOUT;
 8005b54:	2003      	movs	r0, #3
 8005b56:	e000      	b.n	8005b5a <UART_WaitOnFlagUntilTimeout+0x98>
  return HAL_OK;
 8005b58:	2000      	movs	r0, #0
}
 8005b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005b5e <UART_CheckIdleState>:
{
 8005b5e:	b530      	push	{r4, r5, lr}
 8005b60:	b083      	sub	sp, #12
 8005b62:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b64:	2300      	movs	r3, #0
 8005b66:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8005b68:	f7fc ff1c 	bl	80029a4 <HAL_GetTick>
 8005b6c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b6e:	6823      	ldr	r3, [r4, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f013 0f08 	tst.w	r3, #8
 8005b76:	d10c      	bne.n	8005b92 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b78:	6823      	ldr	r3, [r4, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f013 0f04 	tst.w	r3, #4
 8005b80:	d115      	bne.n	8005bae <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8005b82:	2320      	movs	r3, #32
 8005b84:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005b86:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8005b88:	2000      	movs	r0, #0
 8005b8a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8005b8e:	b003      	add	sp, #12
 8005b90:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	f7ff ff8e 	bl	8005ac2 <UART_WaitOnFlagUntilTimeout>
 8005ba6:	2800      	cmp	r0, #0
 8005ba8:	d0e6      	beq.n	8005b78 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8005baa:	2003      	movs	r0, #3
 8005bac:	e7ef      	b.n	8005b8e <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	462b      	mov	r3, r5
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	f7ff ff80 	bl	8005ac2 <UART_WaitOnFlagUntilTimeout>
 8005bc2:	2800      	cmp	r0, #0
 8005bc4:	d0dd      	beq.n	8005b82 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8005bc6:	2003      	movs	r0, #3
 8005bc8:	e7e1      	b.n	8005b8e <UART_CheckIdleState+0x30>

08005bca <HAL_UART_Init>:
  if (huart == NULL)
 8005bca:	b368      	cbz	r0, 8005c28 <HAL_UART_Init+0x5e>
{
 8005bcc:	b510      	push	{r4, lr}
 8005bce:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005bd0:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8005bd2:	b303      	cbz	r3, 8005c16 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8005bd4:	2324      	movs	r3, #36	; 0x24
 8005bd6:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8005bd8:	6822      	ldr	r2, [r4, #0]
 8005bda:	6813      	ldr	r3, [r2, #0]
 8005bdc:	f023 0301 	bic.w	r3, r3, #1
 8005be0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005be2:	4620      	mov	r0, r4
 8005be4:	f7ff fcf6 	bl	80055d4 <UART_SetConfig>
 8005be8:	2801      	cmp	r0, #1
 8005bea:	d013      	beq.n	8005c14 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bee:	b9bb      	cbnz	r3, 8005c20 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bf0:	6822      	ldr	r2, [r4, #0]
 8005bf2:	6853      	ldr	r3, [r2, #4]
 8005bf4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005bf8:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bfa:	6822      	ldr	r2, [r4, #0]
 8005bfc:	6893      	ldr	r3, [r2, #8]
 8005bfe:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005c02:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005c04:	6822      	ldr	r2, [r4, #0]
 8005c06:	6813      	ldr	r3, [r2, #0]
 8005c08:	f043 0301 	orr.w	r3, r3, #1
 8005c0c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005c0e:	4620      	mov	r0, r4
 8005c10:	f7ff ffa5 	bl	8005b5e <UART_CheckIdleState>
}
 8005c14:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005c16:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8005c1a:	f001 fbb1 	bl	8007380 <HAL_UART_MspInit>
 8005c1e:	e7d9      	b.n	8005bd4 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8005c20:	4620      	mov	r0, r4
 8005c22:	f7ff fee9 	bl	80059f8 <UART_AdvFeatureConfig>
 8005c26:	e7e3      	b.n	8005bf0 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8005c28:	2001      	movs	r0, #1
}
 8005c2a:	4770      	bx	lr

08005c2c <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c2c:	4770      	bx	lr
	...

08005c30 <DBG_Init>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions ------------------------------------------------------- */

void DBG_Init(void)
{
 8005c30:	b530      	push	{r4, r5, lr}
 8005c32:	b087      	sub	sp, #28
//#ifdef DEBUG
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8005c34:	2500      	movs	r5, #0
 8005c36:	9505      	str	r5, [sp, #20]

  /* Enable the GPIO_B Clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c38:	4b1b      	ldr	r3, [pc, #108]	; (8005ca8 <DBG_Init+0x78>)
 8005c3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c3c:	f042 0202 	orr.w	r2, r2, #2
 8005c40:	64da      	str	r2, [r3, #76]	; 0x4c
 8005c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c44:	f003 0302 	and.w	r3, r3, #2
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	9b00      	ldr	r3, [sp, #0]

  /* Configure the GPIO pin */
  gpioinitstruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	9302      	str	r3, [sp, #8]
  gpioinitstruct.Pull   = GPIO_PULLUP;
 8005c50:	9303      	str	r3, [sp, #12]
  gpioinitstruct.Speed  = GPIO_SPEED_HIGH;
 8005c52:	2303      	movs	r3, #3
 8005c54:	9304      	str	r3, [sp, #16]

  gpioinitstruct.Pin    = (GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 8005c56:	a906      	add	r1, sp, #24
 8005c58:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005c5c:	f841 3d14 	str.w	r3, [r1, #-20]!
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 8005c60:	4c12      	ldr	r4, [pc, #72]	; (8005cac <DBG_Init+0x7c>)
 8005c62:	4620      	mov	r0, r4
 8005c64:	f7fd fb22 	bl	80032ac <HAL_GPIO_Init>

  /* Reset debug Pins */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8005c68:	462a      	mov	r2, r5
 8005c6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005c6e:	4620      	mov	r0, r4
 8005c70:	f7fd fc00 	bl	8003474 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8005c74:	462a      	mov	r2, r5
 8005c76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	f7fd fbfa 	bl	8003474 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8005c80:	462a      	mov	r2, r5
 8005c82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c86:	4620      	mov	r0, r4
 8005c88:	f7fd fbf4 	bl	8003474 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8005c8c:	462a      	mov	r2, r5
 8005c8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c92:	4620      	mov	r0, r4
 8005c94:	f7fd fbee 	bl	8003474 <HAL_GPIO_WritePin>

  __HAL_RCC_DBGMCU_CLK_ENABLE();

  HAL_DBGMCU_EnableDBGSleepMode();
 8005c98:	f7fc fe8a 	bl	80029b0 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8005c9c:	f7fc fe90 	bl	80029c0 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8005ca0:	f7fc fe96 	bl	80029d0 <HAL_DBGMCU_EnableDBGStandbyMode>
//  HAL_DBGMCU_DisableDBGSleepMode();
//  HAL_DBGMCU_DisableDBGStopMode();
//  HAL_DBGMCU_DisableDBGStandbyMode();
//  __HAL_RCC_DBGMCU_CLK_DISABLE();
//#endif
}
 8005ca4:	b007      	add	sp, #28
 8005ca6:	bd30      	pop	{r4, r5, pc}
 8005ca8:	40021000 	.word	0x40021000
 8005cac:	48000400 	.word	0x48000400

08005cb0 <Error_Handler>:

void Error_Handler(void)
{
 8005cb0:	b508      	push	{r3, lr}
  PRINTF("Error_Handler\n\r");
 8005cb2:	4802      	ldr	r0, [pc, #8]	; (8005cbc <Error_Handler+0xc>)
 8005cb4:	f001 faa8 	bl	8007208 <TraceSend>
 8005cb8:	e7fe      	b.n	8005cb8 <Error_Handler+0x8>
 8005cba:	bf00      	nop
 8005cbc:	08008294 	.word	0x08008294

08005cc0 <HW_GPIO_GetBitPos>:
 *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
 *                   All port bits are not necessarily available on all GPIOs.
 * @retval the position of the bit
 */
static uint8_t HW_GPIO_GetBitPos(uint16_t GPIO_Pin)
{
 8005cc0:	4603      	mov	r3, r0
  uint8_t PinPos = 0;

  if ((GPIO_Pin & 0xFF00) != 0)
 8005cc2:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
 8005cc6:	d119      	bne.n	8005cfc <HW_GPIO_GetBitPos+0x3c>
  uint8_t PinPos = 0;
 8005cc8:	2000      	movs	r0, #0
  {
    PinPos |= 0x8;
  }
  if ((GPIO_Pin & 0xF0F0) != 0)
 8005cca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005cce:	f022 020f 	bic.w	r2, r2, #15
 8005cd2:	b292      	uxth	r2, r2
 8005cd4:	b10a      	cbz	r2, 8005cda <HW_GPIO_GetBitPos+0x1a>
  {
    PinPos |= 0x4;
 8005cd6:	f040 0004 	orr.w	r0, r0, #4
  }
  if ((GPIO_Pin & 0xCCCC) != 0)
 8005cda:	f423 524c 	bic.w	r2, r3, #13056	; 0x3300
 8005cde:	f022 0233 	bic.w	r2, r2, #51	; 0x33
 8005ce2:	b292      	uxth	r2, r2
 8005ce4:	b10a      	cbz	r2, 8005cea <HW_GPIO_GetBitPos+0x2a>
  {
    PinPos |= 0x2;
 8005ce6:	f040 0002 	orr.w	r0, r0, #2
  }
  if ((GPIO_Pin & 0xAAAA) != 0)
 8005cea:	f423 43aa 	bic.w	r3, r3, #21760	; 0x5500
 8005cee:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	b10b      	cbz	r3, 8005cfa <HW_GPIO_GetBitPos+0x3a>
  {
    PinPos |= 0x1;
 8005cf6:	f040 0001 	orr.w	r0, r0, #1
  }

  return PinPos;
}
 8005cfa:	4770      	bx	lr
    PinPos |= 0x8;
 8005cfc:	2008      	movs	r0, #8
 8005cfe:	e7e4      	b.n	8005cca <HW_GPIO_GetBitPos+0xa>

08005d00 <HW_GPIO_Init>:
{
 8005d00:	b510      	push	{r4, lr}
 8005d02:	b086      	sub	sp, #24
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 8005d04:	4b24      	ldr	r3, [pc, #144]	; (8005d98 <HW_GPIO_Init+0x98>)
 8005d06:	4298      	cmp	r0, r3
 8005d08:	d025      	beq.n	8005d56 <HW_GPIO_Init+0x56>
 8005d0a:	d911      	bls.n	8005d30 <HW_GPIO_Init+0x30>
 8005d0c:	4b23      	ldr	r3, [pc, #140]	; (8005d9c <HW_GPIO_Init+0x9c>)
 8005d0e:	4298      	cmp	r0, r3
 8005d10:	d02c      	beq.n	8005d6c <HW_GPIO_Init+0x6c>
 8005d12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d16:	4298      	cmp	r0, r3
 8005d18:	d133      	bne.n	8005d82 <HW_GPIO_Init+0x82>
 8005d1a:	4b21      	ldr	r3, [pc, #132]	; (8005da0 <HW_GPIO_Init+0xa0>)
 8005d1c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005d1e:	f044 0408 	orr.w	r4, r4, #8
 8005d22:	64dc      	str	r4, [r3, #76]	; 0x4c
 8005d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d26:	f003 0308 	and.w	r3, r3, #8
 8005d2a:	9304      	str	r3, [sp, #16]
 8005d2c:	9b04      	ldr	r3, [sp, #16]
 8005d2e:	e00c      	b.n	8005d4a <HW_GPIO_Init+0x4a>
 8005d30:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8005d34:	d125      	bne.n	8005d82 <HW_GPIO_Init+0x82>
 8005d36:	4b1a      	ldr	r3, [pc, #104]	; (8005da0 <HW_GPIO_Init+0xa0>)
 8005d38:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005d3a:	f044 0401 	orr.w	r4, r4, #1
 8005d3e:	64dc      	str	r4, [r3, #76]	; 0x4c
 8005d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	9301      	str	r3, [sp, #4]
 8005d48:	9b01      	ldr	r3, [sp, #4]
  initStruct->Pin = GPIO_Pin ;
 8005d4a:	6011      	str	r1, [r2, #0]
  HAL_GPIO_Init(port, initStruct);
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	f7fd faad 	bl	80032ac <HAL_GPIO_Init>
}
 8005d52:	b006      	add	sp, #24
 8005d54:	bd10      	pop	{r4, pc}
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 8005d56:	4b12      	ldr	r3, [pc, #72]	; (8005da0 <HW_GPIO_Init+0xa0>)
 8005d58:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005d5a:	f044 0402 	orr.w	r4, r4, #2
 8005d5e:	64dc      	str	r4, [r3, #76]	; 0x4c
 8005d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	9302      	str	r3, [sp, #8]
 8005d68:	9b02      	ldr	r3, [sp, #8]
 8005d6a:	e7ee      	b.n	8005d4a <HW_GPIO_Init+0x4a>
 8005d6c:	4b0c      	ldr	r3, [pc, #48]	; (8005da0 <HW_GPIO_Init+0xa0>)
 8005d6e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005d70:	f044 0404 	orr.w	r4, r4, #4
 8005d74:	64dc      	str	r4, [r3, #76]	; 0x4c
 8005d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d78:	f003 0304 	and.w	r3, r3, #4
 8005d7c:	9303      	str	r3, [sp, #12]
 8005d7e:	9b03      	ldr	r3, [sp, #12]
 8005d80:	e7e3      	b.n	8005d4a <HW_GPIO_Init+0x4a>
 8005d82:	4b07      	ldr	r3, [pc, #28]	; (8005da0 <HW_GPIO_Init+0xa0>)
 8005d84:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005d86:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8005d8a:	64dc      	str	r4, [r3, #76]	; 0x4c
 8005d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d92:	9305      	str	r3, [sp, #20]
 8005d94:	9b05      	ldr	r3, [sp, #20]
 8005d96:	e7d8      	b.n	8005d4a <HW_GPIO_Init+0x4a>
 8005d98:	48000400 	.word	0x48000400
 8005d9c:	48000800 	.word	0x48000800
 8005da0:	40021000 	.word	0x40021000

08005da4 <HW_GPIO_SetIrq>:
{
 8005da4:	b570      	push	{r4, r5, r6, lr}
 8005da6:	460c      	mov	r4, r1
 8005da8:	4616      	mov	r6, r2
 8005daa:	461d      	mov	r5, r3
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin) ;
 8005dac:	4608      	mov	r0, r1
 8005dae:	f7ff ff87 	bl	8005cc0 <HW_GPIO_GetBitPos>
  if (irqHandler != NULL)
 8005db2:	b925      	cbnz	r5, 8005dbe <HW_GPIO_SetIrq+0x1a>
    GpioIrq[ BitPos ] = NULL;
 8005db4:	4b09      	ldr	r3, [pc, #36]	; (8005ddc <HW_GPIO_SetIrq+0x38>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 8005dbc:	bd70      	pop	{r4, r5, r6, pc}
    GpioIrq[ BitPos ] = irqHandler;
 8005dbe:	4b07      	ldr	r3, [pc, #28]	; (8005ddc <HW_GPIO_SetIrq+0x38>)
 8005dc0:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
    IRQnb = MSP_GetIRQn(GPIO_Pin);
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f000 fe87 	bl	8006ad8 <MSP_GetIRQn>
 8005dca:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(IRQnb, prio, 0);
 8005dcc:	2200      	movs	r2, #0
 8005dce:	4631      	mov	r1, r6
 8005dd0:	f7fd f8d0 	bl	8002f74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IRQnb);
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	f7fd f901 	bl	8002fdc <HAL_NVIC_EnableIRQ>
 8005dda:	e7ef      	b.n	8005dbc <HW_GPIO_SetIrq+0x18>
 8005ddc:	200001d0 	.word	0x200001d0

08005de0 <HW_GPIO_IrqHandler>:
{
 8005de0:	b508      	push	{r3, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin);
 8005de2:	f7ff ff6d 	bl	8005cc0 <HW_GPIO_GetBitPos>
  if (GpioIrq[ BitPos ]  != NULL)
 8005de6:	4b03      	ldr	r3, [pc, #12]	; (8005df4 <HW_GPIO_IrqHandler+0x14>)
 8005de8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005dec:	b10b      	cbz	r3, 8005df2 <HW_GPIO_IrqHandler+0x12>
    GpioIrq[ BitPos ](NULL);
 8005dee:	2000      	movs	r0, #0
 8005df0:	4798      	blx	r3
}
 8005df2:	bd08      	pop	{r3, pc}
 8005df4:	200001d0 	.word	0x200001d0

08005df8 <HW_GPIO_Write>:
{
 8005df8:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, (GPIO_PinState) value);
 8005dfa:	b2d2      	uxtb	r2, r2
 8005dfc:	f7fd fb3a 	bl	8003474 <HAL_GPIO_WritePin>
}
 8005e00:	bd08      	pop	{r3, pc}
	...

08005e04 <HW_RTC_SetConfig>:
 * @note The timer is based on the RTC
 * @param none
 * @retval none
 */
static void HW_RTC_SetConfig(void)
{
 8005e04:	b530      	push	{r4, r5, lr}
 8005e06:	b087      	sub	sp, #28
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  RtcHandle.Instance = RTC;
 8005e08:	4d19      	ldr	r5, [pc, #100]	; (8005e70 <HW_RTC_SetConfig+0x6c>)
 8005e0a:	4b1a      	ldr	r3, [pc, #104]	; (8005e74 <HW_RTC_SetConfig+0x70>)
 8005e0c:	602b      	str	r3, [r5, #0]

  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 8005e0e:	2400      	movs	r4, #0
 8005e10:	606c      	str	r4, [r5, #4]
  RtcHandle.Init.AsynchPrediv = PREDIV_A; /* RTC_ASYNCH_PREDIV; */
 8005e12:	231f      	movs	r3, #31
 8005e14:	60ab      	str	r3, [r5, #8]
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 8005e16:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8005e1a:	60eb      	str	r3, [r5, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT;
 8005e1c:	612c      	str	r4, [r5, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005e1e:	61ac      	str	r4, [r5, #24]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005e20:	61ec      	str	r4, [r5, #28]

  HAL_RTC_Init(&RtcHandle);
 8005e22:	4628      	mov	r0, r5
 8005e24:	f7fe fd6a 	bl	80048fc <HAL_RTC_Init>

  /*Monday 1st January 2016*/
  RTC_DateStruct.Year = 0;
 8005e28:	f88d 4003 	strb.w	r4, [sp, #3]
  RTC_DateStruct.Month = RTC_MONTH_JANUARY;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	f88d 3001 	strb.w	r3, [sp, #1]
  RTC_DateStruct.Date = 1;
 8005e32:	f88d 3002 	strb.w	r3, [sp, #2]
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 8005e36:	a906      	add	r1, sp, #24
 8005e38:	f801 3d18 	strb.w	r3, [r1, #-24]!
  HAL_RTC_SetDate(&RtcHandle, &RTC_DateStruct, RTC_FORMAT_BIN);
 8005e3c:	4622      	mov	r2, r4
 8005e3e:	4628      	mov	r0, r5
 8005e40:	f7fe fe20 	bl	8004a84 <HAL_RTC_SetDate>

  /*at 0:0:0*/
  RTC_TimeStruct.Hours = 0;
 8005e44:	f88d 4004 	strb.w	r4, [sp, #4]
  RTC_TimeStruct.Minutes = 0;
 8005e48:	f88d 4005 	strb.w	r4, [sp, #5]

  RTC_TimeStruct.Seconds = 0;
 8005e4c:	f88d 4006 	strb.w	r4, [sp, #6]
  RTC_TimeStruct.TimeFormat = 0;
 8005e50:	f88d 4007 	strb.w	r4, [sp, #7]
  RTC_TimeStruct.SubSeconds = 0;
 8005e54:	9402      	str	r4, [sp, #8]
  RTC_TimeStruct.StoreOperation = RTC_DAYLIGHTSAVING_NONE;
 8005e56:	9405      	str	r4, [sp, #20]
  RTC_TimeStruct.DayLightSaving = RTC_STOREOPERATION_RESET;
 8005e58:	9404      	str	r4, [sp, #16]

  HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct, RTC_FORMAT_BIN);
 8005e5a:	4622      	mov	r2, r4
 8005e5c:	a901      	add	r1, sp, #4
 8005e5e:	4628      	mov	r0, r5
 8005e60:	f7fe fda7 	bl	80049b2 <HAL_RTC_SetTime>

  /*Enable Direct Read of the calendar registers (not through Shadow) */
  HAL_RTCEx_EnableBypassShadow(&RtcHandle);
 8005e64:	4628      	mov	r0, r5
 8005e66:	f7fe ff88 	bl	8004d7a <HAL_RTCEx_EnableBypassShadow>
}
 8005e6a:	b007      	add	sp, #28
 8005e6c:	bd30      	pop	{r4, r5, pc}
 8005e6e:	bf00      	nop
 8005e70:	20000210 	.word	0x20000210
 8005e74:	40002800 	.word	0x40002800

08005e78 <HW_RTC_SetAlarmConfig>:
 * @brief configure alarm at init
 * @param none
 * @retval none
 */
static void HW_RTC_SetAlarmConfig(void)
{
 8005e78:	b508      	push	{r3, lr}
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 8005e7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e7e:	4802      	ldr	r0, [pc, #8]	; (8005e88 <HW_RTC_SetAlarmConfig+0x10>)
 8005e80:	f7fe fc74 	bl	800476c <HAL_RTC_DeactivateAlarm>
}
 8005e84:	bd08      	pop	{r3, pc}
 8005e86:	bf00      	nop
 8005e88:	20000210 	.word	0x20000210

08005e8c <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static uint64_t HW_RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 8005e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e90:	4680      	mov	r8, r0
 8005e92:	460f      	mov	r7, r1
  uint32_t first_read;
  uint32_t correction;
  uint32_t seconds;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 8005e94:	2200      	movs	r2, #0
 8005e96:	4829      	ldr	r0, [pc, #164]	; (8005f3c <HW_RTC_GetCalendarValue+0xb0>)
 8005e98:	f7fe ff25 	bl	8004ce6 <HAL_RTC_GetTime>
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8005e9c:	4d28      	ldr	r5, [pc, #160]	; (8005f40 <HW_RTC_GetCalendarValue+0xb4>)
 8005e9e:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8005ea0:	b2a4      	uxth	r4, r4

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN);
 8005ea2:	4e26      	ldr	r6, [pc, #152]	; (8005f3c <HW_RTC_GetCalendarValue+0xb0>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	4641      	mov	r1, r8
 8005ea8:	4630      	mov	r0, r6
 8005eaa:	f7fe ff45 	bl	8004d38 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 8005eae:	2200      	movs	r2, #0
 8005eb0:	4639      	mov	r1, r7
 8005eb2:	4630      	mov	r0, r6
 8005eb4:	f7fe ff17 	bl	8004ce6 <HAL_RTC_GetTime>
 8005eb8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005eba:	b29b      	uxth	r3, r3

  }
  while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 8005ebc:	42a3      	cmp	r3, r4
 8005ebe:	d1ed      	bne.n	8005e9c <HW_RTC_GetCalendarValue+0x10>

  /* calculte amount of elapsed days since 01/01/2000 */
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8005ec0:	f898 2003 	ldrb.w	r2, [r8, #3]
 8005ec4:	f240 53b5 	movw	r3, #1461	; 0x5b5
 8005ec8:	fb03 f302 	mul.w	r3, r3, r2
 8005ecc:	3303      	adds	r3, #3
 8005ece:	089c      	lsrs	r4, r3, #2

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8005ed0:	f012 0f03 	tst.w	r2, #3
 8005ed4:	d02f      	beq.n	8005f36 <HW_RTC_GetCalendarValue+0xaa>
 8005ed6:	4a1b      	ldr	r2, [pc, #108]	; (8005f44 <HW_RTC_GetCalendarValue+0xb8>)

  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8005ed8:	f898 0001 	ldrb.w	r0, [r8, #1]
 8005edc:	3801      	subs	r0, #1
 8005ede:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
 8005ee2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
 8005eec:	0043      	lsls	r3, r0, #1
 8005eee:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef2:	f003 0303 	and.w	r3, r3, #3
 8005ef6:	ebc3 0361 	rsb	r3, r3, r1, asr #1
 8005efa:	4423      	add	r3, r4

  seconds += (RTC_DateStruct->Date - 1);
 8005efc:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005f00:	4413      	add	r3, r2
 8005f02:	3b01      	subs	r3, #1

  /* convert from days to seconds */
  seconds *= SECONDS_IN_1DAY;

  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 8005f04:	78b8      	ldrb	r0, [r7, #2]
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
              ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8005f06:	7839      	ldrb	r1, [r7, #0]
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8005f08:	787a      	ldrb	r2, [r7, #1]
 8005f0a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8005f0e:	0092      	lsls	r2, r2, #2
 8005f10:	f44f 6461 	mov.w	r4, #3600	; 0xe10
 8005f14:	fb04 2201 	mla	r2, r4, r1, r2
 8005f18:	4402      	add	r2, r0
  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 8005f1a:	490b      	ldr	r1, [pc, #44]	; (8005f48 <HW_RTC_GetCalendarValue+0xbc>)
 8005f1c:	fb01 2303 	mla	r3, r1, r3, r2



  calendarValue = (((uint64_t) seconds) << N_PREDIV_S) + (PREDIV_S - RTC_TimeStruct->SubSeconds);
 8005f20:	0d9d      	lsrs	r5, r3, #22
 8005f22:	029c      	lsls	r4, r3, #10
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8005f2a:	3303      	adds	r3, #3

  return (calendarValue);
}
 8005f2c:	18e0      	adds	r0, r4, r3
 8005f2e:	f145 0100 	adc.w	r1, r5, #0
 8005f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8005f36:	4a05      	ldr	r2, [pc, #20]	; (8005f4c <HW_RTC_GetCalendarValue+0xc0>)
 8005f38:	e7ce      	b.n	8005ed8 <HW_RTC_GetCalendarValue+0x4c>
 8005f3a:	bf00      	nop
 8005f3c:	20000210 	.word	0x20000210
 8005f40:	40002800 	.word	0x40002800
 8005f44:	0099aaa0 	.word	0x0099aaa0
 8005f48:	00015180 	.word	0x00015180
 8005f4c:	00445550 	.word	0x00445550

08005f50 <HW_RTC_GetMinimumTimeout>:
}
 8005f50:	2003      	movs	r0, #3
 8005f52:	4770      	bx	lr

08005f54 <HW_RTC_ms2Tick>:
{
 8005f54:	b508      	push	{r3, lr}
 8005f56:	4601      	mov	r1, r0
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8005f58:	227d      	movs	r2, #125	; 0x7d
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	01c0      	lsls	r0, r0, #7
 8005f5e:	0e49      	lsrs	r1, r1, #25
 8005f60:	f7fa fdfc 	bl	8000b5c <__aeabi_uldivmod>
}
 8005f64:	bd08      	pop	{r3, pc}

08005f66 <HW_RTC_Tick2ms>:
  uint32_t seconds = tick >> N_PREDIV_S;
 8005f66:	0a81      	lsrs	r1, r0, #10
  tick = tick & PREDIV_S;
 8005f68:	f3c0 0309 	ubfx	r3, r0, #0, #10
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 8005f6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f70:	fb00 f303 	mul.w	r3, r0, r3
 8005f74:	0a9b      	lsrs	r3, r3, #10
}
 8005f76:	fb00 3001 	mla	r0, r0, r1, r3
 8005f7a:	4770      	bx	lr

08005f7c <HW_RTC_GetTimerElapsedTime>:
{
 8005f7c:	b500      	push	{lr}
 8005f7e:	b087      	sub	sp, #28
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8005f80:	a901      	add	r1, sp, #4
 8005f82:	4668      	mov	r0, sp
 8005f84:	f7ff ff82 	bl	8005e8c <HW_RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 8005f88:	4b02      	ldr	r3, [pc, #8]	; (8005f94 <HW_RTC_GetTimerElapsedTime+0x18>)
 8005f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005f8c:	1ac0      	subs	r0, r0, r3
 8005f8e:	b007      	add	sp, #28
 8005f90:	f85d fb04 	ldr.w	pc, [sp], #4
 8005f94:	20000210 	.word	0x20000210

08005f98 <HW_RTC_GetTimerValue>:
{
 8005f98:	b500      	push	{lr}
 8005f9a:	b087      	sub	sp, #28
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8005f9c:	a901      	add	r1, sp, #4
 8005f9e:	4668      	mov	r0, sp
 8005fa0:	f7ff ff74 	bl	8005e8c <HW_RTC_GetCalendarValue>
}
 8005fa4:	b007      	add	sp, #28
 8005fa6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005fac <HW_RTC_StopAlarm>:
{
 8005fac:	b510      	push	{r4, lr}
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 8005fae:	4c08      	ldr	r4, [pc, #32]	; (8005fd0 <HW_RTC_StopAlarm+0x24>)
 8005fb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	f7fe fbd9 	bl	800476c <HAL_RTC_DeactivateAlarm>
  __HAL_RTC_ALARM_CLEAR_FLAG(&RtcHandle, RTC_FLAG_ALRAF);
 8005fba:	6822      	ldr	r2, [r4, #0]
 8005fbc:	68d3      	ldr	r3, [r2, #12]
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8005fc4:	60d3      	str	r3, [r2, #12]
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005fc6:	4b03      	ldr	r3, [pc, #12]	; (8005fd4 <HW_RTC_StopAlarm+0x28>)
 8005fc8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005fcc:	615a      	str	r2, [r3, #20]
}
 8005fce:	bd10      	pop	{r4, pc}
 8005fd0:	20000210 	.word	0x20000210
 8005fd4:	40010400 	.word	0x40010400

08005fd8 <HW_RTC_StartWakeUpAlarm>:
{
 8005fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fda:	b087      	sub	sp, #28
 8005fdc:	4604      	mov	r4, r0
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8005fde:	4f4d      	ldr	r7, [pc, #308]	; (8006114 <HW_RTC_StartWakeUpAlarm+0x13c>)
 8005fe0:	ad01      	add	r5, sp, #4
 8005fe2:	f107 0658 	add.w	r6, r7, #88	; 0x58
 8005fe6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005fe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8005fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fec:	9300      	str	r3, [sp, #0]
  HW_RTC_StopAlarm();
 8005fee:	f7ff ffdd 	bl	8005fac <HW_RTC_StopAlarm>
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 8005ff2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8005ff6:	f5c2 727f 	rsb	r2, r2, #1020	; 0x3fc
 8005ffa:	3203      	adds	r2, #3
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 8005ffc:	f3c4 0309 	ubfx	r3, r4, #0, #10
 8006000:	fa13 f282 	uxtah	r2, r3, r2
 8006004:	b292      	uxth	r2, r2
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 8006006:	0aa0      	lsrs	r0, r4, #10
  rtcAlarmDays =  RTC_DateStruct.Date;
 8006008:	f89d 1002 	ldrb.w	r1, [sp, #2]
  while (timeoutValue >= SECONDS_IN_1DAY)
 800600c:	e005      	b.n	800601a <HW_RTC_StartWakeUpAlarm+0x42>
    timeoutValue -= SECONDS_IN_1DAY;
 800600e:	f5a0 30a8 	sub.w	r0, r0, #86016	; 0x15000
 8006012:	f5a0 70c0 	sub.w	r0, r0, #384	; 0x180
    rtcAlarmDays++;
 8006016:	3101      	adds	r1, #1
 8006018:	b289      	uxth	r1, r1
  while (timeoutValue >= SECONDS_IN_1DAY)
 800601a:	4b3f      	ldr	r3, [pc, #252]	; (8006118 <HW_RTC_StartWakeUpAlarm+0x140>)
 800601c:	4298      	cmp	r0, r3
 800601e:	d8f6      	bhi.n	800600e <HW_RTC_StartWakeUpAlarm+0x36>
  rtcAlarmHours = RTC_TimeStruct.Hours;
 8006020:	f89d 5004 	ldrb.w	r5, [sp, #4]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8006024:	e003      	b.n	800602e <HW_RTC_StartWakeUpAlarm+0x56>
    timeoutValue -= SECONDS_IN_1HOUR;
 8006026:	f5a0 6061 	sub.w	r0, r0, #3600	; 0xe10
    rtcAlarmHours++;
 800602a:	3501      	adds	r5, #1
 800602c:	b2ad      	uxth	r5, r5
  while (timeoutValue >= SECONDS_IN_1HOUR)
 800602e:	f5b0 6f61 	cmp.w	r0, #3600	; 0xe10
 8006032:	d2f8      	bcs.n	8006026 <HW_RTC_StartWakeUpAlarm+0x4e>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8006034:	f89d 4005 	ldrb.w	r4, [sp, #5]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8006038:	e002      	b.n	8006040 <HW_RTC_StartWakeUpAlarm+0x68>
    timeoutValue -= SECONDS_IN_1MINUTE;
 800603a:	383c      	subs	r0, #60	; 0x3c
    rtcAlarmMinutes++;
 800603c:	3401      	adds	r4, #1
 800603e:	b2a4      	uxth	r4, r4
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8006040:	283b      	cmp	r0, #59	; 0x3b
 8006042:	d8fa      	bhi.n	800603a <HW_RTC_StartWakeUpAlarm+0x62>
  rtcAlarmSeconds =  RTC_TimeStruct.Seconds + timeoutValue;
 8006044:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006048:	fa13 f080 	uxtah	r0, r3, r0
 800604c:	b283      	uxth	r3, r0
  while (rtcAlarmSubSeconds >= (PREDIV_S + 1))
 800604e:	e004      	b.n	800605a <HW_RTC_StartWakeUpAlarm+0x82>
    rtcAlarmSubSeconds -= (PREDIV_S + 1);
 8006050:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8006054:	b292      	uxth	r2, r2
    rtcAlarmSeconds++;
 8006056:	3301      	adds	r3, #1
 8006058:	b29b      	uxth	r3, r3
  while (rtcAlarmSubSeconds >= (PREDIV_S + 1))
 800605a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800605e:	d2f7      	bcs.n	8006050 <HW_RTC_StartWakeUpAlarm+0x78>
 8006060:	e003      	b.n	800606a <HW_RTC_StartWakeUpAlarm+0x92>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8006062:	3b3c      	subs	r3, #60	; 0x3c
 8006064:	b29b      	uxth	r3, r3
    rtcAlarmMinutes++;
 8006066:	3401      	adds	r4, #1
 8006068:	b2a4      	uxth	r4, r4
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 800606a:	2b3b      	cmp	r3, #59	; 0x3b
 800606c:	d8f9      	bhi.n	8006062 <HW_RTC_StartWakeUpAlarm+0x8a>
 800606e:	e003      	b.n	8006078 <HW_RTC_StartWakeUpAlarm+0xa0>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8006070:	3c3c      	subs	r4, #60	; 0x3c
 8006072:	b2a4      	uxth	r4, r4
    rtcAlarmHours++;
 8006074:	1c68      	adds	r0, r5, #1
 8006076:	b285      	uxth	r5, r0
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8006078:	2c3b      	cmp	r4, #59	; 0x3b
 800607a:	d8f9      	bhi.n	8006070 <HW_RTC_StartWakeUpAlarm+0x98>
 800607c:	e004      	b.n	8006088 <HW_RTC_StartWakeUpAlarm+0xb0>
    rtcAlarmHours -= HOURS_IN_1DAY;
 800607e:	f1a5 0018 	sub.w	r0, r5, #24
 8006082:	b285      	uxth	r5, r0
    rtcAlarmDays++;
 8006084:	3101      	adds	r1, #1
 8006086:	b289      	uxth	r1, r1
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8006088:	2d17      	cmp	r5, #23
 800608a:	d8f8      	bhi.n	800607e <HW_RTC_StartWakeUpAlarm+0xa6>
  if (RTC_DateStruct.Year % 4 == 0)
 800608c:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8006090:	f010 0f03 	tst.w	r0, #3
 8006094:	d10d      	bne.n	80060b2 <HW_RTC_StartWakeUpAlarm+0xda>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8006096:	f89d 0001 	ldrb.w	r0, [sp, #1]
 800609a:	3801      	subs	r0, #1
 800609c:	4e1f      	ldr	r6, [pc, #124]	; (800611c <HW_RTC_StartWakeUpAlarm+0x144>)
 800609e:	5c30      	ldrb	r0, [r6, r0]
 80060a0:	b286      	uxth	r6, r0
 80060a2:	428e      	cmp	r6, r1
 80060a4:	d213      	bcs.n	80060ce <HW_RTC_StartWakeUpAlarm+0xf6>
      rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
 80060a6:	fb91 f6f0 	sdiv	r6, r1, r0
 80060aa:	fb00 1116 	mls	r1, r0, r6, r1
 80060ae:	b289      	uxth	r1, r1
 80060b0:	e00d      	b.n	80060ce <HW_RTC_StartWakeUpAlarm+0xf6>
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 80060b2:	f89d 0001 	ldrb.w	r0, [sp, #1]
 80060b6:	1e46      	subs	r6, r0, #1
 80060b8:	4818      	ldr	r0, [pc, #96]	; (800611c <HW_RTC_StartWakeUpAlarm+0x144>)
 80060ba:	4430      	add	r0, r6
 80060bc:	7b00      	ldrb	r0, [r0, #12]
 80060be:	b286      	uxth	r6, r0
 80060c0:	428e      	cmp	r6, r1
 80060c2:	d204      	bcs.n	80060ce <HW_RTC_StartWakeUpAlarm+0xf6>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 80060c4:	fb91 f6f0 	sdiv	r6, r1, r0
 80060c8:	fb00 1116 	mls	r1, r0, r6, r1
 80060cc:	b289      	uxth	r1, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S - rtcAlarmSubSeconds;
 80060ce:	f5c2 727f 	rsb	r2, r2, #1020	; 0x3fc
 80060d2:	3203      	adds	r2, #3
 80060d4:	480f      	ldr	r0, [pc, #60]	; (8006114 <HW_RTC_StartWakeUpAlarm+0x13c>)
 80060d6:	62c2      	str	r2, [r0, #44]	; 0x2c
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK;
 80060d8:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80060dc:	6402      	str	r2, [r0, #64]	; 0x40
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 80060de:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 80060e2:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 80060e6:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80060ea:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80060ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80060f2:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80060f6:	2200      	movs	r2, #0
 80060f8:	6442      	str	r2, [r0, #68]	; 0x44
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 80060fa:	63c2      	str	r2, [r0, #60]	; 0x3c
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80060fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006100:	64c3      	str	r3, [r0, #76]	; 0x4c
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006102:	6342      	str	r2, [r0, #52]	; 0x34
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006104:	6382      	str	r2, [r0, #56]	; 0x38
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8006106:	f100 0128 	add.w	r1, r0, #40	; 0x28
 800610a:	f7fe fd13 	bl	8004b34 <HAL_RTC_SetAlarm_IT>
}
 800610e:	b007      	add	sp, #28
 8006110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006112:	bf00      	nop
 8006114:	20000210 	.word	0x20000210
 8006118:	0001517f 	.word	0x0001517f
 800611c:	08008224 	.word	0x08008224

08006120 <HW_RTC_SetAlarm>:
{
 8006120:	b538      	push	{r3, r4, r5, lr}
 8006122:	4605      	mov	r5, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 8006124:	4b0f      	ldr	r3, [pc, #60]	; (8006164 <HW_RTC_SetAlarm+0x44>)
 8006126:	f9b3 4050 	ldrsh.w	r4, [r3, #80]	; 0x50
 800612a:	3403      	adds	r4, #3
 800612c:	f7ff ff26 	bl	8005f7c <HW_RTC_GetTimerElapsedTime>
 8006130:	1a28      	subs	r0, r5, r0
 8006132:	4284      	cmp	r4, r0
 8006134:	d20b      	bcs.n	800614e <HW_RTC_SetAlarm+0x2e>
    LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 8006136:	2100      	movs	r1, #0
 8006138:	2004      	movs	r0, #4
 800613a:	f000 f95b 	bl	80063f4 <LPM_SetStopMode>
  if (LPM_GetMode() == LPM_StopMode)
 800613e:	f000 f96f 	bl	8006420 <LPM_GetMode>
 8006142:	2801      	cmp	r0, #1
 8006144:	d008      	beq.n	8006158 <HW_RTC_SetAlarm+0x38>
  HW_RTC_StartWakeUpAlarm(timeout);
 8006146:	4628      	mov	r0, r5
 8006148:	f7ff ff46 	bl	8005fd8 <HW_RTC_StartWakeUpAlarm>
}
 800614c:	bd38      	pop	{r3, r4, r5, pc}
    LPM_SetStopMode(LPM_RTC_Id, LPM_Disable);
 800614e:	2101      	movs	r1, #1
 8006150:	2004      	movs	r0, #4
 8006152:	f000 f94f 	bl	80063f4 <LPM_SetStopMode>
 8006156:	e7f2      	b.n	800613e <HW_RTC_SetAlarm+0x1e>
    timeout = timeout -  McuWakeUpTimeCal;
 8006158:	4b02      	ldr	r3, [pc, #8]	; (8006164 <HW_RTC_SetAlarm+0x44>)
 800615a:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800615e:	1aed      	subs	r5, r5, r3
 8006160:	e7f1      	b.n	8006146 <HW_RTC_SetAlarm+0x26>
 8006162:	bf00      	nop
 8006164:	20000210 	.word	0x20000210

08006168 <HW_RTC_IrqHandler>:
{
 8006168:	b508      	push	{r3, lr}
  LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 800616a:	2100      	movs	r1, #0
 800616c:	2004      	movs	r0, #4
 800616e:	f000 f941 	bl	80063f4 <LPM_SetStopMode>
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006172:	4b0c      	ldr	r3, [pc, #48]	; (80061a4 <HW_RTC_IrqHandler+0x3c>)
 8006174:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006178:	615a      	str	r2, [r3, #20]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 800617a:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <HW_RTC_IrqHandler+0x40>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689a      	ldr	r2, [r3, #8]
 8006180:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8006184:	d003      	beq.n	800618e <HW_RTC_IrqHandler+0x26>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8006186:	68da      	ldr	r2, [r3, #12]
 8006188:	f412 7f80 	tst.w	r2, #256	; 0x100
 800618c:	d100      	bne.n	8006190 <HW_RTC_IrqHandler+0x28>
}
 800618e:	bd08      	pop	{r3, pc}
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006190:	68da      	ldr	r2, [r3, #12]
 8006192:	b2d2      	uxtb	r2, r2
 8006194:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006198:	60da      	str	r2, [r3, #12]
      HAL_RTC_AlarmAEventCallback(hrtc);
 800619a:	4803      	ldr	r0, [pc, #12]	; (80061a8 <HW_RTC_IrqHandler+0x40>)
 800619c:	f000 fc94 	bl	8006ac8 <HAL_RTC_AlarmAEventCallback>
}
 80061a0:	e7f5      	b.n	800618e <HW_RTC_IrqHandler+0x26>
 80061a2:	bf00      	nop
 80061a4:	40010400 	.word	0x40010400
 80061a8:	20000210 	.word	0x20000210

080061ac <HW_RTC_DelayMs>:
{
 80061ac:	b538      	push	{r3, r4, r5, lr}
  delayValue = HW_RTC_ms2Tick(delay);
 80061ae:	f7ff fed1 	bl	8005f54 <HW_RTC_ms2Tick>
 80061b2:	4605      	mov	r5, r0
  timeout = HW_RTC_GetTimerValue();
 80061b4:	f7ff fef0 	bl	8005f98 <HW_RTC_GetTimerValue>
 80061b8:	4604      	mov	r4, r0
  while (((HW_RTC_GetTimerValue() - timeout)) < delayValue)
 80061ba:	e000      	b.n	80061be <HW_RTC_DelayMs+0x12>
    __NOP();
 80061bc:	bf00      	nop
  while (((HW_RTC_GetTimerValue() - timeout)) < delayValue)
 80061be:	f7ff feeb 	bl	8005f98 <HW_RTC_GetTimerValue>
 80061c2:	1b00      	subs	r0, r0, r4
 80061c4:	42a8      	cmp	r0, r5
 80061c6:	d3f9      	bcc.n	80061bc <HW_RTC_DelayMs+0x10>
}
 80061c8:	bd38      	pop	{r3, r4, r5, pc}
	...

080061cc <HW_RTC_SetTimerContext>:
{
 80061cc:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = (uint32_t) HW_RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 80061ce:	4c04      	ldr	r4, [pc, #16]	; (80061e0 <HW_RTC_SetTimerContext+0x14>)
 80061d0:	f104 0158 	add.w	r1, r4, #88	; 0x58
 80061d4:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 80061d8:	f7ff fe58 	bl	8005e8c <HW_RTC_GetCalendarValue>
 80061dc:	6560      	str	r0, [r4, #84]	; 0x54
}
 80061de:	bd10      	pop	{r4, pc}
 80061e0:	20000210 	.word	0x20000210

080061e4 <HW_RTC_Init>:
{
 80061e4:	b508      	push	{r3, lr}
  if (HW_RTC_Initalized == false)
 80061e6:	4b08      	ldr	r3, [pc, #32]	; (8006208 <HW_RTC_Init+0x24>)
 80061e8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80061ec:	b103      	cbz	r3, 80061f0 <HW_RTC_Init+0xc>
}
 80061ee:	bd08      	pop	{r3, pc}
    HW_RTC_SetConfig();
 80061f0:	f7ff fe08 	bl	8005e04 <HW_RTC_SetConfig>
    HW_RTC_SetAlarmConfig();
 80061f4:	f7ff fe40 	bl	8005e78 <HW_RTC_SetAlarmConfig>
    HW_RTC_SetTimerContext();
 80061f8:	f7ff ffe8 	bl	80061cc <HW_RTC_SetTimerContext>
    HW_RTC_Initalized = true;
 80061fc:	4b02      	ldr	r3, [pc, #8]	; (8006208 <HW_RTC_Init+0x24>)
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 8006204:	e7f3      	b.n	80061ee <HW_RTC_Init+0xa>
 8006206:	bf00      	nop
 8006208:	20000210 	.word	0x20000210

0800620c <HW_RTC_GetTimerContext>:
}
 800620c:	4b01      	ldr	r3, [pc, #4]	; (8006214 <HW_RTC_GetTimerContext+0x8>)
 800620e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	20000210 	.word	0x20000210

08006218 <SpiFrequency>:
/* Private functions ---------------------------------------------------------*/

static uint32_t SpiFrequency(uint32_t hz)
{
  uint32_t divisor = 0;
  uint32_t SysClkTmp = SystemCoreClock;
 8006218:	4b0b      	ldr	r3, [pc, #44]	; (8006248 <SpiFrequency+0x30>)
 800621a:	681a      	ldr	r2, [r3, #0]
  uint32_t divisor = 0;
 800621c:	2300      	movs	r3, #0
  uint32_t baudRate;

  while (SysClkTmp > hz)
 800621e:	4282      	cmp	r2, r0
 8006220:	d903      	bls.n	800622a <SpiFrequency+0x12>
  {
    divisor++;
 8006222:	3301      	adds	r3, #1
    SysClkTmp = (SysClkTmp >> 1);
 8006224:	0852      	lsrs	r2, r2, #1

    if (divisor >= 7)
 8006226:	2b06      	cmp	r3, #6
 8006228:	d9f9      	bls.n	800621e <SpiFrequency+0x6>
    {
      break;
    }
  }

  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 800622a:	f013 0004 	ands.w	r0, r3, #4
 800622e:	d000      	beq.n	8006232 <SpiFrequency+0x1a>
 8006230:	2020      	movs	r0, #32
             (((divisor & 0x2) == 0) ? 0x0 : SPI_CR1_BR_1) |
 8006232:	f013 0202 	ands.w	r2, r3, #2
 8006236:	d000      	beq.n	800623a <SpiFrequency+0x22>
 8006238:	2210      	movs	r2, #16
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 800623a:	4310      	orrs	r0, r2
             (((divisor & 0x1) == 0) ? 0x0 : SPI_CR1_BR_0);
 800623c:	f013 0301 	ands.w	r3, r3, #1
 8006240:	d000      	beq.n	8006244 <SpiFrequency+0x2c>
 8006242:	2308      	movs	r3, #8

  return baudRate;
}
 8006244:	4318      	orrs	r0, r3
 8006246:	4770      	bx	lr
 8006248:	2000003c 	.word	0x2000003c

0800624c <HW_SPI_IoInit>:
{
 800624c:	b530      	push	{r4, r5, lr}
 800624e:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct = {0};
 8006250:	2400      	movs	r4, #0
 8006252:	9401      	str	r4, [sp, #4]
 8006254:	9403      	str	r4, [sp, #12]
  initStruct.Mode = GPIO_MODE_AF_PP;
 8006256:	2302      	movs	r3, #2
 8006258:	9302      	str	r3, [sp, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 800625a:	2303      	movs	r3, #3
 800625c:	9304      	str	r3, [sp, #16]
  initStruct.Alternate = SPI1_AF ;
 800625e:	2305      	movs	r3, #5
 8006260:	9305      	str	r3, [sp, #20]
  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 8006262:	aa01      	add	r2, sp, #4
 8006264:	2120      	movs	r1, #32
 8006266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800626a:	f7ff fd49 	bl	8005d00 <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 800626e:	aa01      	add	r2, sp, #4
 8006270:	2140      	movs	r1, #64	; 0x40
 8006272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006276:	f7ff fd43 	bl	8005d00 <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 800627a:	aa01      	add	r2, sp, #4
 800627c:	2180      	movs	r1, #128	; 0x80
 800627e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006282:	f7ff fd3d 	bl	8005d00 <HW_GPIO_Init>
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006286:	2501      	movs	r5, #1
 8006288:	9502      	str	r5, [sp, #8]
  initStruct.Pull = GPIO_NOPULL;
 800628a:	9403      	str	r4, [sp, #12]
  HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 800628c:	4c06      	ldr	r4, [pc, #24]	; (80062a8 <HW_SPI_IoInit+0x5c>)
 800628e:	aa01      	add	r2, sp, #4
 8006290:	2140      	movs	r1, #64	; 0x40
 8006292:	4620      	mov	r0, r4
 8006294:	f7ff fd34 	bl	8005d00 <HW_GPIO_Init>
  HW_GPIO_Write(RADIO_NSS_PORT, RADIO_NSS_PIN, 1);
 8006298:	462a      	mov	r2, r5
 800629a:	2140      	movs	r1, #64	; 0x40
 800629c:	4620      	mov	r0, r4
 800629e:	f7ff fdab 	bl	8005df8 <HW_GPIO_Write>
}
 80062a2:	b007      	add	sp, #28
 80062a4:	bd30      	pop	{r4, r5, pc}
 80062a6:	bf00      	nop
 80062a8:	48000400 	.word	0x48000400

080062ac <HW_SPI_Init>:
{
 80062ac:	b510      	push	{r4, lr}
 80062ae:	b082      	sub	sp, #8
  hspi.Instance = SPI1;
 80062b0:	4c17      	ldr	r4, [pc, #92]	; (8006310 <HW_SPI_Init+0x64>)
 80062b2:	4b18      	ldr	r3, [pc, #96]	; (8006314 <HW_SPI_Init+0x68>)
 80062b4:	6023      	str	r3, [r4, #0]
  hspi.Init.BaudRatePrescaler = SpiFrequency(10000000);
 80062b6:	4818      	ldr	r0, [pc, #96]	; (8006318 <HW_SPI_Init+0x6c>)
 80062b8:	f7ff ffae 	bl	8006218 <SpiFrequency>
 80062bc:	61e0      	str	r0, [r4, #28]
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 80062be:	2300      	movs	r3, #0
 80062c0:	60a3      	str	r3, [r4, #8]
  hspi.Init.Mode           = SPI_MODE_MASTER;
 80062c2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80062c6:	6062      	str	r2, [r4, #4]
  hspi.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80062c8:	6123      	str	r3, [r4, #16]
  hspi.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80062ca:	6163      	str	r3, [r4, #20]
  hspi.Init.DataSize       = SPI_DATASIZE_8BIT;
 80062cc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80062d0:	60e2      	str	r2, [r4, #12]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062d2:	62a3      	str	r3, [r4, #40]	; 0x28
  hspi.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80062d4:	6223      	str	r3, [r4, #32]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 80062d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062da:	61a2      	str	r2, [r4, #24]
  hspi.Init.TIMode         = SPI_TIMODE_DISABLE;
 80062dc:	6263      	str	r3, [r4, #36]	; 0x24
  SPI_CLK_ENABLE();
 80062de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062e2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80062e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80062e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062ec:	661a      	str	r2, [r3, #96]	; 0x60
 80062ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062f4:	9301      	str	r3, [sp, #4]
 80062f6:	9b01      	ldr	r3, [sp, #4]
  if (HAL_SPI_Init(&hspi) != HAL_OK)
 80062f8:	4620      	mov	r0, r4
 80062fa:	f7fe fe27 	bl	8004f4c <HAL_SPI_Init>
 80062fe:	b918      	cbnz	r0, 8006308 <HW_SPI_Init+0x5c>
  HW_SPI_IoInit();
 8006300:	f7ff ffa4 	bl	800624c <HW_SPI_IoInit>
}
 8006304:	b002      	add	sp, #8
 8006306:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006308:	f7ff fcd2 	bl	8005cb0 <Error_Handler>
 800630c:	e7f8      	b.n	8006300 <HW_SPI_Init+0x54>
 800630e:	bf00      	nop
 8006310:	20000284 	.word	0x20000284
 8006314:	40013000 	.word	0x40013000
 8006318:	00989680 	.word	0x00989680

0800631c <HW_SPI_IoDeInit>:
{
 800631c:	b530      	push	{r4, r5, lr}
 800631e:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct = {0};
 8006320:	2400      	movs	r4, #0
 8006322:	9401      	str	r4, [sp, #4]
 8006324:	9403      	str	r4, [sp, #12]
 8006326:	9404      	str	r4, [sp, #16]
 8006328:	9405      	str	r4, [sp, #20]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800632a:	2501      	movs	r5, #1
 800632c:	9502      	str	r5, [sp, #8]
  HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 800632e:	aa01      	add	r2, sp, #4
 8006330:	2180      	movs	r1, #128	; 0x80
 8006332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006336:	f7ff fce3 	bl	8005d00 <HW_GPIO_Init>
  HW_GPIO_Write(RADIO_MOSI_PORT, RADIO_MOSI_PIN, 0);
 800633a:	4622      	mov	r2, r4
 800633c:	2180      	movs	r1, #128	; 0x80
 800633e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006342:	f7ff fd59 	bl	8005df8 <HW_GPIO_Write>
  initStruct.Pull = GPIO_PULLDOWN;
 8006346:	2302      	movs	r3, #2
 8006348:	9303      	str	r3, [sp, #12]
  HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 800634a:	aa01      	add	r2, sp, #4
 800634c:	2140      	movs	r1, #64	; 0x40
 800634e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006352:	f7ff fcd5 	bl	8005d00 <HW_GPIO_Init>
  HW_GPIO_Write(RADIO_MISO_PORT, RADIO_MISO_PIN, 0);
 8006356:	4622      	mov	r2, r4
 8006358:	2140      	movs	r1, #64	; 0x40
 800635a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800635e:	f7ff fd4b 	bl	8005df8 <HW_GPIO_Write>
  initStruct.Pull = GPIO_NOPULL  ;
 8006362:	9403      	str	r4, [sp, #12]
  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 8006364:	aa01      	add	r2, sp, #4
 8006366:	2120      	movs	r1, #32
 8006368:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800636c:	f7ff fcc8 	bl	8005d00 <HW_GPIO_Init>
  HW_GPIO_Write(RADIO_SCLK_PORT, RADIO_SCLK_PIN, 0);
 8006370:	4622      	mov	r2, r4
 8006372:	2120      	movs	r1, #32
 8006374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006378:	f7ff fd3e 	bl	8005df8 <HW_GPIO_Write>
  initStruct.Pull = GPIO_NOPULL  ;
 800637c:	9403      	str	r4, [sp, #12]
  HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 800637e:	4c06      	ldr	r4, [pc, #24]	; (8006398 <HW_SPI_IoDeInit+0x7c>)
 8006380:	aa01      	add	r2, sp, #4
 8006382:	2140      	movs	r1, #64	; 0x40
 8006384:	4620      	mov	r0, r4
 8006386:	f7ff fcbb 	bl	8005d00 <HW_GPIO_Init>
  HW_GPIO_Write(RADIO_NSS_PORT, RADIO_NSS_PIN, 1);
 800638a:	462a      	mov	r2, r5
 800638c:	2140      	movs	r1, #64	; 0x40
 800638e:	4620      	mov	r0, r4
 8006390:	f7ff fd32 	bl	8005df8 <HW_GPIO_Write>
}
 8006394:	b007      	add	sp, #28
 8006396:	bd30      	pop	{r4, r5, pc}
 8006398:	48000400 	.word	0x48000400

0800639c <HW_SPI_InOut>:
{
 800639c:	b500      	push	{lr}
 800639e:	b087      	sub	sp, #28
 80063a0:	f8ad 000e 	strh.w	r0, [sp, #14]
  HAL_SPI_TransmitReceive(&hspi, (uint8_t *) &txData, (uint8_t *) &rxData, 1, HAL_MAX_DELAY);
 80063a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	2301      	movs	r3, #1
 80063ac:	f10d 0216 	add.w	r2, sp, #22
 80063b0:	f10d 010e 	add.w	r1, sp, #14
 80063b4:	4803      	ldr	r0, [pc, #12]	; (80063c4 <HW_SPI_InOut+0x28>)
 80063b6:	f7fe fe21 	bl	8004ffc <HAL_SPI_TransmitReceive>
}
 80063ba:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80063be:	b007      	add	sp, #28
 80063c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80063c4:	20000284 	.word	0x20000284

080063c8 <LPM_SetOffMode>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063c8:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80063cc:	b672      	cpsid	i
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 80063ce:	b141      	cbz	r1, 80063e2 <LPM_SetOffMode+0x1a>
 80063d0:	2901      	cmp	r1, #1
 80063d2:	d103      	bne.n	80063dc <LPM_SetOffMode+0x14>
  {
    case LPM_Disable:
    {
      OffModeDisable |= (uint32_t)id;
 80063d4:	4906      	ldr	r1, [pc, #24]	; (80063f0 <LPM_SetOffMode+0x28>)
 80063d6:	680a      	ldr	r2, [r1, #0]
 80063d8:	4310      	orrs	r0, r2
 80063da:	6008      	str	r0, [r1, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063dc:	f383 8810 	msr	PRIMASK, r3
  }
  
  RESTORE_PRIMASK( );

  return;
}
 80063e0:	4770      	bx	lr
      OffModeDisable &= ~(uint32_t)id;
 80063e2:	4903      	ldr	r1, [pc, #12]	; (80063f0 <LPM_SetOffMode+0x28>)
 80063e4:	680a      	ldr	r2, [r1, #0]
 80063e6:	ea22 0000 	bic.w	r0, r2, r0
 80063ea:	6008      	str	r0, [r1, #0]
      break;
 80063ec:	e7f6      	b.n	80063dc <LPM_SetOffMode+0x14>
 80063ee:	bf00      	nop
 80063f0:	200002e8 	.word	0x200002e8

080063f4 <LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063f4:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80063f8:	b672      	cpsid	i
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 80063fa:	b141      	cbz	r1, 800640e <LPM_SetStopMode+0x1a>
 80063fc:	2901      	cmp	r1, #1
 80063fe:	d103      	bne.n	8006408 <LPM_SetStopMode+0x14>
  {
    case LPM_Disable:
    {
      StopModeDisable |= (uint32_t)id;
 8006400:	4906      	ldr	r1, [pc, #24]	; (800641c <LPM_SetStopMode+0x28>)
 8006402:	684a      	ldr	r2, [r1, #4]
 8006404:	4310      	orrs	r0, r2
 8006406:	6048      	str	r0, [r1, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006408:	f383 8810 	msr	PRIMASK, r3
      break;
  }
  RESTORE_PRIMASK( );

  return;
}
 800640c:	4770      	bx	lr
      StopModeDisable &= ~(uint32_t)id;
 800640e:	4903      	ldr	r1, [pc, #12]	; (800641c <LPM_SetStopMode+0x28>)
 8006410:	684a      	ldr	r2, [r1, #4]
 8006412:	ea22 0000 	bic.w	r0, r2, r0
 8006416:	6048      	str	r0, [r1, #4]
      break;
 8006418:	e7f6      	b.n	8006408 <LPM_SetStopMode+0x14>
 800641a:	bf00      	nop
 800641c:	200002e8 	.word	0x200002e8

08006420 <LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006420:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006424:	b672      	cpsid	i

  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );

  if(StopModeDisable )
 8006426:	4a07      	ldr	r2, [pc, #28]	; (8006444 <LPM_GetMode+0x24>)
 8006428:	6852      	ldr	r2, [r2, #4]
 800642a:	b922      	cbnz	r2, 8006436 <LPM_GetMode+0x16>
  {
    mode_selected = LPM_SleepMode;
  }
  else
  {
    if(OffModeDisable)
 800642c:	4a05      	ldr	r2, [pc, #20]	; (8006444 <LPM_GetMode+0x24>)
 800642e:	6812      	ldr	r2, [r2, #0]
 8006430:	b12a      	cbz	r2, 800643e <LPM_GetMode+0x1e>
    {
      mode_selected = LPM_StopMode;
 8006432:	2001      	movs	r0, #1
 8006434:	e000      	b.n	8006438 <LPM_GetMode+0x18>
    mode_selected = LPM_SleepMode;
 8006436:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006438:	f383 8810 	msr	PRIMASK, r3
  }

  RESTORE_PRIMASK( );

  return mode_selected;
}
 800643c:	4770      	bx	lr
      mode_selected = LPM_OffMode;
 800643e:	2002      	movs	r0, #2
 8006440:	e7fa      	b.n	8006438 <LPM_GetMode+0x18>
 8006442:	bf00      	nop
 8006444:	200002e8 	.word	0x200002e8

08006448 <LPM_ExitSleepMode>:

__weak void LPM_EnterSleepMode(void) {}
__weak void LPM_ExitSleepMode(void) {}
 8006448:	4770      	bx	lr

0800644a <LPM_EnterOffMode>:
__weak void LPM_EnterStopMode(void) {}
__weak void LPM_ExitStopMode(void) {}
__weak void LPM_EnterOffMode(void) {}
 800644a:	4770      	bx	lr

0800644c <LPM_ExitOffMode>:
__weak void LPM_ExitOffMode(void) {}
 800644c:	4770      	bx	lr
	...

08006450 <LPM_EnterLowPower>:
{
 8006450:	b508      	push	{r3, lr}
  if( StopModeDisable )
 8006452:	4b0a      	ldr	r3, [pc, #40]	; (800647c <LPM_EnterLowPower+0x2c>)
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	b93b      	cbnz	r3, 8006468 <LPM_EnterLowPower+0x18>
    if( OffModeDisable )
 8006458:	4b08      	ldr	r3, [pc, #32]	; (800647c <LPM_EnterLowPower+0x2c>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	b94b      	cbnz	r3, 8006472 <LPM_EnterLowPower+0x22>
      LPM_EnterOffMode();
 800645e:	f7ff fff4 	bl	800644a <LPM_EnterOffMode>
      LPM_ExitOffMode();
 8006462:	f7ff fff3 	bl	800644c <LPM_ExitOffMode>
}
 8006466:	bd08      	pop	{r3, pc}
    LPM_EnterSleepMode();
 8006468:	f000 fcfe 	bl	8006e68 <LPM_EnterSleepMode>
    LPM_ExitSleepMode();
 800646c:	f7ff ffec 	bl	8006448 <LPM_ExitSleepMode>
 8006470:	e7f9      	b.n	8006466 <LPM_EnterLowPower+0x16>
      LPM_EnterStopMode();
 8006472:	f000 fca7 	bl	8006dc4 <LPM_EnterStopMode>
      LPM_ExitStopMode();
 8006476:	f000 fcb5 	bl	8006de4 <LPM_ExitStopMode>
 800647a:	e7f4      	b.n	8006466 <LPM_EnterLowPower+0x16>
 800647c:	200002e8 	.word	0x200002e8

08006480 <OnledEvent>:
  State = RX_ERROR;
  PRINTF("OnRxError\n\r");
}

static void OnledEvent(void *context)
{
 8006480:	b508      	push	{r3, lr}
  LED_Toggle(LED_BLUE) ;
  LED_Toggle(LED_RED1) ;
  LED_Toggle(LED_RED2) ;
  LED_Toggle(LED_GREEN) ;

  TimerStart(&timerLed);
 8006482:	4802      	ldr	r0, [pc, #8]	; (800648c <OnledEvent+0xc>)
 8006484:	f000 fdb0 	bl	8006fe8 <TimerStart>
}
 8006488:	bd08      	pop	{r3, pc}
 800648a:	bf00      	nop
 800648c:	200002f0 	.word	0x200002f0

08006490 <OnTxDone>:
{
 8006490:	b508      	push	{r3, lr}
  Radio.Sleep();
 8006492:	4b05      	ldr	r3, [pc, #20]	; (80064a8 <OnTxDone+0x18>)
 8006494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006496:	4798      	blx	r3
  State = TX;
 8006498:	4b04      	ldr	r3, [pc, #16]	; (80064ac <OnTxDone+0x1c>)
 800649a:	2204      	movs	r2, #4
 800649c:	761a      	strb	r2, [r3, #24]
  PRINTF("OnTxDone\n\r");
 800649e:	4804      	ldr	r0, [pc, #16]	; (80064b0 <OnTxDone+0x20>)
 80064a0:	f000 feb2 	bl	8007208 <TraceSend>
}
 80064a4:	bd08      	pop	{r3, pc}
 80064a6:	bf00      	nop
 80064a8:	080081b0 	.word	0x080081b0
 80064ac:	200002f0 	.word	0x200002f0
 80064b0:	080082a4 	.word	0x080082a4

080064b4 <OnTxTimeout>:
{
 80064b4:	b508      	push	{r3, lr}
  Radio.Sleep();
 80064b6:	4b05      	ldr	r3, [pc, #20]	; (80064cc <OnTxTimeout+0x18>)
 80064b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ba:	4798      	blx	r3
  State = TX_TIMEOUT;
 80064bc:	4b04      	ldr	r3, [pc, #16]	; (80064d0 <OnTxTimeout+0x1c>)
 80064be:	2205      	movs	r2, #5
 80064c0:	761a      	strb	r2, [r3, #24]
  PRINTF("OnTxTimeout\n\r");
 80064c2:	4804      	ldr	r0, [pc, #16]	; (80064d4 <OnTxTimeout+0x20>)
 80064c4:	f000 fea0 	bl	8007208 <TraceSend>
}
 80064c8:	bd08      	pop	{r3, pc}
 80064ca:	bf00      	nop
 80064cc:	080081b0 	.word	0x080081b0
 80064d0:	200002f0 	.word	0x200002f0
 80064d4:	080082b0 	.word	0x080082b0

080064d8 <OnRxTimeout>:
{
 80064d8:	b508      	push	{r3, lr}
  Radio.Sleep();
 80064da:	4b05      	ldr	r3, [pc, #20]	; (80064f0 <OnRxTimeout+0x18>)
 80064dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064de:	4798      	blx	r3
  State = RX_TIMEOUT;
 80064e0:	4b04      	ldr	r3, [pc, #16]	; (80064f4 <OnRxTimeout+0x1c>)
 80064e2:	2202      	movs	r2, #2
 80064e4:	761a      	strb	r2, [r3, #24]
  PRINTF("OnRxTimeout\n\r");
 80064e6:	4804      	ldr	r0, [pc, #16]	; (80064f8 <OnRxTimeout+0x20>)
 80064e8:	f000 fe8e 	bl	8007208 <TraceSend>
}
 80064ec:	bd08      	pop	{r3, pc}
 80064ee:	bf00      	nop
 80064f0:	080081b0 	.word	0x080081b0
 80064f4:	200002f0 	.word	0x200002f0
 80064f8:	080082c0 	.word	0x080082c0

080064fc <OnRxError>:
{
 80064fc:	b508      	push	{r3, lr}
  Radio.Sleep();
 80064fe:	4b05      	ldr	r3, [pc, #20]	; (8006514 <OnRxError+0x18>)
 8006500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006502:	4798      	blx	r3
  State = RX_ERROR;
 8006504:	4b04      	ldr	r3, [pc, #16]	; (8006518 <OnRxError+0x1c>)
 8006506:	2203      	movs	r2, #3
 8006508:	761a      	strb	r2, [r3, #24]
  PRINTF("OnRxError\n\r");
 800650a:	4804      	ldr	r0, [pc, #16]	; (800651c <OnRxError+0x20>)
 800650c:	f000 fe7c 	bl	8007208 <TraceSend>
}
 8006510:	bd08      	pop	{r3, pc}
 8006512:	bf00      	nop
 8006514:	080081b0 	.word	0x080081b0
 8006518:	200002f0 	.word	0x200002f0
 800651c:	080082d0 	.word	0x080082d0

08006520 <OnRxDone>:
{
 8006520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006522:	4607      	mov	r7, r0
 8006524:	460e      	mov	r6, r1
 8006526:	4614      	mov	r4, r2
 8006528:	461d      	mov	r5, r3
  Radio.Sleep();
 800652a:	4b0c      	ldr	r3, [pc, #48]	; (800655c <OnRxDone+0x3c>)
 800652c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800652e:	4798      	blx	r3
  BufferSize = size;
 8006530:	4b0b      	ldr	r3, [pc, #44]	; (8006560 <OnRxDone+0x40>)
 8006532:	801e      	strh	r6, [r3, #0]
  memcpy(Buffer, payload, BufferSize);
 8006534:	4632      	mov	r2, r6
 8006536:	4639      	mov	r1, r7
 8006538:	480a      	ldr	r0, [pc, #40]	; (8006564 <OnRxDone+0x44>)
 800653a:	f001 f823 	bl	8007584 <memcpy>
  RssiValue = rssi;
 800653e:	4b0a      	ldr	r3, [pc, #40]	; (8006568 <OnRxDone+0x48>)
 8006540:	765c      	strb	r4, [r3, #25]
  SnrValue = snr;
 8006542:	769d      	strb	r5, [r3, #26]
  State = RX;
 8006544:	2201      	movs	r2, #1
 8006546:	761a      	strb	r2, [r3, #24]
  PRINTF("OnRxDone\n\r");
 8006548:	4808      	ldr	r0, [pc, #32]	; (800656c <OnRxDone+0x4c>)
 800654a:	f000 fe5d 	bl	8007208 <TraceSend>
  PRINTF("RssiValue=%d dBm, SnrValue=%d\n\r", rssi, snr);
 800654e:	462a      	mov	r2, r5
 8006550:	4621      	mov	r1, r4
 8006552:	4807      	ldr	r0, [pc, #28]	; (8006570 <OnRxDone+0x50>)
 8006554:	f000 fe58 	bl	8007208 <TraceSend>
}
 8006558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800655a:	bf00      	nop
 800655c:	080081b0 	.word	0x080081b0
 8006560:	20000038 	.word	0x20000038
 8006564:	20000630 	.word	0x20000630
 8006568:	200002f0 	.word	0x200002f0
 800656c:	080082dc 	.word	0x080082dc
 8006570:	080082e8 	.word	0x080082e8

08006574 <main>:
{
 8006574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006578:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 800657a:	f7fc f9f7 	bl	800296c <HAL_Init>
  SystemClock_Config();
 800657e:	f000 fb97 	bl	8006cb0 <SystemClock_Config>
  DBG_Init();
 8006582:	f7ff fb55 	bl	8005c30 <DBG_Init>
  HW_Init();
 8006586:	f000 fbfb 	bl	8006d80 <HW_Init>
  LPM_SetOffMode(LPM_APPLI_Id, LPM_Disable);
 800658a:	2101      	movs	r1, #1
 800658c:	4608      	mov	r0, r1
 800658e:	f7ff ff1b 	bl	80063c8 <LPM_SetOffMode>
  TimerInit(&timerLed, OnledEvent);
 8006592:	4c90      	ldr	r4, [pc, #576]	; (80067d4 <main+0x260>)
 8006594:	4990      	ldr	r1, [pc, #576]	; (80067d8 <main+0x264>)
 8006596:	4620      	mov	r0, r4
 8006598:	f000 fd1c 	bl	8006fd4 <TimerInit>
  TimerSetValue(&timerLed, LED_PERIOD_MS);
 800659c:	21c8      	movs	r1, #200	; 0xc8
 800659e:	4620      	mov	r0, r4
 80065a0:	f000 fdd0 	bl	8007144 <TimerSetValue>
  TimerStart(&timerLed);
 80065a4:	4620      	mov	r0, r4
 80065a6:	f000 fd1f 	bl	8006fe8 <TimerStart>
  RadioEvents.TxDone = OnTxDone;
 80065aa:	4b8c      	ldr	r3, [pc, #560]	; (80067dc <main+0x268>)
 80065ac:	61e3      	str	r3, [r4, #28]
  RadioEvents.RxDone = OnRxDone;
 80065ae:	4b8c      	ldr	r3, [pc, #560]	; (80067e0 <main+0x26c>)
 80065b0:	6263      	str	r3, [r4, #36]	; 0x24
  RadioEvents.TxTimeout = OnTxTimeout;
 80065b2:	4b8c      	ldr	r3, [pc, #560]	; (80067e4 <main+0x270>)
 80065b4:	6223      	str	r3, [r4, #32]
  RadioEvents.RxTimeout = OnRxTimeout;
 80065b6:	4b8c      	ldr	r3, [pc, #560]	; (80067e8 <main+0x274>)
 80065b8:	62a3      	str	r3, [r4, #40]	; 0x28
  RadioEvents.RxError = OnRxError;
 80065ba:	4b8c      	ldr	r3, [pc, #560]	; (80067ec <main+0x278>)
 80065bc:	62e3      	str	r3, [r4, #44]	; 0x2c
  Radio.Init(&RadioEvents);
 80065be:	4e8c      	ldr	r6, [pc, #560]	; (80067f0 <main+0x27c>)
 80065c0:	68b3      	ldr	r3, [r6, #8]
 80065c2:	f104 001c 	add.w	r0, r4, #28
 80065c6:	4798      	blx	r3
  Radio.SetChannel(RF_FREQUENCY);
 80065c8:	6973      	ldr	r3, [r6, #20]
 80065ca:	488a      	ldr	r0, [pc, #552]	; (80067f4 <main+0x280>)
 80065cc:	4798      	blx	r3
  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 80065ce:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80065d2:	9308      	str	r3, [sp, #32]
 80065d4:	2500      	movs	r5, #0
 80065d6:	9507      	str	r5, [sp, #28]
 80065d8:	9506      	str	r5, [sp, #24]
 80065da:	9505      	str	r5, [sp, #20]
 80065dc:	2401      	movs	r4, #1
 80065de:	9404      	str	r4, [sp, #16]
 80065e0:	9503      	str	r5, [sp, #12]
 80065e2:	f04f 0908 	mov.w	r9, #8
 80065e6:	f8cd 9008 	str.w	r9, [sp, #8]
 80065ea:	9401      	str	r4, [sp, #4]
 80065ec:	f04f 0807 	mov.w	r8, #7
 80065f0:	f8cd 8000 	str.w	r8, [sp]
 80065f4:	462b      	mov	r3, r5
 80065f6:	462a      	mov	r2, r5
 80065f8:	210e      	movs	r1, #14
 80065fa:	4620      	mov	r0, r4
 80065fc:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80065fe:	47b8      	blx	r7
  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 8006600:	9409      	str	r4, [sp, #36]	; 0x24
 8006602:	9508      	str	r5, [sp, #32]
 8006604:	9507      	str	r5, [sp, #28]
 8006606:	9506      	str	r5, [sp, #24]
 8006608:	9405      	str	r4, [sp, #20]
 800660a:	9504      	str	r5, [sp, #16]
 800660c:	9503      	str	r5, [sp, #12]
 800660e:	2305      	movs	r3, #5
 8006610:	9302      	str	r3, [sp, #8]
 8006612:	f8cd 9004 	str.w	r9, [sp, #4]
 8006616:	9500      	str	r5, [sp, #0]
 8006618:	4623      	mov	r3, r4
 800661a:	4642      	mov	r2, r8
 800661c:	4629      	mov	r1, r5
 800661e:	4620      	mov	r0, r4
 8006620:	6a35      	ldr	r5, [r6, #32]
 8006622:	47a8      	blx	r5
  Radio.Rx(RX_TIMEOUT_VALUE);
 8006624:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8006626:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800662a:	4798      	blx	r3
 800662c:	e05b      	b.n	80066e6 <main+0x172>
        if (isMaster == true)
 800662e:	2c00      	cmp	r4, #0
 8006630:	d041      	beq.n	80066b6 <main+0x142>
          if (BufferSize > 0)
 8006632:	4b71      	ldr	r3, [pc, #452]	; (80067f8 <main+0x284>)
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d04c      	beq.n	80066d4 <main+0x160>
            if (strncmp((const char *)Buffer, (const char *)PongMsg, 4) == 0)
 800663a:	2204      	movs	r2, #4
 800663c:	496f      	ldr	r1, [pc, #444]	; (80067fc <main+0x288>)
 800663e:	4870      	ldr	r0, [pc, #448]	; (8006800 <main+0x28c>)
 8006640:	f000 ffb3 	bl	80075aa <strncmp>
 8006644:	b160      	cbz	r0, 8006660 <main+0xec>
            else if (strncmp((const char *)Buffer, (const char *)PingMsg, 4) == 0)
 8006646:	2204      	movs	r2, #4
 8006648:	496e      	ldr	r1, [pc, #440]	; (8006804 <main+0x290>)
 800664a:	486d      	ldr	r0, [pc, #436]	; (8006800 <main+0x28c>)
 800664c:	f000 ffad 	bl	80075aa <strncmp>
 8006650:	bb58      	cbnz	r0, 80066aa <main+0x136>
              Radio.Rx(RX_TIMEOUT_VALUE);
 8006652:	4b67      	ldr	r3, [pc, #412]	; (80067f0 <main+0x27c>)
 8006654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006656:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800665a:	4798      	blx	r3
              isMaster = false;
 800665c:	2400      	movs	r4, #0
 800665e:	e039      	b.n	80066d4 <main+0x160>
              TimerStop(&timerLed);
 8006660:	485c      	ldr	r0, [pc, #368]	; (80067d4 <main+0x260>)
 8006662:	f000 fd33 	bl	80070cc <TimerStop>
              Buffer[0] = 'P';
 8006666:	4b66      	ldr	r3, [pc, #408]	; (8006800 <main+0x28c>)
 8006668:	2250      	movs	r2, #80	; 0x50
 800666a:	701a      	strb	r2, [r3, #0]
              Buffer[1] = 'I';
 800666c:	2249      	movs	r2, #73	; 0x49
 800666e:	705a      	strb	r2, [r3, #1]
              Buffer[2] = 'N';
 8006670:	224e      	movs	r2, #78	; 0x4e
 8006672:	709a      	strb	r2, [r3, #2]
              Buffer[3] = 'G';
 8006674:	2247      	movs	r2, #71	; 0x47
 8006676:	70da      	strb	r2, [r3, #3]
              for (i = 4; i < BufferSize; i++)
 8006678:	2304      	movs	r3, #4
 800667a:	b29a      	uxth	r2, r3
 800667c:	495e      	ldr	r1, [pc, #376]	; (80067f8 <main+0x284>)
 800667e:	8809      	ldrh	r1, [r1, #0]
 8006680:	428a      	cmp	r2, r1
 8006682:	d205      	bcs.n	8006690 <main+0x11c>
                Buffer[i] = i - 4;
 8006684:	1f19      	subs	r1, r3, #4
 8006686:	4a5e      	ldr	r2, [pc, #376]	; (8006800 <main+0x28c>)
 8006688:	54d1      	strb	r1, [r2, r3]
              for (i = 4; i < BufferSize; i++)
 800668a:	3301      	adds	r3, #1
 800668c:	b2db      	uxtb	r3, r3
 800668e:	e7f4      	b.n	800667a <main+0x106>
              PRINTF("...PING\n\r");
 8006690:	485d      	ldr	r0, [pc, #372]	; (8006808 <main+0x294>)
 8006692:	f000 fdb9 	bl	8007208 <TraceSend>
              DelayMs(1);
 8006696:	2001      	movs	r0, #1
 8006698:	f000 f9bd 	bl	8006a16 <HAL_Delay>
              Radio.Send(Buffer, BufferSize);
 800669c:	4b54      	ldr	r3, [pc, #336]	; (80067f0 <main+0x27c>)
 800669e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a0:	4a55      	ldr	r2, [pc, #340]	; (80067f8 <main+0x284>)
 80066a2:	7811      	ldrb	r1, [r2, #0]
 80066a4:	4856      	ldr	r0, [pc, #344]	; (8006800 <main+0x28c>)
 80066a6:	4798      	blx	r3
 80066a8:	e014      	b.n	80066d4 <main+0x160>
              Radio.Rx(RX_TIMEOUT_VALUE);
 80066aa:	4b51      	ldr	r3, [pc, #324]	; (80067f0 <main+0x27c>)
 80066ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80066b2:	4798      	blx	r3
 80066b4:	e00e      	b.n	80066d4 <main+0x160>
          if (BufferSize > 0)
 80066b6:	4b50      	ldr	r3, [pc, #320]	; (80067f8 <main+0x284>)
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	b15b      	cbz	r3, 80066d4 <main+0x160>
            if (strncmp((const char *)Buffer, (const char *)PingMsg, 4) == 0)
 80066bc:	2204      	movs	r2, #4
 80066be:	4951      	ldr	r1, [pc, #324]	; (8006804 <main+0x290>)
 80066c0:	484f      	ldr	r0, [pc, #316]	; (8006800 <main+0x28c>)
 80066c2:	f000 ff72 	bl	80075aa <strncmp>
 80066c6:	b308      	cbz	r0, 800670c <main+0x198>
              Radio.Rx(RX_TIMEOUT_VALUE);
 80066c8:	4b49      	ldr	r3, [pc, #292]	; (80067f0 <main+0x27c>)
 80066ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80066d0:	4798      	blx	r3
              isMaster = true;
 80066d2:	2401      	movs	r4, #1
        State = LOWPOWER;
 80066d4:	4b3f      	ldr	r3, [pc, #252]	; (80067d4 <main+0x260>)
 80066d6:	2200      	movs	r2, #0
 80066d8:	761a      	strb	r2, [r3, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 80066da:	b672      	cpsid	i
    if (State == LOWPOWER)
 80066dc:	4b3d      	ldr	r3, [pc, #244]	; (80067d4 <main+0x260>)
 80066de:	7e1b      	ldrb	r3, [r3, #24]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d073      	beq.n	80067cc <main+0x258>
  __ASM volatile ("cpsie i" : : : "memory");
 80066e4:	b662      	cpsie	i
    switch (State)
 80066e6:	4b3b      	ldr	r3, [pc, #236]	; (80067d4 <main+0x260>)
 80066e8:	7e1b      	ldrb	r3, [r3, #24]
 80066ea:	3b01      	subs	r3, #1
 80066ec:	2b04      	cmp	r3, #4
 80066ee:	d8f4      	bhi.n	80066da <main+0x166>
 80066f0:	a201      	add	r2, pc, #4	; (adr r2, 80066f8 <main+0x184>)
 80066f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f6:	bf00      	nop
 80066f8:	0800662f 	.word	0x0800662f
 80066fc:	08006769 	.word	0x08006769
 8006700:	08006769 	.word	0x08006769
 8006704:	08006757 	.word	0x08006757
 8006708:	080067bb 	.word	0x080067bb
              TimerStop(&timerLed);
 800670c:	4831      	ldr	r0, [pc, #196]	; (80067d4 <main+0x260>)
 800670e:	f000 fcdd 	bl	80070cc <TimerStop>
              Buffer[0] = 'P';
 8006712:	4b3b      	ldr	r3, [pc, #236]	; (8006800 <main+0x28c>)
 8006714:	2250      	movs	r2, #80	; 0x50
 8006716:	701a      	strb	r2, [r3, #0]
              Buffer[1] = 'O';
 8006718:	224f      	movs	r2, #79	; 0x4f
 800671a:	705a      	strb	r2, [r3, #1]
              Buffer[2] = 'N';
 800671c:	224e      	movs	r2, #78	; 0x4e
 800671e:	709a      	strb	r2, [r3, #2]
              Buffer[3] = 'G';
 8006720:	2247      	movs	r2, #71	; 0x47
 8006722:	70da      	strb	r2, [r3, #3]
              for (i = 4; i < BufferSize; i++)
 8006724:	2304      	movs	r3, #4
 8006726:	e004      	b.n	8006732 <main+0x1be>
                Buffer[i] = i - 4;
 8006728:	1f19      	subs	r1, r3, #4
 800672a:	4a35      	ldr	r2, [pc, #212]	; (8006800 <main+0x28c>)
 800672c:	54d1      	strb	r1, [r2, r3]
              for (i = 4; i < BufferSize; i++)
 800672e:	3301      	adds	r3, #1
 8006730:	b2db      	uxtb	r3, r3
 8006732:	b29a      	uxth	r2, r3
 8006734:	4930      	ldr	r1, [pc, #192]	; (80067f8 <main+0x284>)
 8006736:	8809      	ldrh	r1, [r1, #0]
 8006738:	428a      	cmp	r2, r1
 800673a:	d3f5      	bcc.n	8006728 <main+0x1b4>
              DelayMs(1);
 800673c:	2001      	movs	r0, #1
 800673e:	f000 f96a 	bl	8006a16 <HAL_Delay>
              Radio.Send(Buffer, BufferSize);
 8006742:	4b2b      	ldr	r3, [pc, #172]	; (80067f0 <main+0x27c>)
 8006744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006746:	4a2c      	ldr	r2, [pc, #176]	; (80067f8 <main+0x284>)
 8006748:	7811      	ldrb	r1, [r2, #0]
 800674a:	482d      	ldr	r0, [pc, #180]	; (8006800 <main+0x28c>)
 800674c:	4798      	blx	r3
              PRINTF("...PONG\n\r");
 800674e:	482f      	ldr	r0, [pc, #188]	; (800680c <main+0x298>)
 8006750:	f000 fd5a 	bl	8007208 <TraceSend>
 8006754:	e7be      	b.n	80066d4 <main+0x160>
        Radio.Rx(RX_TIMEOUT_VALUE);
 8006756:	4b26      	ldr	r3, [pc, #152]	; (80067f0 <main+0x27c>)
 8006758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800675e:	4798      	blx	r3
        State = LOWPOWER;
 8006760:	4b1c      	ldr	r3, [pc, #112]	; (80067d4 <main+0x260>)
 8006762:	2200      	movs	r2, #0
 8006764:	761a      	strb	r2, [r3, #24]
        break;
 8006766:	e7b8      	b.n	80066da <main+0x166>
        if (isMaster == true)
 8006768:	b944      	cbnz	r4, 800677c <main+0x208>
          Radio.Rx(RX_TIMEOUT_VALUE);
 800676a:	4b21      	ldr	r3, [pc, #132]	; (80067f0 <main+0x27c>)
 800676c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800676e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006772:	4798      	blx	r3
        State = LOWPOWER;
 8006774:	4b17      	ldr	r3, [pc, #92]	; (80067d4 <main+0x260>)
 8006776:	2200      	movs	r2, #0
 8006778:	761a      	strb	r2, [r3, #24]
        break;
 800677a:	e7ae      	b.n	80066da <main+0x166>
          Buffer[0] = 'P';
 800677c:	4b20      	ldr	r3, [pc, #128]	; (8006800 <main+0x28c>)
 800677e:	2250      	movs	r2, #80	; 0x50
 8006780:	701a      	strb	r2, [r3, #0]
          Buffer[1] = 'I';
 8006782:	2249      	movs	r2, #73	; 0x49
 8006784:	705a      	strb	r2, [r3, #1]
          Buffer[2] = 'N';
 8006786:	224e      	movs	r2, #78	; 0x4e
 8006788:	709a      	strb	r2, [r3, #2]
          Buffer[3] = 'G';
 800678a:	2247      	movs	r2, #71	; 0x47
 800678c:	70da      	strb	r2, [r3, #3]
          for (i = 4; i < BufferSize; i++)
 800678e:	2304      	movs	r3, #4
 8006790:	e004      	b.n	800679c <main+0x228>
            Buffer[i] = i - 4;
 8006792:	1f19      	subs	r1, r3, #4
 8006794:	4a1a      	ldr	r2, [pc, #104]	; (8006800 <main+0x28c>)
 8006796:	54d1      	strb	r1, [r2, r3]
          for (i = 4; i < BufferSize; i++)
 8006798:	3301      	adds	r3, #1
 800679a:	b2db      	uxtb	r3, r3
 800679c:	b29a      	uxth	r2, r3
 800679e:	4916      	ldr	r1, [pc, #88]	; (80067f8 <main+0x284>)
 80067a0:	8809      	ldrh	r1, [r1, #0]
 80067a2:	428a      	cmp	r2, r1
 80067a4:	d3f5      	bcc.n	8006792 <main+0x21e>
          DelayMs(1);
 80067a6:	2001      	movs	r0, #1
 80067a8:	f000 f935 	bl	8006a16 <HAL_Delay>
          Radio.Send(Buffer, BufferSize);
 80067ac:	4b10      	ldr	r3, [pc, #64]	; (80067f0 <main+0x27c>)
 80067ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b0:	4a11      	ldr	r2, [pc, #68]	; (80067f8 <main+0x284>)
 80067b2:	7811      	ldrb	r1, [r2, #0]
 80067b4:	4812      	ldr	r0, [pc, #72]	; (8006800 <main+0x28c>)
 80067b6:	4798      	blx	r3
 80067b8:	e7dc      	b.n	8006774 <main+0x200>
        Radio.Rx(RX_TIMEOUT_VALUE);
 80067ba:	4b0d      	ldr	r3, [pc, #52]	; (80067f0 <main+0x27c>)
 80067bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80067c2:	4798      	blx	r3
        State = LOWPOWER;
 80067c4:	4b03      	ldr	r3, [pc, #12]	; (80067d4 <main+0x260>)
 80067c6:	2200      	movs	r2, #0
 80067c8:	761a      	strb	r2, [r3, #24]
        break;
 80067ca:	e786      	b.n	80066da <main+0x166>
      LPM_EnterLowPower();
 80067cc:	f7ff fe40 	bl	8006450 <LPM_EnterLowPower>
 80067d0:	e788      	b.n	80066e4 <main+0x170>
 80067d2:	bf00      	nop
 80067d4:	200002f0 	.word	0x200002f0
 80067d8:	08006481 	.word	0x08006481
 80067dc:	08006491 	.word	0x08006491
 80067e0:	08006521 	.word	0x08006521
 80067e4:	080064b5 	.word	0x080064b5
 80067e8:	080064d9 	.word	0x080064d9
 80067ec:	080064fd 	.word	0x080064fd
 80067f0:	080081b0 	.word	0x080081b0
 80067f4:	3689cac0 	.word	0x3689cac0
 80067f8:	20000038 	.word	0x20000038
 80067fc:	0800823c 	.word	0x0800823c
 8006800:	20000630 	.word	0x20000630
 8006804:	08008244 	.word	0x08008244
 8006808:	08008308 	.word	0x08008308
 800680c:	08008314 	.word	0x08008314

08006810 <circular_queue_get_free_size>:

/* Private functions ---------------------------------------------------------*/
static int16_t circular_queue_get_free_size(queue_param_t* queue)
{
  int16_t free_size;
  if (queue->queue_write_idx>=queue->queue_read_idx)
 8006810:	8842      	ldrh	r2, [r0, #2]
 8006812:	8803      	ldrh	r3, [r0, #0]
 8006814:	429a      	cmp	r2, r3
 8006816:	d309      	bcc.n	800682c <circular_queue_get_free_size+0x1c>
  {
    free_size=queue->queue_size-(queue->queue_write_idx-queue->queue_read_idx); 
 8006818:	88c1      	ldrh	r1, [r0, #6]
 800681a:	1a9b      	subs	r3, r3, r2
 800681c:	fa11 f383 	uxtah	r3, r1, r3
 8006820:	b21b      	sxth	r3, r3
  }
  else
  {
    free_size=(queue->queue_read_idx-queue->queue_write_idx); 
  }
  if ( queue->queue_full==1)
 8006822:	7b02      	ldrb	r2, [r0, #12]
 8006824:	2a01      	cmp	r2, #1
 8006826:	d004      	beq.n	8006832 <circular_queue_get_free_size+0x22>
  {
    free_size=0;
  }
  return free_size;
}
 8006828:	4618      	mov	r0, r3
 800682a:	4770      	bx	lr
    free_size=(queue->queue_read_idx-queue->queue_write_idx); 
 800682c:	1a9b      	subs	r3, r3, r2
 800682e:	b21b      	sxth	r3, r3
 8006830:	e7f7      	b.n	8006822 <circular_queue_get_free_size+0x12>
    free_size=0;
 8006832:	2300      	movs	r3, #0
 8006834:	e7f8      	b.n	8006828 <circular_queue_get_free_size+0x18>

08006836 <queue_copy>:

static void queue_copy(uint8_t* out, const uint8_t* in, uint16_t size)
{
  while(size--)
 8006836:	e004      	b.n	8006842 <queue_copy+0xc>
  {
    *out++= *in++;
 8006838:	780a      	ldrb	r2, [r1, #0]
 800683a:	7002      	strb	r2, [r0, #0]
  while(size--)
 800683c:	461a      	mov	r2, r3
    *out++= *in++;
 800683e:	3101      	adds	r1, #1
 8006840:	3001      	adds	r0, #1
  while(size--)
 8006842:	1e53      	subs	r3, r2, #1
 8006844:	b29b      	uxth	r3, r3
 8006846:	2a00      	cmp	r2, #0
 8006848:	d1f6      	bne.n	8006838 <queue_copy+0x2>
  }
}
 800684a:	4770      	bx	lr

0800684c <add_elementSize_and_inc_writeIdx>:

static void add_elementSize_and_inc_writeIdx(queue_param_t* queue,uint16_t element_size)
{
 800684c:	b410      	push	{r4}
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size>>8);
 800684e:	6882      	ldr	r2, [r0, #8]
 8006850:	8843      	ldrh	r3, [r0, #2]
 8006852:	1c5c      	adds	r4, r3, #1
 8006854:	8044      	strh	r4, [r0, #2]
 8006856:	0a0c      	lsrs	r4, r1, #8
 8006858:	54d4      	strb	r4, [r2, r3]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 800685a:	8842      	ldrh	r2, [r0, #2]
 800685c:	88c3      	ldrh	r3, [r0, #6]
 800685e:	429a      	cmp	r2, r3
 8006860:	d00b      	beq.n	800687a <add_elementSize_and_inc_writeIdx+0x2e>
  {
    queue->queue_write_idx=0;
  }
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size);
 8006862:	6882      	ldr	r2, [r0, #8]
 8006864:	8843      	ldrh	r3, [r0, #2]
 8006866:	1c5c      	adds	r4, r3, #1
 8006868:	8044      	strh	r4, [r0, #2]
 800686a:	54d1      	strb	r1, [r2, r3]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 800686c:	8842      	ldrh	r2, [r0, #2]
 800686e:	88c3      	ldrh	r3, [r0, #6]
 8006870:	429a      	cmp	r2, r3
 8006872:	d005      	beq.n	8006880 <add_elementSize_and_inc_writeIdx+0x34>
  {
    queue->queue_write_idx=0;
  }
}
 8006874:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006878:	4770      	bx	lr
    queue->queue_write_idx=0;
 800687a:	2300      	movs	r3, #0
 800687c:	8043      	strh	r3, [r0, #2]
 800687e:	e7f0      	b.n	8006862 <add_elementSize_and_inc_writeIdx+0x16>
    queue->queue_write_idx=0;
 8006880:	2300      	movs	r3, #0
 8006882:	8043      	strh	r3, [r0, #2]
}
 8006884:	e7f6      	b.n	8006874 <add_elementSize_and_inc_writeIdx+0x28>

08006886 <circular_queue_init>:
  queue->queue_read_idx=0;
 8006886:	2300      	movs	r3, #0
 8006888:	8003      	strh	r3, [r0, #0]
  queue->queue_write_idx=0;
 800688a:	8043      	strh	r3, [r0, #2]
  queue->queue_nb_element=0;
 800688c:	8083      	strh	r3, [r0, #4]
  queue->queue_buff=queue_buff;
 800688e:	6081      	str	r1, [r0, #8]
  queue->queue_size=queue_size;
 8006890:	80c2      	strh	r2, [r0, #6]
  queue->queue_full=0;
 8006892:	7303      	strb	r3, [r0, #12]
}
 8006894:	4770      	bx	lr

08006896 <circular_queue_add>:
{
 8006896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006898:	4604      	mov	r4, r0
 800689a:	460f      	mov	r7, r1
 800689c:	4615      	mov	r5, r2
  int16_t free_buff_len=circular_queue_get_free_size(queue);
 800689e:	f7ff ffb7 	bl	8006810 <circular_queue_get_free_size>
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 80068a2:	1cab      	adds	r3, r5, #2
 80068a4:	4283      	cmp	r3, r0
 80068a6:	dc2a      	bgt.n	80068fe <circular_queue_add+0x68>
      ((queue->queue_write_idx+buff_size+ELEMENT_SIZE_LEN<=queue->queue_size) 
 80068a8:	8861      	ldrh	r1, [r4, #2]
 80068aa:	186a      	adds	r2, r5, r1
 80068ac:	3202      	adds	r2, #2
 80068ae:	88e3      	ldrh	r3, [r4, #6]
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 80068b0:	429a      	cmp	r2, r3
 80068b2:	dd02      	ble.n	80068ba <circular_queue_add+0x24>
        || (queue->queue_write_idx>=queue->queue_size-ELEMENT_SIZE_LEN))) /*elementSize cut in 2 or elementSize at Top*/
 80068b4:	3b02      	subs	r3, #2
 80068b6:	4299      	cmp	r1, r3
 80068b8:	db21      	blt.n	80068fe <circular_queue_add+0x68>
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 80068ba:	4629      	mov	r1, r5
 80068bc:	4620      	mov	r0, r4
 80068be:	f7ff ffc5 	bl	800684c <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,buff_size);
 80068c2:	68a0      	ldr	r0, [r4, #8]
 80068c4:	8863      	ldrh	r3, [r4, #2]
 80068c6:	462a      	mov	r2, r5
 80068c8:	4639      	mov	r1, r7
 80068ca:	4418      	add	r0, r3
 80068cc:	f7ff ffb3 	bl	8006836 <queue_copy>
    queue->queue_write_idx+=buff_size;
 80068d0:	8863      	ldrh	r3, [r4, #2]
 80068d2:	441d      	add	r5, r3
 80068d4:	b2ad      	uxth	r5, r5
 80068d6:	8065      	strh	r5, [r4, #2]
    if (queue->queue_write_idx==queue->queue_size)
 80068d8:	88e3      	ldrh	r3, [r4, #6]
 80068da:	429d      	cmp	r5, r3
 80068dc:	d008      	beq.n	80068f0 <circular_queue_add+0x5a>
    queue->queue_nb_element++; 
 80068de:	88a3      	ldrh	r3, [r4, #4]
 80068e0:	3301      	adds	r3, #1
 80068e2:	80a3      	strh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 80068e4:	8862      	ldrh	r2, [r4, #2]
 80068e6:	8823      	ldrh	r3, [r4, #0]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d004      	beq.n	80068f6 <circular_queue_add+0x60>
    status=0;
 80068ec:	2000      	movs	r0, #0
 80068ee:	e034      	b.n	800695a <circular_queue_add+0xc4>
        queue->queue_write_idx=0;
 80068f0:	2300      	movs	r3, #0
 80068f2:	8063      	strh	r3, [r4, #2]
 80068f4:	e7f3      	b.n	80068de <circular_queue_add+0x48>
      queue->queue_full=1;
 80068f6:	2301      	movs	r3, #1
 80068f8:	7323      	strb	r3, [r4, #12]
    status=0;
 80068fa:	2000      	movs	r0, #0
 80068fc:	e02d      	b.n	800695a <circular_queue_add+0xc4>
  else if (buff_size+2*ELEMENT_SIZE_LEN<=free_buff_len)
 80068fe:	1d2b      	adds	r3, r5, #4
 8006900:	4298      	cmp	r0, r3
 8006902:	db2f      	blt.n	8006964 <circular_queue_add+0xce>
    uint16_t top_size = queue->queue_size-(queue->queue_write_idx+ELEMENT_SIZE_LEN);
 8006904:	88e6      	ldrh	r6, [r4, #6]
 8006906:	8863      	ldrh	r3, [r4, #2]
 8006908:	1af6      	subs	r6, r6, r3
 800690a:	b2b6      	uxth	r6, r6
 800690c:	3e02      	subs	r6, #2
 800690e:	b2b6      	uxth	r6, r6
    add_elementSize_and_inc_writeIdx(queue,top_size);
 8006910:	4631      	mov	r1, r6
 8006912:	4620      	mov	r0, r4
 8006914:	f7ff ff9a 	bl	800684c <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,top_size);
 8006918:	68a0      	ldr	r0, [r4, #8]
 800691a:	8863      	ldrh	r3, [r4, #2]
 800691c:	4632      	mov	r2, r6
 800691e:	4639      	mov	r1, r7
 8006920:	4418      	add	r0, r3
 8006922:	f7ff ff88 	bl	8006836 <queue_copy>
    queue->queue_write_idx=0;
 8006926:	2300      	movs	r3, #0
 8006928:	8063      	strh	r3, [r4, #2]
    buff_size-=top_size;
 800692a:	1bad      	subs	r5, r5, r6
 800692c:	b2ad      	uxth	r5, r5
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 800692e:	4629      	mov	r1, r5
 8006930:	4620      	mov	r0, r4
 8006932:	f7ff ff8b 	bl	800684c <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff+top_size,buff_size);
 8006936:	68a0      	ldr	r0, [r4, #8]
 8006938:	8863      	ldrh	r3, [r4, #2]
 800693a:	462a      	mov	r2, r5
 800693c:	19b9      	adds	r1, r7, r6
 800693e:	4418      	add	r0, r3
 8006940:	f7ff ff79 	bl	8006836 <queue_copy>
    queue->queue_write_idx+=buff_size;
 8006944:	8863      	ldrh	r3, [r4, #2]
 8006946:	441d      	add	r5, r3
 8006948:	b2ad      	uxth	r5, r5
 800694a:	8065      	strh	r5, [r4, #2]
    queue->queue_nb_element+=2;
 800694c:	88a3      	ldrh	r3, [r4, #4]
 800694e:	3302      	adds	r3, #2
 8006950:	80a3      	strh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 8006952:	8823      	ldrh	r3, [r4, #0]
 8006954:	429d      	cmp	r5, r3
 8006956:	d001      	beq.n	800695c <circular_queue_add+0xc6>
    status =0;
 8006958:	2000      	movs	r0, #0
}
 800695a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      queue->queue_full=1;
 800695c:	2301      	movs	r3, #1
 800695e:	7323      	strb	r3, [r4, #12]
    status =0;
 8006960:	2000      	movs	r0, #0
 8006962:	e7fa      	b.n	800695a <circular_queue_add+0xc4>
    status=-1;
 8006964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006968:	e7f7      	b.n	800695a <circular_queue_add+0xc4>

0800696a <circular_queue_get>:
  if (queue->queue_nb_element==0)
 800696a:	8883      	ldrh	r3, [r0, #4]
 800696c:	b1cb      	cbz	r3, 80069a2 <circular_queue_get+0x38>
{
 800696e:	b470      	push	{r4, r5, r6}
    uint16_t read_idx=queue->queue_read_idx;
 8006970:	8804      	ldrh	r4, [r0, #0]
    size=(uint16_t) queue->queue_buff[read_idx++]<<8;
 8006972:	6885      	ldr	r5, [r0, #8]
 8006974:	1c63      	adds	r3, r4, #1
 8006976:	b29b      	uxth	r3, r3
 8006978:	5d2c      	ldrb	r4, [r5, r4]
 800697a:	0224      	lsls	r4, r4, #8
    if (read_idx==queue->queue_size)
 800697c:	88c6      	ldrh	r6, [r0, #6]
 800697e:	429e      	cmp	r6, r3
 8006980:	d00b      	beq.n	800699a <circular_queue_get+0x30>
    size|=(uint16_t) queue->queue_buff[read_idx++];
 8006982:	1c58      	adds	r0, r3, #1
 8006984:	b280      	uxth	r0, r0
 8006986:	5ceb      	ldrb	r3, [r5, r3]
 8006988:	4323      	orrs	r3, r4
    if (read_idx==queue->queue_size)
 800698a:	4286      	cmp	r6, r0
 800698c:	d007      	beq.n	800699e <circular_queue_get+0x34>
    *buff= queue->queue_buff+read_idx;
 800698e:	4405      	add	r5, r0
 8006990:	600d      	str	r5, [r1, #0]
    * buff_size=size;
 8006992:	8013      	strh	r3, [r2, #0]
    status=0;
 8006994:	2000      	movs	r0, #0
}
 8006996:	bc70      	pop	{r4, r5, r6}
 8006998:	4770      	bx	lr
      read_idx=0;
 800699a:	2300      	movs	r3, #0
 800699c:	e7f1      	b.n	8006982 <circular_queue_get+0x18>
      read_idx=0;
 800699e:	2000      	movs	r0, #0
 80069a0:	e7f5      	b.n	800698e <circular_queue_get+0x24>
    status=-1;
 80069a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80069a6:	4770      	bx	lr

080069a8 <circular_queue_remove>:
  if (queue->queue_nb_element==0)
 80069a8:	8882      	ldrh	r2, [r0, #4]
 80069aa:	b342      	cbz	r2, 80069fe <circular_queue_remove+0x56>
{
 80069ac:	b470      	push	{r4, r5, r6}
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 80069ae:	6886      	ldr	r6, [r0, #8]
 80069b0:	8803      	ldrh	r3, [r0, #0]
 80069b2:	1c59      	adds	r1, r3, #1
 80069b4:	b289      	uxth	r1, r1
 80069b6:	8001      	strh	r1, [r0, #0]
 80069b8:	5cf3      	ldrb	r3, [r6, r3]
 80069ba:	021b      	lsls	r3, r3, #8
    if (queue->queue_read_idx==queue->queue_size)
 80069bc:	88c4      	ldrh	r4, [r0, #6]
 80069be:	42a1      	cmp	r1, r4
 80069c0:	d014      	beq.n	80069ec <circular_queue_remove+0x44>
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 80069c2:	8805      	ldrh	r5, [r0, #0]
 80069c4:	1c69      	adds	r1, r5, #1
 80069c6:	b289      	uxth	r1, r1
 80069c8:	8001      	strh	r1, [r0, #0]
 80069ca:	5d75      	ldrb	r5, [r6, r5]
 80069cc:	432b      	orrs	r3, r5
    if (queue->queue_read_idx==queue->queue_size)
 80069ce:	428c      	cmp	r4, r1
 80069d0:	d00f      	beq.n	80069f2 <circular_queue_remove+0x4a>
    queue->queue_read_idx+=size;
 80069d2:	8801      	ldrh	r1, [r0, #0]
 80069d4:	440b      	add	r3, r1
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	8003      	strh	r3, [r0, #0]
    if (queue->queue_read_idx==queue->queue_size)
 80069da:	429c      	cmp	r4, r3
 80069dc:	d00c      	beq.n	80069f8 <circular_queue_remove+0x50>
    queue->queue_nb_element--;
 80069de:	3a01      	subs	r2, #1
 80069e0:	8082      	strh	r2, [r0, #4]
    queue->queue_full=0;
 80069e2:	2300      	movs	r3, #0
 80069e4:	7303      	strb	r3, [r0, #12]
    status=0;
 80069e6:	4618      	mov	r0, r3
}
 80069e8:	bc70      	pop	{r4, r5, r6}
 80069ea:	4770      	bx	lr
      queue->queue_read_idx=0;
 80069ec:	2100      	movs	r1, #0
 80069ee:	8001      	strh	r1, [r0, #0]
 80069f0:	e7e7      	b.n	80069c2 <circular_queue_remove+0x1a>
      queue->queue_read_idx=0;
 80069f2:	2100      	movs	r1, #0
 80069f4:	8001      	strh	r1, [r0, #0]
 80069f6:	e7ec      	b.n	80069d2 <circular_queue_remove+0x2a>
        queue->queue_read_idx=0;
 80069f8:	2300      	movs	r3, #0
 80069fa:	8003      	strh	r3, [r0, #0]
 80069fc:	e7ef      	b.n	80069de <circular_queue_remove+0x36>
      status=-1;
 80069fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006a02:	4770      	bx	lr

08006a04 <circular_queue_sense>:
  if (queue->queue_nb_element==0)
 8006a04:	8883      	ldrh	r3, [r0, #4]
 8006a06:	b10b      	cbz	r3, 8006a0c <circular_queue_sense+0x8>
    status=0;
 8006a08:	2000      	movs	r0, #0
}
 8006a0a:	4770      	bx	lr
    status=-1;
 8006a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a10:	4770      	bx	lr

08006a12 <HAL_InitTick>:
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Return function status */
  return HAL_OK;
}
 8006a12:	2000      	movs	r0, #0
 8006a14:	4770      	bx	lr

08006a16 <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8006a16:	b500      	push	{lr}
 8006a18:	b083      	sub	sp, #12
 8006a1a:	9001      	str	r0, [sp, #4]
  HW_RTC_DelayMs(Delay);   /* based on RTC */
 8006a1c:	9801      	ldr	r0, [sp, #4]
 8006a1e:	f7ff fbc5 	bl	80061ac <HW_RTC_DelayMs>
}
 8006a22:	b003      	add	sp, #12
 8006a24:	f85d fb04 	ldr.w	pc, [sp], #4

08006a28 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8006a28:	b500      	push	{lr}
 8006a2a:	b083      	sub	sp, #12
  /* Enable Power Clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a2c:	4b09      	ldr	r3, [pc, #36]	; (8006a54 <HAL_MspInit+0x2c>)
 8006a2e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006a30:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006a34:	659a      	str	r2, [r3, #88]	; 0x58
 8006a36:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006a38:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8006a3c:	9201      	str	r2, [sp, #4]
 8006a3e:	9a01      	ldr	r2, [sp, #4]

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8006a40:	689a      	ldr	r2, [r3, #8]
 8006a42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a46:	609a      	str	r2, [r3, #8]

  /* Configure all IOs in analog input              */
  /* Except PA143 and PA14 (SWCLK and SWD) for debug*/
  /* PA13 and PA14 are configured in debug_init     */
  HW_GpioInit();
 8006a48:	f000 f886 	bl	8006b58 <HW_GpioInit>
}
 8006a4c:	b003      	add	sp, #12
 8006a4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a52:	bf00      	nop
 8006a54:	40021000 	.word	0x40021000

08006a58 <HAL_RTC_MspInit>:
  *        order to modify the RTC Clock source, as consequence RTC registers (including
  *        the backup registers) and RCC_CSR register are set to their reset values.
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 8006a58:	b500      	push	{lr}
 8006a5a:	b0b5      	sub	sp, #212	; 0xd4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006a5c:	2240      	movs	r2, #64	; 0x40
 8006a5e:	2100      	movs	r1, #0
 8006a60:	a824      	add	r0, sp, #144	; 0x90
 8006a62:	f000 fd9a 	bl	800759a <memset>
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct = {0};
 8006a66:	2288      	movs	r2, #136	; 0x88
 8006a68:	2100      	movs	r1, #0
 8006a6a:	a801      	add	r0, sp, #4
 8006a6c:	f000 fd95 	bl	800759a <memset>

  /*##-1- Configue the RTC clock soucre ######################################*/
  /* -a- Enable LSE Oscillator */
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSE;
 8006a70:	2304      	movs	r3, #4
 8006a72:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006a74:	2301      	movs	r3, #1
 8006a76:	9325      	str	r3, [sp, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006a78:	a823      	add	r0, sp, #140	; 0x8c
 8006a7a:	f7fc fe55 	bl	8003728 <HAL_RCC_OscConfig>
 8006a7e:	b9d8      	cbnz	r0, 8006ab8 <HAL_RTC_MspInit+0x60>
  {
    Error_Handler();
  }

  /* -b- Select LSI as RTC clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006a80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a84:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006a86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a8a:	9322      	str	r3, [sp, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006a8c:	a801      	add	r0, sp, #4
 8006a8e:	f7fd fc45 	bl	800431c <HAL_RCCEx_PeriphCLKConfig>
 8006a92:	b9a0      	cbnz	r0, 8006abe <HAL_RTC_MspInit+0x66>
    Error_Handler();
  }

  /*##-2- Enable the RTC peripheral Clock ####################################*/
  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
 8006a94:	4a0b      	ldr	r2, [pc, #44]	; (8006ac4 <HAL_RTC_MspInit+0x6c>)
 8006a96:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /*##-3- Configure the NVIC for RTC Alarm ###################################*/
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	2029      	movs	r0, #41	; 0x29
 8006aa8:	f7fc fa64 	bl	8002f74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8006aac:	2029      	movs	r0, #41	; 0x29
 8006aae:	f7fc fa95 	bl	8002fdc <HAL_NVIC_EnableIRQ>
}
 8006ab2:	b035      	add	sp, #212	; 0xd4
 8006ab4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8006ab8:	f7ff f8fa 	bl	8005cb0 <Error_Handler>
 8006abc:	e7e0      	b.n	8006a80 <HAL_RTC_MspInit+0x28>
    Error_Handler();
 8006abe:	f7ff f8f7 	bl	8005cb0 <Error_Handler>
 8006ac2:	e7e7      	b.n	8006a94 <HAL_RTC_MspInit+0x3c>
 8006ac4:	40021000 	.word	0x40021000

08006ac8 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006ac8:	b508      	push	{r3, lr}
  TimerIrqHandler();
 8006aca:	f000 fabf 	bl	800704c <TimerIrqHandler>
}
 8006ace:	bd08      	pop	{r3, pc}

08006ad0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006ad0:	b508      	push	{r3, lr}
  HW_GPIO_IrqHandler(GPIO_Pin);
 8006ad2:	f7ff f985 	bl	8005de0 <HW_GPIO_IrqHandler>
}
 8006ad6:	bd08      	pop	{r3, pc}

08006ad8 <MSP_GetIRQn>:
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval IRQ number
  */
IRQn_Type MSP_GetIRQn(uint16_t GPIO_Pin)
{
  switch (GPIO_Pin)
 8006ad8:	2810      	cmp	r0, #16
 8006ada:	d020      	beq.n	8006b1e <MSP_GetIRQn+0x46>
 8006adc:	d80c      	bhi.n	8006af8 <MSP_GetIRQn+0x20>
 8006ade:	2802      	cmp	r0, #2
 8006ae0:	d01f      	beq.n	8006b22 <MSP_GetIRQn+0x4a>
 8006ae2:	d905      	bls.n	8006af0 <MSP_GetIRQn+0x18>
 8006ae4:	2804      	cmp	r0, #4
 8006ae6:	d018      	beq.n	8006b1a <MSP_GetIRQn+0x42>
 8006ae8:	2808      	cmp	r0, #8
 8006aea:	d10c      	bne.n	8006b06 <MSP_GetIRQn+0x2e>
    case GPIO_PIN_1:
      return EXTI1_IRQn;
    case GPIO_PIN_2:
      return EXTI2_IRQn;
    case GPIO_PIN_3:
      return EXTI3_IRQn;
 8006aec:	2009      	movs	r0, #9
 8006aee:	4770      	bx	lr
  switch (GPIO_Pin)
 8006af0:	2801      	cmp	r0, #1
 8006af2:	d108      	bne.n	8006b06 <MSP_GetIRQn+0x2e>
      return EXTI0_IRQn;
 8006af4:	2006      	movs	r0, #6
 8006af6:	4770      	bx	lr
  switch (GPIO_Pin)
 8006af8:	2880      	cmp	r0, #128	; 0x80
 8006afa:	d00c      	beq.n	8006b16 <MSP_GetIRQn+0x3e>
 8006afc:	d805      	bhi.n	8006b0a <MSP_GetIRQn+0x32>
 8006afe:	2820      	cmp	r0, #32
 8006b00:	d009      	beq.n	8006b16 <MSP_GetIRQn+0x3e>
 8006b02:	2840      	cmp	r0, #64	; 0x40
 8006b04:	d007      	beq.n	8006b16 <MSP_GetIRQn+0x3e>
    case GPIO_PIN_12:
    case GPIO_PIN_13:
    case GPIO_PIN_14:
    case GPIO_PIN_15:
    default:
      return EXTI15_10_IRQn;
 8006b06:	2028      	movs	r0, #40	; 0x28
 8006b08:	4770      	bx	lr
  switch (GPIO_Pin)
 8006b0a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8006b0e:	d002      	beq.n	8006b16 <MSP_GetIRQn+0x3e>
 8006b10:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006b14:	d1f7      	bne.n	8006b06 <MSP_GetIRQn+0x2e>
      return EXTI9_5_IRQn;
 8006b16:	2017      	movs	r0, #23
 8006b18:	4770      	bx	lr
      return EXTI2_IRQn;
 8006b1a:	2008      	movs	r0, #8
 8006b1c:	4770      	bx	lr
      return EXTI4_IRQn;
 8006b1e:	200a      	movs	r0, #10
 8006b20:	4770      	bx	lr
      return EXTI1_IRQn;
 8006b22:	2007      	movs	r0, #7
  }
}
 8006b24:	4770      	bx	lr
	...

08006b28 <HW_IoDeInit>:
  * @brief This function Deinitializes the hardware Ios
  * @param None
  * @retval None
  */
static void HW_IoDeInit(void)
{
 8006b28:	b508      	push	{r3, lr}
  HW_SPI_IoDeInit();
 8006b2a:	f7ff fbf7 	bl	800631c <HW_SPI_IoDeInit>

  Radio.IoDeInit();
 8006b2e:	4b03      	ldr	r3, [pc, #12]	; (8006b3c <HW_IoDeInit+0x14>)
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	4798      	blx	r3

  vcom_IoDeInit();
 8006b34:	f000 fc8c 	bl	8007450 <vcom_IoDeInit>
}
 8006b38:	bd08      	pop	{r3, pc}
 8006b3a:	bf00      	nop
 8006b3c:	080081b0 	.word	0x080081b0

08006b40 <HW_IoInit>:
{
 8006b40:	b508      	push	{r3, lr}
  HW_SPI_IoInit();
 8006b42:	f7ff fb83 	bl	800624c <HW_SPI_IoInit>
  Radio.IoInit();
 8006b46:	4b03      	ldr	r3, [pc, #12]	; (8006b54 <HW_IoInit+0x14>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4798      	blx	r3
  vcom_IoInit();
 8006b4c:	f000 fbe6 	bl	800731c <vcom_IoInit>
}
 8006b50:	bd08      	pop	{r3, pc}
 8006b52:	bf00      	nop
 8006b54:	080081b0 	.word	0x080081b0

08006b58 <HW_GpioInit>:


void HW_GpioInit(void)
{
 8006b58:	b530      	push	{r4, r5, lr}
 8006b5a:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b60:	930c      	str	r3, [sp, #48]	; 0x30
 8006b62:	930d      	str	r3, [sp, #52]	; 0x34

  /* Configure all GPIO as analog to reduce current consumption on non used IOs */
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b64:	4c4a      	ldr	r4, [pc, #296]	; (8006c90 <HW_GpioInit+0x138>)
 8006b66:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006b68:	f043 0301 	orr.w	r3, r3, #1
 8006b6c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006b6e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006b70:	f003 0301 	and.w	r3, r3, #1
 8006b74:	9301      	str	r3, [sp, #4]
 8006b76:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b78:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006b7a:	f043 0302 	orr.w	r3, r3, #2
 8006b7e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006b80:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	9302      	str	r3, [sp, #8]
 8006b88:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b8a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006b8c:	f043 0304 	orr.w	r3, r3, #4
 8006b90:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006b92:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006b94:	f003 0304 	and.w	r3, r3, #4
 8006b98:	9303      	str	r3, [sp, #12]
 8006b9a:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b9c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006b9e:	f043 0308 	orr.w	r3, r3, #8
 8006ba2:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006ba4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006ba6:	f003 0308 	and.w	r3, r3, #8
 8006baa:	9304      	str	r3, [sp, #16]
 8006bac:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006bae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006bb0:	f043 0310 	orr.w	r3, r3, #16
 8006bb4:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006bb6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006bb8:	f003 0310 	and.w	r3, r3, #16
 8006bbc:	9305      	str	r3, [sp, #20]
 8006bbe:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006bc0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006bc2:	f043 0320 	orr.w	r3, r3, #32
 8006bc6:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006bc8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006bca:	f003 0320 	and.w	r3, r3, #32
 8006bce:	9306      	str	r3, [sp, #24]
 8006bd0:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006bd2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bd8:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006bda:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be0:	9307      	str	r3, [sp, #28]
 8006be2:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006be4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bea:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006bec:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf2:	9308      	str	r3, [sp, #32]
 8006bf4:	9b08      	ldr	r3, [sp, #32]

  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  /* All GPIOs except debug pins (SWCLK and SWD) */
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 8006bfa:	ad0e      	add	r5, sp, #56	; 0x38
 8006bfc:	f649 73ff 	movw	r3, #40959	; 0x9fff
 8006c00:	f845 3d14 	str.w	r3, [r5, #-20]!
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c04:	4629      	mov	r1, r5
 8006c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c0a:	f7fc fb4f 	bl	80032ac <HAL_GPIO_Init>

  /* All GPIOs */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8006c0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c12:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c14:	4629      	mov	r1, r5
 8006c16:	481f      	ldr	r0, [pc, #124]	; (8006c94 <HW_GpioInit+0x13c>)
 8006c18:	f7fc fb48 	bl	80032ac <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c1c:	4629      	mov	r1, r5
 8006c1e:	481e      	ldr	r0, [pc, #120]	; (8006c98 <HW_GpioInit+0x140>)
 8006c20:	f7fc fb44 	bl	80032ac <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c24:	4629      	mov	r1, r5
 8006c26:	481d      	ldr	r0, [pc, #116]	; (8006c9c <HW_GpioInit+0x144>)
 8006c28:	f7fc fb40 	bl	80032ac <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c2c:	4629      	mov	r1, r5
 8006c2e:	481c      	ldr	r0, [pc, #112]	; (8006ca0 <HW_GpioInit+0x148>)
 8006c30:	f7fc fb3c 	bl	80032ac <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006c34:	4629      	mov	r1, r5
 8006c36:	481b      	ldr	r0, [pc, #108]	; (8006ca4 <HW_GpioInit+0x14c>)
 8006c38:	f7fc fb38 	bl	80032ac <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006c3c:	4629      	mov	r1, r5
 8006c3e:	481a      	ldr	r0, [pc, #104]	; (8006ca8 <HW_GpioInit+0x150>)
 8006c40:	f7fc fb34 	bl	80032ac <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006c44:	4629      	mov	r1, r5
 8006c46:	4819      	ldr	r0, [pc, #100]	; (8006cac <HW_GpioInit+0x154>)
 8006c48:	f7fc fb30 	bl	80032ac <HAL_GPIO_Init>

  /* Disable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8006c4c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006c4e:	f023 0301 	bic.w	r3, r3, #1
 8006c52:	64e3      	str	r3, [r4, #76]	; 0x4c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8006c54:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006c56:	f023 0302 	bic.w	r3, r3, #2
 8006c5a:	64e3      	str	r3, [r4, #76]	; 0x4c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8006c5c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006c5e:	f023 0304 	bic.w	r3, r3, #4
 8006c62:	64e3      	str	r3, [r4, #76]	; 0x4c
  __HAL_RCC_GPIOD_CLK_DISABLE();
 8006c64:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006c66:	f023 0308 	bic.w	r3, r3, #8
 8006c6a:	64e3      	str	r3, [r4, #76]	; 0x4c
  __HAL_RCC_GPIOE_CLK_DISABLE();
 8006c6c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006c6e:	f023 0310 	bic.w	r3, r3, #16
 8006c72:	64e3      	str	r3, [r4, #76]	; 0x4c
  __HAL_RCC_GPIOF_CLK_DISABLE();
 8006c74:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006c76:	f023 0320 	bic.w	r3, r3, #32
 8006c7a:	64e3      	str	r3, [r4, #76]	; 0x4c
  __HAL_RCC_GPIOG_CLK_DISABLE();
 8006c7c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006c7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c82:	64e3      	str	r3, [r4, #76]	; 0x4c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8006c84:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006c86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c8a:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8006c8c:	b00f      	add	sp, #60	; 0x3c
 8006c8e:	bd30      	pop	{r4, r5, pc}
 8006c90:	40021000 	.word	0x40021000
 8006c94:	48000400 	.word	0x48000400
 8006c98:	48000800 	.word	0x48000800
 8006c9c:	48000c00 	.word	0x48000c00
 8006ca0:	48001000 	.word	0x48001000
 8006ca4:	48001400 	.word	0x48001400
 8006ca8:	48001800 	.word	0x48001800
 8006cac:	48001c00 	.word	0x48001c00

08006cb0 <SystemClock_Config>:
  */



void SystemClock_Config(void)
{
 8006cb0:	b500      	push	{lr}
 8006cb2:	b097      	sub	sp, #92	; 0x5c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	9111      	str	r1, [sp, #68]	; 0x44
 8006cb8:	9112      	str	r1, [sp, #72]	; 0x48
 8006cba:	9113      	str	r1, [sp, #76]	; 0x4c
 8006cbc:	9114      	str	r1, [sp, #80]	; 0x50
 8006cbe:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006cc0:	2224      	movs	r2, #36	; 0x24
 8006cc2:	a801      	add	r0, sp, #4
 8006cc4:	f000 fc69 	bl	800759a <memset>

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8006cc8:	2310      	movs	r3, #16
 8006cca:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8006cd0:	2260      	movs	r2, #96	; 0x60
 8006cd2:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8006cd8:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006cda:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 40;
 8006cdc:	2328      	movs	r3, #40	; 0x28
 8006cde:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006ce0:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 7;
 8006ce2:	2307      	movs	r3, #7
 8006ce4:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006ce6:	2304      	movs	r3, #4
 8006ce8:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006cea:	4668      	mov	r0, sp
 8006cec:	f7fc fd1c 	bl	8003728 <HAL_RCC_OscConfig>
 8006cf0:	b100      	cbz	r0, 8006cf4 <SystemClock_Config+0x44>
 8006cf2:	e7fe      	b.n	8006cf2 <SystemClock_Config+0x42>
    while (1);
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8006cf4:	230f      	movs	r3, #15
 8006cf6:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006d00:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006d02:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006d04:	2104      	movs	r1, #4
 8006d06:	a811      	add	r0, sp, #68	; 0x44
 8006d08:	f7fd f82a 	bl	8003d60 <HAL_RCC_ClockConfig>
 8006d0c:	b100      	cbz	r0, 8006d10 <SystemClock_Config+0x60>
 8006d0e:	e7fe      	b.n	8006d0e <SystemClock_Config+0x5e>
  {
    /* Initialization Error */
    while (1);
  }
}
 8006d10:	b017      	add	sp, #92	; 0x5c
 8006d12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006d18 <HW_AdcInit>:
  * @param none
  * @retval none
  */
void HW_AdcInit(void)
{
  if (AdcInitialized == false)
 8006d18:	4b17      	ldr	r3, [pc, #92]	; (8006d78 <HW_AdcInit+0x60>)
 8006d1a:	785b      	ldrb	r3, [r3, #1]
 8006d1c:	b103      	cbz	r3, 8006d20 <HW_AdcInit+0x8>
 8006d1e:	4770      	bx	lr
{
 8006d20:	b500      	push	{lr}
 8006d22:	b083      	sub	sp, #12
  {
    AdcInitialized = true;
 8006d24:	4814      	ldr	r0, [pc, #80]	; (8006d78 <HW_AdcInit+0x60>)
 8006d26:	2301      	movs	r3, #1
 8006d28:	7043      	strb	r3, [r0, #1]


    hadc.Instance  = ADC1;
 8006d2a:	4b14      	ldr	r3, [pc, #80]	; (8006d7c <HW_AdcInit+0x64>)
 8006d2c:	6043      	str	r3, [r0, #4]

    hadc.Init.OversamplingMode      = DISABLE;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV1;
 8006d34:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006d38:	6082      	str	r2, [r0, #8]
    /* hadc.Init.LowPowerAutoPowerOff  = DISABLE; */
    /* hadc.Init.LowPowerFrequencyMode = ENABLE; */
    hadc.Init.LowPowerAutoWait      = DISABLE;
 8006d3a:	7703      	strb	r3, [r0, #28]

    hadc.Init.Resolution            = ADC_RESOLUTION_12B;
 8006d3c:	60c3      	str	r3, [r0, #12]
    /* hadc.Init.SamplingTime          = ADC_SAMPLETIME_7CYCLES_5; */
    hadc.Init.ScanConvMode          = ADC_SCAN_DISABLE;
 8006d3e:	6143      	str	r3, [r0, #20]
    hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8006d40:	6103      	str	r3, [r0, #16]
    hadc.Init.ContinuousConvMode    = DISABLE;
 8006d42:	7743      	strb	r3, [r0, #29]
    hadc.Init.DiscontinuousConvMode = DISABLE;
 8006d44:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006d48:	6303      	str	r3, [r0, #48]	; 0x30
    hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8006d4a:	2204      	movs	r2, #4
 8006d4c:	6182      	str	r2, [r0, #24]
    hadc.Init.DMAContinuousRequests = DISABLE;
 8006d4e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34

    ADCCLK_ENABLE();
 8006d52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d56:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8006d5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d60:	64da      	str	r2, [r3, #76]	; 0x4c
 8006d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d68:	9301      	str	r3, [sp, #4]
 8006d6a:	9b01      	ldr	r3, [sp, #4]

    HAL_ADC_Init(&hadc);
 8006d6c:	3004      	adds	r0, #4
 8006d6e:	f7fb fe39 	bl	80029e4 <HAL_ADC_Init>

  }
}
 8006d72:	b003      	add	sp, #12
 8006d74:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d78:	20000328 	.word	0x20000328
 8006d7c:	50040000 	.word	0x50040000

08006d80 <HW_Init>:
{
 8006d80:	b508      	push	{r3, lr}
  if (McuInitialized == false)
 8006d82:	4b09      	ldr	r3, [pc, #36]	; (8006da8 <HW_Init+0x28>)
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	b103      	cbz	r3, 8006d8a <HW_Init+0xa>
}
 8006d88:	bd08      	pop	{r3, pc}
    HW_AdcInit();
 8006d8a:	f7ff ffc5 	bl	8006d18 <HW_AdcInit>
    Radio.IoInit();
 8006d8e:	4b07      	ldr	r3, [pc, #28]	; (8006dac <HW_Init+0x2c>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4798      	blx	r3
    HW_SPI_Init();
 8006d94:	f7ff fa8a 	bl	80062ac <HW_SPI_Init>
    HW_RTC_Init();
 8006d98:	f7ff fa24 	bl	80061e4 <HW_RTC_Init>
    TraceInit();
 8006d9c:	f000 fa24 	bl	80071e8 <TraceInit>
    McuInitialized = true;
 8006da0:	4b01      	ldr	r3, [pc, #4]	; (8006da8 <HW_Init+0x28>)
 8006da2:	2201      	movs	r2, #1
 8006da4:	701a      	strb	r2, [r3, #0]
}
 8006da6:	e7ef      	b.n	8006d88 <HW_Init+0x8>
 8006da8:	20000328 	.word	0x20000328
 8006dac:	080081b0 	.word	0x080081b0

08006db0 <HW_AdcDeInit>:
  * @brief This function De-initializes the ADC
  * @param none
  * @retval none
  */
void HW_AdcDeInit(void)
{
 8006db0:	b508      	push	{r3, lr}
  AdcInitialized = false;
 8006db2:	4803      	ldr	r0, [pc, #12]	; (8006dc0 <HW_AdcDeInit+0x10>)
 8006db4:	2300      	movs	r3, #0
 8006db6:	7043      	strb	r3, [r0, #1]
  HAL_ADC_DeInit(&hadc);
 8006db8:	3004      	adds	r0, #4
 8006dba:	f7fb ffe5 	bl	8002d88 <HAL_ADC_DeInit>
}
 8006dbe:	bd08      	pop	{r3, pc}
 8006dc0:	20000328 	.word	0x20000328

08006dc4 <LPM_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void LPM_EnterStopMode(void)
{
 8006dc4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dc6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006dca:	b672      	cpsid	i
  BACKUP_PRIMASK();

  DISABLE_IRQ();

  HW_IoDeInit();
 8006dcc:	f7ff feac 	bl	8006b28 <HW_IoDeInit>

  HW_AdcDeInit();
 8006dd0:	f7ff ffee 	bl	8006db0 <HW_AdcDeInit>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dd4:	f384 8810 	msr	PRIMASK, r4

  RESTORE_PRIMASK();

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006dd8:	2101      	movs	r1, #1
 8006dda:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006dde:	f7fc fb83 	bl	80034e8 <HAL_PWR_EnterSTOPMode>
}
 8006de2:	bd10      	pop	{r4, pc}

08006de4 <LPM_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void LPM_ExitStopMode(void)
{
 8006de4:	b530      	push	{r4, r5, lr}
 8006de6:	b099      	sub	sp, #100	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006de8:	f3ef 8510 	mrs	r5, PRIMASK
  /* Disable IRQ while the MCU is not running on PLL */

  BACKUP_PRIMASK();
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006dec:	2400      	movs	r4, #0
 8006dee:	9413      	str	r4, [sp, #76]	; 0x4c
 8006df0:	9414      	str	r4, [sp, #80]	; 0x50
 8006df2:	9415      	str	r4, [sp, #84]	; 0x54
 8006df4:	9416      	str	r4, [sp, #88]	; 0x58
 8006df6:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006df8:	2244      	movs	r2, #68	; 0x44
 8006dfa:	4621      	mov	r1, r4
 8006dfc:	a802      	add	r0, sp, #8
 8006dfe:	f000 fbcc 	bl	800759a <memset>
  uint32_t pFLatency = 0;
 8006e02:	9401      	str	r4, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8006e04:	b672      	cpsid	i
  DISABLE_IRQ();

  /* In case nvic had a pending IT, the arm doesn't enter stop mode
   * Hence the pll is not switched off and will cause HAL_RCC_OscConfig return
    an error*/
  if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e06:	4b17      	ldr	r3, [pc, #92]	; (8006e64 <LPM_ExitStopMode+0x80>)
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f003 030c 	and.w	r3, r3, #12
 8006e0e:	2b0c      	cmp	r3, #12
 8006e10:	d022      	beq.n	8006e58 <LPM_ExitStopMode+0x74>
  {
    /* Enable Power Control clock */
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e12:	4b14      	ldr	r3, [pc, #80]	; (8006e64 <LPM_ExitStopMode+0x80>)
 8006e14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006e16:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006e1a:	659a      	str	r2, [r3, #88]	; 0x58
 8006e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e22:	9300      	str	r3, [sp, #0]
 8006e24:	9b00      	ldr	r3, [sp, #0]

    /* Get the Oscillators configuration according to the internal RCC registers */
    HAL_RCC_GetOscConfig(&RCC_OscInitStruct);
 8006e26:	a802      	add	r0, sp, #8
 8006e28:	f7fd f870 	bl	8003f0c <HAL_RCC_GetOscConfig>

    /* Enable PLL */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
 8006e2c:	9402      	str	r4, [sp, #8]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006e2e:	2302      	movs	r3, #2
 8006e30:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006e32:	a802      	add	r0, sp, #8
 8006e34:	f7fc fc78 	bl	8003728 <HAL_RCC_OscConfig>
 8006e38:	b100      	cbz	r0, 8006e3c <LPM_ExitStopMode+0x58>
 8006e3a:	e7fe      	b.n	8006e3a <LPM_ExitStopMode+0x56>
    {
      while (1);
    }

    /* Get the Clocks configuration according to the internal RCC registers */
    HAL_RCC_GetClockConfig(&RCC_ClkInitStruct, &pFLatency);
 8006e3c:	a901      	add	r1, sp, #4
 8006e3e:	a813      	add	r0, sp, #76	; 0x4c
 8006e40:	f7fd f8f0 	bl	8004024 <HAL_RCC_GetClockConfig>

    /* Select PLL as system clock source and keep HCLK, PCLK1 and PCLK2 clocks dividers as before */
    RCC_ClkInitStruct.ClockType     = RCC_CLOCKTYPE_SYSCLK;
 8006e44:	2301      	movs	r3, #1
 8006e46:	9313      	str	r3, [sp, #76]	; 0x4c
    RCC_ClkInitStruct.SYSCLKSource  = RCC_SYSCLKSOURCE_PLLCLK;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	9314      	str	r3, [sp, #80]	; 0x50
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, pFLatency) != HAL_OK)
 8006e4c:	9901      	ldr	r1, [sp, #4]
 8006e4e:	a813      	add	r0, sp, #76	; 0x4c
 8006e50:	f7fc ff86 	bl	8003d60 <HAL_RCC_ClockConfig>
 8006e54:	b100      	cbz	r0, 8006e58 <LPM_ExitStopMode+0x74>
 8006e56:	e7fe      	b.n	8006e56 <LPM_ExitStopMode+0x72>
  else
  {
    /*mcu did not enter stop mode beacuse NVIC had a pending IT*/
  }

  HW_IoInit();
 8006e58:	f7ff fe72 	bl	8006b40 <HW_IoInit>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e5c:	f385 8810 	msr	PRIMASK, r5

  RESTORE_PRIMASK();
}
 8006e60:	b019      	add	sp, #100	; 0x64
 8006e62:	bd30      	pop	{r4, r5, pc}
 8006e64:	40021000 	.word	0x40021000

08006e68 <LPM_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void LPM_EnterSleepMode(void)
{
 8006e68:	b508      	push	{r3, lr}
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8006e6a:	2101      	movs	r1, #1
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	f7fc fb15 	bl	800349c <HAL_PWR_EnterSLEEPMode>
}
 8006e72:	bd08      	pop	{r3, pc}

08006e74 <NMI_Handler>:
  * @retval None
  */

void NMI_Handler(void)
{
}
 8006e74:	4770      	bx	lr

08006e76 <HardFault_Handler>:

void HardFault_Handler(void)
{
  while (1)
  {
    __NOP();
 8006e76:	bf00      	nop
 8006e78:	e7fd      	b.n	8006e76 <HardFault_Handler>

08006e7a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8006e7a:	e7fe      	b.n	8006e7a <MemManage_Handler>

08006e7c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8006e7c:	e7fe      	b.n	8006e7c <BusFault_Handler>

08006e7e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8006e7e:	e7fe      	b.n	8006e7e <UsageFault_Handler>

08006e80 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 8006e80:	4770      	bx	lr

08006e82 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 8006e82:	4770      	bx	lr

08006e84 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 8006e84:	4770      	bx	lr

08006e86 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8006e86:	b508      	push	{r3, lr}
  HAL_IncTick();
 8006e88:	f7fb fd80 	bl	800298c <HAL_IncTick>
}
 8006e8c:	bd08      	pop	{r3, pc}

08006e8e <USART2_IRQHandler>:
  */
/*void PPP_IRQHandler(void)
{
}*/
void USARTx_IRQHandler(void)
{
 8006e8e:	b508      	push	{r3, lr}
  vcom_IRQHandler();
 8006e90:	f000 fa3c 	bl	800730c <vcom_IRQHandler>
}
 8006e94:	bd08      	pop	{r3, pc}

08006e96 <DMA1_Channel7_IRQHandler>:

void USARTx_DMA_TX_IRQHandler(void)
{
 8006e96:	b508      	push	{r3, lr}
  vcom_DMA_TX_IRQHandler();
 8006e98:	f000 fa30 	bl	80072fc <vcom_DMA_TX_IRQHandler>
}
 8006e9c:	bd08      	pop	{r3, pc}

08006e9e <RTC_Alarm_IRQHandler>:

void RTC_Alarm_IRQHandler(void)
{
 8006e9e:	b508      	push	{r3, lr}
  HW_RTC_IrqHandler();
 8006ea0:	f7ff f962 	bl	8006168 <HW_RTC_IrqHandler>
}
 8006ea4:	bd08      	pop	{r3, pc}

08006ea6 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8006ea6:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8006ea8:	2001      	movs	r0, #1
 8006eaa:	f7fc fae9 	bl	8003480 <HAL_GPIO_EXTI_IRQHandler>
}
 8006eae:	bd08      	pop	{r3, pc}

08006eb0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8006eb0:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8006eb2:	2002      	movs	r0, #2
 8006eb4:	f7fc fae4 	bl	8003480 <HAL_GPIO_EXTI_IRQHandler>
}
 8006eb8:	bd08      	pop	{r3, pc}

08006eba <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8006eba:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8006ebc:	2004      	movs	r0, #4
 8006ebe:	f7fc fadf 	bl	8003480 <HAL_GPIO_EXTI_IRQHandler>
}
 8006ec2:	bd08      	pop	{r3, pc}

08006ec4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8006ec4:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8006ec6:	2008      	movs	r0, #8
 8006ec8:	f7fc fada 	bl	8003480 <HAL_GPIO_EXTI_IRQHandler>
}
 8006ecc:	bd08      	pop	{r3, pc}

08006ece <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8006ece:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8006ed0:	2010      	movs	r0, #16
 8006ed2:	f7fc fad5 	bl	8003480 <HAL_GPIO_EXTI_IRQHandler>
}
 8006ed6:	bd08      	pop	{r3, pc}

08006ed8 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 8006ed8:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8006eda:	2020      	movs	r0, #32
 8006edc:	f7fc fad0 	bl	8003480 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8006ee0:	2040      	movs	r0, #64	; 0x40
 8006ee2:	f7fc facd 	bl	8003480 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8006ee6:	2080      	movs	r0, #128	; 0x80
 8006ee8:	f7fc faca 	bl	8003480 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8006eec:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006ef0:	f7fc fac6 	bl	8003480 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8006ef4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006ef8:	f7fc fac2 	bl	8003480 <HAL_GPIO_EXTI_IRQHandler>
}
 8006efc:	bd08      	pop	{r3, pc}

08006efe <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8006efe:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8006f00:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006f04:	f7fc fabc 	bl	8003480 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8006f08:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006f0c:	f7fc fab8 	bl	8003480 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8006f10:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006f14:	f7fc fab4 	bl	8003480 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8006f18:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006f1c:	f7fc fab0 	bl	8003480 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8006f20:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006f24:	f7fc faac 	bl	8003480 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8006f28:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006f2c:	f7fc faa8 	bl	8003480 <HAL_GPIO_EXTI_IRQHandler>
}
 8006f30:	bd08      	pop	{r3, pc}
	...

08006f34 <TimerExists>:
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
}

static bool TimerExists( TimerEvent_t *obj )
{
  TimerEvent_t* cur = TimerListHead;
 8006f34:	4b05      	ldr	r3, [pc, #20]	; (8006f4c <TimerExists+0x18>)
 8006f36:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8006f38:	b11b      	cbz	r3, 8006f42 <TimerExists+0xe>
  {
    if( cur == obj )
 8006f3a:	4283      	cmp	r3, r0
 8006f3c:	d003      	beq.n	8006f46 <TimerExists+0x12>
    {
      return true;
    }
    cur = cur->Next;
 8006f3e:	695b      	ldr	r3, [r3, #20]
 8006f40:	e7fa      	b.n	8006f38 <TimerExists+0x4>
  }
  return false;
 8006f42:	2000      	movs	r0, #0
 8006f44:	4770      	bx	lr
      return true;
 8006f46:	2001      	movs	r0, #1
}
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	20000390 	.word	0x20000390

08006f50 <TimerInsertTimer>:
}


static void TimerInsertTimer( TimerEvent_t *obj)
{
  TimerEvent_t* cur = TimerListHead;
 8006f50:	4b0d      	ldr	r3, [pc, #52]	; (8006f88 <TimerInsertTimer+0x38>)
 8006f52:	681a      	ldr	r2, [r3, #0]
  TimerEvent_t* next = TimerListHead->Next;
 8006f54:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8006f56:	6951      	ldr	r1, [r2, #20]
 8006f58:	b191      	cbz	r1, 8006f80 <TimerInsertTimer+0x30>
{
 8006f5a:	b410      	push	{r4}
  {  
    if( obj->Timestamp  > next->Timestamp )
 8006f5c:	6804      	ldr	r4, [r0, #0]
 8006f5e:	6819      	ldr	r1, [r3, #0]
 8006f60:	428c      	cmp	r4, r1
 8006f62:	d908      	bls.n	8006f76 <TimerInsertTimer+0x26>
    {
        cur = next;
 8006f64:	461a      	mov	r2, r3
        next = next->Next;
 8006f66:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8006f68:	6951      	ldr	r1, [r2, #20]
 8006f6a:	2900      	cmp	r1, #0
 8006f6c:	d1f6      	bne.n	8006f5c <TimerInsertTimer+0xc>
        obj->Next = next;
        return;

    }
  }
  cur->Next = obj;
 8006f6e:	6150      	str	r0, [r2, #20]
  obj->Next = NULL;
 8006f70:	2300      	movs	r3, #0
 8006f72:	6143      	str	r3, [r0, #20]
 8006f74:	e001      	b.n	8006f7a <TimerInsertTimer+0x2a>
        cur->Next = obj;
 8006f76:	6150      	str	r0, [r2, #20]
        obj->Next = next;
 8006f78:	6143      	str	r3, [r0, #20]
}
 8006f7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f7e:	4770      	bx	lr
  cur->Next = obj;
 8006f80:	6150      	str	r0, [r2, #20]
  obj->Next = NULL;
 8006f82:	2300      	movs	r3, #0
 8006f84:	6143      	str	r3, [r0, #20]
 8006f86:	4770      	bx	lr
 8006f88:	20000390 	.word	0x20000390

08006f8c <TimerSetTimeout>:
{
 8006f8c:	b570      	push	{r4, r5, r6, lr}
 8006f8e:	4604      	mov	r4, r0
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 8006f90:	f7fe ffde 	bl	8005f50 <HW_RTC_GetMinimumTimeout>
 8006f94:	4605      	mov	r5, r0
  obj->IsNext2Expire = true; 
 8006f96:	2301      	movs	r3, #1
 8006f98:	7263      	strb	r3, [r4, #9]
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 8006f9a:	6826      	ldr	r6, [r4, #0]
 8006f9c:	f7fe ffee 	bl	8005f7c <HW_RTC_GetTimerElapsedTime>
 8006fa0:	4428      	add	r0, r5
 8006fa2:	4286      	cmp	r6, r0
 8006fa4:	d303      	bcc.n	8006fae <TimerSetTimeout+0x22>
  HW_RTC_SetAlarm( obj->Timestamp );
 8006fa6:	6820      	ldr	r0, [r4, #0]
 8006fa8:	f7ff f8ba 	bl	8006120 <HW_RTC_SetAlarm>
}
 8006fac:	bd70      	pop	{r4, r5, r6, pc}
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 8006fae:	f7fe ffe5 	bl	8005f7c <HW_RTC_GetTimerElapsedTime>
 8006fb2:	4428      	add	r0, r5
 8006fb4:	6020      	str	r0, [r4, #0]
 8006fb6:	e7f6      	b.n	8006fa6 <TimerSetTimeout+0x1a>

08006fb8 <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
 8006fb8:	b508      	push	{r3, lr}
  TimerEvent_t* cur = TimerListHead;
 8006fba:	4b05      	ldr	r3, [pc, #20]	; (8006fd0 <TimerInsertNewHeadTimer+0x18>)
 8006fbc:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8006fbe:	b10b      	cbz	r3, 8006fc4 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsNext2Expire = false;
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	725a      	strb	r2, [r3, #9]
  }

  obj->Next = cur;
 8006fc4:	6143      	str	r3, [r0, #20]
  TimerListHead = obj;
 8006fc6:	4b02      	ldr	r3, [pc, #8]	; (8006fd0 <TimerInsertNewHeadTimer+0x18>)
 8006fc8:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8006fca:	f7ff ffdf 	bl	8006f8c <TimerSetTimeout>
}
 8006fce:	bd08      	pop	{r3, pc}
 8006fd0:	20000390 	.word	0x20000390

08006fd4 <TimerInit>:
  obj->Timestamp = 0;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	6003      	str	r3, [r0, #0]
  obj->ReloadValue = 0;
 8006fd8:	6043      	str	r3, [r0, #4]
  obj->IsStarted = false;
 8006fda:	7203      	strb	r3, [r0, #8]
  obj->IsNext2Expire = false;
 8006fdc:	7243      	strb	r3, [r0, #9]
  obj->Callback = callback;
 8006fde:	60c1      	str	r1, [r0, #12]
  obj->Context = NULL;
 8006fe0:	6103      	str	r3, [r0, #16]
  obj->Next = NULL;
 8006fe2:	6143      	str	r3, [r0, #20]
}
 8006fe4:	4770      	bx	lr
	...

08006fe8 <TimerStart>:
{
 8006fe8:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fea:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006fee:	b672      	cpsid	i
  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8006ff0:	b1e0      	cbz	r0, 800702c <TimerStart+0x44>
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	f7ff ff9e 	bl	8006f34 <TimerExists>
 8006ff8:	b9c0      	cbnz	r0, 800702c <TimerStart+0x44>
  obj->Timestamp = obj->ReloadValue;
 8006ffa:	6863      	ldr	r3, [r4, #4]
 8006ffc:	6023      	str	r3, [r4, #0]
  obj->IsStarted = true;
 8006ffe:	2301      	movs	r3, #1
 8007000:	7223      	strb	r3, [r4, #8]
  obj->IsNext2Expire = false;
 8007002:	2300      	movs	r3, #0
 8007004:	7263      	strb	r3, [r4, #9]
  if( TimerListHead == NULL )
 8007006:	4b10      	ldr	r3, [pc, #64]	; (8007048 <TimerStart+0x60>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	b193      	cbz	r3, 8007032 <TimerStart+0x4a>
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 800700c:	f7fe ffb6 	bl	8005f7c <HW_RTC_GetTimerElapsedTime>
    obj->Timestamp += elapsedTime;
 8007010:	6823      	ldr	r3, [r4, #0]
 8007012:	4418      	add	r0, r3
 8007014:	6020      	str	r0, [r4, #0]
    if( obj->Timestamp < TimerListHead->Timestamp )
 8007016:	4b0c      	ldr	r3, [pc, #48]	; (8007048 <TimerStart+0x60>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4298      	cmp	r0, r3
 800701e:	d20e      	bcs.n	800703e <TimerStart+0x56>
      TimerInsertNewHeadTimer( obj);
 8007020:	4620      	mov	r0, r4
 8007022:	f7ff ffc9 	bl	8006fb8 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007026:	f385 8810 	msr	PRIMASK, r5
 800702a:	e001      	b.n	8007030 <TimerStart+0x48>
 800702c:	f385 8810 	msr	PRIMASK, r5
}
 8007030:	bd38      	pop	{r3, r4, r5, pc}
    HW_RTC_SetTimerContext( );
 8007032:	f7ff f8cb 	bl	80061cc <HW_RTC_SetTimerContext>
    TimerInsertNewHeadTimer( obj ); // insert a timeout at now+obj->Timestamp
 8007036:	4620      	mov	r0, r4
 8007038:	f7ff ffbe 	bl	8006fb8 <TimerInsertNewHeadTimer>
 800703c:	e7f3      	b.n	8007026 <TimerStart+0x3e>
      TimerInsertTimer( obj);
 800703e:	4620      	mov	r0, r4
 8007040:	f7ff ff86 	bl	8006f50 <TimerInsertTimer>
 8007044:	e7ef      	b.n	8007026 <TimerStart+0x3e>
 8007046:	bf00      	nop
 8007048:	20000390 	.word	0x20000390

0800704c <TimerIrqHandler>:
{
 800704c:	b510      	push	{r4, lr}
  uint32_t old =  HW_RTC_GetTimerContext( );
 800704e:	f7ff f8dd 	bl	800620c <HW_RTC_GetTimerContext>
 8007052:	4604      	mov	r4, r0
  uint32_t now =  HW_RTC_SetTimerContext( );
 8007054:	f7ff f8ba 	bl	80061cc <HW_RTC_SetTimerContext>
  uint32_t DeltaContext = now - old; //intentionnal wrap around
 8007058:	1b00      	subs	r0, r0, r4
  if ( TimerListHead != NULL )
 800705a:	4b1b      	ldr	r3, [pc, #108]	; (80070c8 <TimerIrqHandler+0x7c>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	b163      	cbz	r3, 800707a <TimerIrqHandler+0x2e>
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 8007060:	461c      	mov	r4, r3
 8007062:	e002      	b.n	800706a <TimerIrqHandler+0x1e>
        next->Timestamp = 0 ;
 8007064:	2100      	movs	r1, #0
 8007066:	6011      	str	r1, [r2, #0]
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 8007068:	6964      	ldr	r4, [r4, #20]
 800706a:	6962      	ldr	r2, [r4, #20]
 800706c:	b12a      	cbz	r2, 800707a <TimerIrqHandler+0x2e>
      if (next->Timestamp > DeltaContext)
 800706e:	6811      	ldr	r1, [r2, #0]
 8007070:	4281      	cmp	r1, r0
 8007072:	d9f7      	bls.n	8007064 <TimerIrqHandler+0x18>
        next->Timestamp -= DeltaContext;
 8007074:	1a09      	subs	r1, r1, r0
 8007076:	6011      	str	r1, [r2, #0]
 8007078:	e7f6      	b.n	8007068 <TimerIrqHandler+0x1c>
  if ( TimerListHead != NULL )
 800707a:	b143      	cbz	r3, 800708e <TimerIrqHandler+0x42>
    TimerListHead = TimerListHead->Next;
 800707c:	6959      	ldr	r1, [r3, #20]
 800707e:	4a12      	ldr	r2, [pc, #72]	; (80070c8 <TimerIrqHandler+0x7c>)
 8007080:	6011      	str	r1, [r2, #0]
    cur->IsStarted = false;
 8007082:	2200      	movs	r2, #0
 8007084:	721a      	strb	r2, [r3, #8]
    exec_cb( cur->Callback, cur->Context );
 8007086:	68da      	ldr	r2, [r3, #12]
 8007088:	b1a2      	cbz	r2, 80070b4 <TimerIrqHandler+0x68>
 800708a:	6918      	ldr	r0, [r3, #16]
 800708c:	4790      	blx	r2
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 800708e:	4b0e      	ldr	r3, [pc, #56]	; (80070c8 <TimerIrqHandler+0x7c>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	b18b      	cbz	r3, 80070b8 <TimerIrqHandler+0x6c>
 8007094:	681c      	ldr	r4, [r3, #0]
 8007096:	f7fe ff71 	bl	8005f7c <HW_RTC_GetTimerElapsedTime>
 800709a:	4284      	cmp	r4, r0
 800709c:	d20c      	bcs.n	80070b8 <TimerIrqHandler+0x6c>
   cur = TimerListHead;
 800709e:	4a0a      	ldr	r2, [pc, #40]	; (80070c8 <TimerIrqHandler+0x7c>)
 80070a0:	6813      	ldr	r3, [r2, #0]
   TimerListHead = TimerListHead->Next;
 80070a2:	6959      	ldr	r1, [r3, #20]
 80070a4:	6011      	str	r1, [r2, #0]
   cur->IsStarted = false;
 80070a6:	2200      	movs	r2, #0
 80070a8:	721a      	strb	r2, [r3, #8]
   exec_cb( cur->Callback, cur->Context );
 80070aa:	68da      	ldr	r2, [r3, #12]
 80070ac:	b11a      	cbz	r2, 80070b6 <TimerIrqHandler+0x6a>
 80070ae:	6918      	ldr	r0, [r3, #16]
 80070b0:	4790      	blx	r2
 80070b2:	e7ec      	b.n	800708e <TimerIrqHandler+0x42>
 80070b4:	e7fe      	b.n	80070b4 <TimerIrqHandler+0x68>
 80070b6:	e7fe      	b.n	80070b6 <TimerIrqHandler+0x6a>
  if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 80070b8:	4b03      	ldr	r3, [pc, #12]	; (80070c8 <TimerIrqHandler+0x7c>)
 80070ba:	6818      	ldr	r0, [r3, #0]
 80070bc:	b118      	cbz	r0, 80070c6 <TimerIrqHandler+0x7a>
 80070be:	7a43      	ldrb	r3, [r0, #9]
 80070c0:	b90b      	cbnz	r3, 80070c6 <TimerIrqHandler+0x7a>
    TimerSetTimeout( TimerListHead );
 80070c2:	f7ff ff63 	bl	8006f8c <TimerSetTimeout>
}
 80070c6:	bd10      	pop	{r4, pc}
 80070c8:	20000390 	.word	0x20000390

080070cc <TimerStop>:
{
 80070cc:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070ce:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80070d2:	b672      	cpsid	i
  TimerEvent_t* prev = TimerListHead;
 80070d4:	4b1a      	ldr	r3, [pc, #104]	; (8007140 <TimerStop+0x74>)
 80070d6:	681a      	ldr	r2, [r3, #0]
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 80070d8:	b15a      	cbz	r2, 80070f2 <TimerStop+0x26>
 80070da:	b150      	cbz	r0, 80070f2 <TimerStop+0x26>
  obj->IsStarted = false;
 80070dc:	2300      	movs	r3, #0
 80070de:	7203      	strb	r3, [r0, #8]
  if( TimerListHead == obj ) // Stop the Head                  
 80070e0:	4282      	cmp	r2, r0
 80070e2:	d009      	beq.n	80070f8 <TimerStop+0x2c>
  TimerEvent_t* cur = TimerListHead;
 80070e4:	4613      	mov	r3, r2
    while( cur != NULL )
 80070e6:	b323      	cbz	r3, 8007132 <TimerStop+0x66>
      if( cur == obj )
 80070e8:	4283      	cmp	r3, r0
 80070ea:	d01f      	beq.n	800712c <TimerStop+0x60>
        prev = cur;
 80070ec:	461a      	mov	r2, r3
        cur = cur->Next;
 80070ee:	695b      	ldr	r3, [r3, #20]
 80070f0:	e7f9      	b.n	80070e6 <TimerStop+0x1a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070f2:	f384 8810 	msr	PRIMASK, r4
 80070f6:	e01e      	b.n	8007136 <TimerStop+0x6a>
    if( TimerListHead->IsNext2Expire == true ) // The head is already running 
 80070f8:	7a53      	ldrb	r3, [r2, #9]
 80070fa:	b173      	cbz	r3, 800711a <TimerStop+0x4e>
      TimerListHead->IsNext2Expire = false;
 80070fc:	2300      	movs	r3, #0
 80070fe:	7253      	strb	r3, [r2, #9]
      if( TimerListHead->Next != NULL )
 8007100:	6950      	ldr	r0, [r2, #20]
 8007102:	b120      	cbz	r0, 800710e <TimerStop+0x42>
        TimerListHead = TimerListHead->Next;
 8007104:	4b0e      	ldr	r3, [pc, #56]	; (8007140 <TimerStop+0x74>)
 8007106:	6018      	str	r0, [r3, #0]
        TimerSetTimeout( TimerListHead );
 8007108:	f7ff ff40 	bl	8006f8c <TimerSetTimeout>
 800710c:	e011      	b.n	8007132 <TimerStop+0x66>
        HW_RTC_StopAlarm( );
 800710e:	f7fe ff4d 	bl	8005fac <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 8007112:	4b0b      	ldr	r3, [pc, #44]	; (8007140 <TimerStop+0x74>)
 8007114:	2200      	movs	r2, #0
 8007116:	601a      	str	r2, [r3, #0]
 8007118:	e00b      	b.n	8007132 <TimerStop+0x66>
      if( TimerListHead->Next != NULL )   
 800711a:	6953      	ldr	r3, [r2, #20]
 800711c:	b113      	cbz	r3, 8007124 <TimerStop+0x58>
        TimerListHead = TimerListHead->Next;
 800711e:	4a08      	ldr	r2, [pc, #32]	; (8007140 <TimerStop+0x74>)
 8007120:	6013      	str	r3, [r2, #0]
 8007122:	e006      	b.n	8007132 <TimerStop+0x66>
        TimerListHead = NULL;
 8007124:	4b06      	ldr	r3, [pc, #24]	; (8007140 <TimerStop+0x74>)
 8007126:	2200      	movs	r2, #0
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	e002      	b.n	8007132 <TimerStop+0x66>
        if( cur->Next != NULL )
 800712c:	695b      	ldr	r3, [r3, #20]
 800712e:	b11b      	cbz	r3, 8007138 <TimerStop+0x6c>
          prev->Next = cur;
 8007130:	6153      	str	r3, [r2, #20]
 8007132:	f384 8810 	msr	PRIMASK, r4
}  
 8007136:	bd10      	pop	{r4, pc}
          prev->Next = cur;
 8007138:	2300      	movs	r3, #0
 800713a:	6153      	str	r3, [r2, #20]
 800713c:	e7f9      	b.n	8007132 <TimerStop+0x66>
 800713e:	bf00      	nop
 8007140:	20000390 	.word	0x20000390

08007144 <TimerSetValue>:
{
 8007144:	b538      	push	{r3, r4, r5, lr}
 8007146:	4604      	mov	r4, r0
  uint32_t ticks = HW_RTC_ms2Tick( value );
 8007148:	4608      	mov	r0, r1
 800714a:	f7fe ff03 	bl	8005f54 <HW_RTC_ms2Tick>
 800714e:	4605      	mov	r5, r0
  TimerStop( obj );
 8007150:	4620      	mov	r0, r4
 8007152:	f7ff ffbb 	bl	80070cc <TimerStop>
  minValue = HW_RTC_GetMinimumTimeout( );
 8007156:	f7fe fefb 	bl	8005f50 <HW_RTC_GetMinimumTimeout>
  if( ticks < minValue )
 800715a:	4285      	cmp	r5, r0
 800715c:	d202      	bcs.n	8007164 <TimerSetValue+0x20>
  obj->Timestamp = ticks;
 800715e:	6020      	str	r0, [r4, #0]
  obj->ReloadValue = ticks;
 8007160:	6060      	str	r0, [r4, #4]
}
 8007162:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t ticks = HW_RTC_ms2Tick( value );
 8007164:	4628      	mov	r0, r5
 8007166:	e7fa      	b.n	800715e <TimerSetValue+0x1a>

08007168 <TimerGetCurrentTime>:
{
 8007168:	b508      	push	{r3, lr}
  uint32_t now = HW_RTC_GetTimerValue( );
 800716a:	f7fe ff15 	bl	8005f98 <HW_RTC_GetTimerValue>
  return  HW_RTC_Tick2ms(now);
 800716e:	f7fe fefa 	bl	8005f66 <HW_RTC_Tick2ms>
}
 8007172:	bd08      	pop	{r3, pc}

08007174 <TimerGetElapsedTime>:
{
 8007174:	b538      	push	{r3, r4, r5, lr}
  if ( past == 0 )
 8007176:	4604      	mov	r4, r0
 8007178:	b908      	cbnz	r0, 800717e <TimerGetElapsedTime+0xa>
}
 800717a:	4620      	mov	r0, r4
 800717c:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t nowInTicks = HW_RTC_GetTimerValue( );
 800717e:	f7fe ff0b 	bl	8005f98 <HW_RTC_GetTimerValue>
 8007182:	4605      	mov	r5, r0
  uint32_t pastInTicks = HW_RTC_ms2Tick( past );
 8007184:	4620      	mov	r0, r4
 8007186:	f7fe fee5 	bl	8005f54 <HW_RTC_ms2Tick>
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 800718a:	1a28      	subs	r0, r5, r0
 800718c:	f7fe feeb 	bl	8005f66 <HW_RTC_Tick2ms>
 8007190:	4604      	mov	r4, r0
 8007192:	e7f2      	b.n	800717a <TimerGetElapsedTime+0x6>

08007194 <Trace_TxCpltCallback>:
}

/* Private Functions Definition ------------------------------------------------------*/

static void Trace_TxCpltCallback(void)
{
 8007194:	b530      	push	{r4, r5, lr}
 8007196:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007198:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800719c:	b672      	cpsid	i

  BACKUP_PRIMASK();

  DISABLE_IRQ(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  circular_queue_remove(&MsgTraceQueue);
 800719e:	4c10      	ldr	r4, [pc, #64]	; (80071e0 <Trace_TxCpltCallback+0x4c>)
 80071a0:	4620      	mov	r0, r4
 80071a2:	f7ff fc01 	bl	80069a8 <circular_queue_remove>
  //DBG_GPIO_SET(GPIOB, GPIO_PIN_13);
  //DBG_GPIO_RST(GPIOB, GPIO_PIN_13);
  /* Sense if new data to be sent */
  status=circular_queue_sense(&MsgTraceQueue);
 80071a6:	4620      	mov	r0, r4
 80071a8:	f7ff fc2c 	bl	8006a04 <circular_queue_sense>

  if ( status == 0) 
 80071ac:	b150      	cbz	r0, 80071c4 <Trace_TxCpltCallback+0x30>
  }
  else
  {
    //DBG_GPIO_SET(GPIOB, GPIO_PIN_12);

    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
 80071ae:	2100      	movs	r1, #0
 80071b0:	2020      	movs	r0, #32
 80071b2:	f7ff f91f 	bl	80063f4 <LPM_SetStopMode>
    TracePeripheralReady = SET;
 80071b6:	4b0b      	ldr	r3, [pc, #44]	; (80071e4 <Trace_TxCpltCallback+0x50>)
 80071b8:	2201      	movs	r2, #1
 80071ba:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071bc:	f385 8810 	msr	PRIMASK, r5
    RESTORE_PRIMASK();
  }
}
 80071c0:	b003      	add	sp, #12
 80071c2:	bd30      	pop	{r4, r5, pc}
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 80071c4:	f10d 0202 	add.w	r2, sp, #2
 80071c8:	a901      	add	r1, sp, #4
 80071ca:	4620      	mov	r0, r4
 80071cc:	f7ff fbcd 	bl	800696a <circular_queue_get>
 80071d0:	f385 8810 	msr	PRIMASK, r5
    OutputTrace(buffer, bufSize);
 80071d4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80071d8:	9801      	ldr	r0, [sp, #4]
 80071da:	f000 f87d 	bl	80072d8 <vcom_Trace>
 80071de:	e7ef      	b.n	80071c0 <Trace_TxCpltCallback+0x2c>
 80071e0:	20000394 	.word	0x20000394
 80071e4:	2000003a 	.word	0x2000003a

080071e8 <TraceInit>:
{
 80071e8:	b508      	push	{r3, lr}
  OutputInit(Trace_TxCpltCallback);
 80071ea:	4805      	ldr	r0, [pc, #20]	; (8007200 <TraceInit+0x18>)
 80071ec:	f000 f858 	bl	80072a0 <vcom_Init>
  circular_queue_init(&MsgTraceQueue, MsgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE);
 80071f0:	4804      	ldr	r0, [pc, #16]	; (8007204 <TraceInit+0x1c>)
 80071f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071f6:	f100 0110 	add.w	r1, r0, #16
 80071fa:	f7ff fb44 	bl	8006886 <circular_queue_init>
}
 80071fe:	bd08      	pop	{r3, pc}
 8007200:	08007195 	.word	0x08007195
 8007204:	20000394 	.word	0x20000394

08007208 <TraceSend>:
{
 8007208:	b40f      	push	{r0, r1, r2, r3}
 800720a:	b530      	push	{r4, r5, lr}
 800720c:	b0c5      	sub	sp, #276	; 0x114
 800720e:	ab48      	add	r3, sp, #288	; 0x120
 8007210:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start( vaArgs, strFormat);
 8007214:	9303      	str	r3, [sp, #12]
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 8007216:	f44f 7180 	mov.w	r1, #256	; 0x100
 800721a:	a804      	add	r0, sp, #16
 800721c:	f000 fa04 	bl	8007628 <vsniprintf>
 8007220:	f8ad 0006 	strh.w	r0, [sp, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007224:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007228:	b672      	cpsid	i
  status =circular_queue_add(&MsgTraceQueue,(uint8_t*)buf, bufSize);
 800722a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800722e:	a904      	add	r1, sp, #16
 8007230:	4813      	ldr	r0, [pc, #76]	; (8007280 <TraceSend+0x78>)
 8007232:	f7ff fb30 	bl	8006896 <circular_queue_add>
  if ((status==0 ) && (TracePeripheralReady==SET))
 8007236:	4604      	mov	r4, r0
 8007238:	b920      	cbnz	r0, 8007244 <TraceSend+0x3c>
 800723a:	4b12      	ldr	r3, [pc, #72]	; (8007284 <TraceSend+0x7c>)
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2b01      	cmp	r3, #1
 8007242:	d007      	beq.n	8007254 <TraceSend+0x4c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007244:	f385 8810 	msr	PRIMASK, r5
}
 8007248:	4620      	mov	r0, r4
 800724a:	b045      	add	sp, #276	; 0x114
 800724c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007250:	b004      	add	sp, #16
 8007252:	4770      	bx	lr
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 8007254:	f10d 0206 	add.w	r2, sp, #6
 8007258:	a902      	add	r1, sp, #8
 800725a:	4809      	ldr	r0, [pc, #36]	; (8007280 <TraceSend+0x78>)
 800725c:	f7ff fb85 	bl	800696a <circular_queue_get>
    TracePeripheralReady = RESET;
 8007260:	4b08      	ldr	r3, [pc, #32]	; (8007284 <TraceSend+0x7c>)
 8007262:	2200      	movs	r2, #0
 8007264:	701a      	strb	r2, [r3, #0]
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 8007266:	2101      	movs	r1, #1
 8007268:	2020      	movs	r0, #32
 800726a:	f7ff f8c3 	bl	80063f4 <LPM_SetStopMode>
 800726e:	f385 8810 	msr	PRIMASK, r5
    OutputTrace(buffer, bufSize);
 8007272:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8007276:	9802      	ldr	r0, [sp, #8]
 8007278:	f000 f82e 	bl	80072d8 <vcom_Trace>
 800727c:	e7e4      	b.n	8007248 <TraceSend+0x40>
 800727e:	bf00      	nop
 8007280:	20000394 	.word	0x20000394
 8007284:	2000003a 	.word	0x2000003a

08007288 <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8007288:	e004      	b.n	8007294 <memcpy1+0xc>
    {
        *dst++ = *src++;
 800728a:	780a      	ldrb	r2, [r1, #0]
 800728c:	7002      	strb	r2, [r0, #0]
    while( size-- )
 800728e:	461a      	mov	r2, r3
        *dst++ = *src++;
 8007290:	3101      	adds	r1, #1
 8007292:	3001      	adds	r0, #1
    while( size-- )
 8007294:	1e53      	subs	r3, r2, #1
 8007296:	b29b      	uxth	r3, r3
 8007298:	2a00      	cmp	r2, #0
 800729a:	d1f6      	bne.n	800728a <memcpy1+0x2>
    }
}
 800729c:	4770      	bx	lr
	...

080072a0 <vcom_Init>:

static void (*TxCpltCallback)(void);
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/
void vcom_Init(void (*TxCb)(void))
{
 80072a0:	b508      	push	{r3, lr}

  /*Record Tx complete for DMA*/
  TxCpltCallback = TxCb;
 80072a2:	4b0b      	ldr	r3, [pc, #44]	; (80072d0 <vcom_Init+0x30>)
 80072a4:	6018      	str	r0, [r3, #0]
      - Word Length = 8 Bits
      - Stop Bit = One Stop bit
      - Parity = ODD parity
      - BaudRate = 921600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTx;
 80072a6:	4a0b      	ldr	r2, [pc, #44]	; (80072d4 <vcom_Init+0x34>)
 80072a8:	605a      	str	r2, [r3, #4]

  UartHandle.Init.BaudRate   = 115200;
 80072aa:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80072ae:	609a      	str	r2, [r3, #8]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80072b0:	2200      	movs	r2, #0
 80072b2:	60da      	str	r2, [r3, #12]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80072b4:	611a      	str	r2, [r3, #16]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 80072b6:	615a      	str	r2, [r3, #20]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80072b8:	61da      	str	r2, [r3, #28]
  UartHandle.Init.Mode       = UART_MODE_TX;
 80072ba:	2208      	movs	r2, #8
 80072bc:	619a      	str	r2, [r3, #24]

  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 80072be:	1d18      	adds	r0, r3, #4
 80072c0:	f7fe fc83 	bl	8005bca <HAL_UART_Init>
 80072c4:	b900      	cbnz	r0, 80072c8 <vcom_Init+0x28>
  {
    /* Initialization Error */
    Error_Handler();
  }
}
 80072c6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80072c8:	f7fe fcf2 	bl	8005cb0 <Error_Handler>
}
 80072cc:	e7fb      	b.n	80072c6 <vcom_Init+0x26>
 80072ce:	bf00      	nop
 80072d0:	200004a4 	.word	0x200004a4
 80072d4:	40004400 	.word	0x40004400

080072d8 <vcom_Trace>:

void vcom_Trace(uint8_t *p_data, uint16_t size)
{
 80072d8:	b508      	push	{r3, lr}
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 80072da:	460a      	mov	r2, r1
 80072dc:	4601      	mov	r1, r0
 80072de:	4802      	ldr	r0, [pc, #8]	; (80072e8 <vcom_Trace+0x10>)
 80072e0:	f7fe f80a 	bl	80052f8 <HAL_UART_Transmit_DMA>
}
 80072e4:	bd08      	pop	{r3, pc}
 80072e6:	bf00      	nop
 80072e8:	200004a8 	.word	0x200004a8

080072ec <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80072ec:	b508      	push	{r3, lr}
  /* buffer transmission complete*/
  TxCpltCallback();
 80072ee:	4b02      	ldr	r3, [pc, #8]	; (80072f8 <HAL_UART_TxCpltCallback+0xc>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4798      	blx	r3
}
 80072f4:	bd08      	pop	{r3, pc}
 80072f6:	bf00      	nop
 80072f8:	200004a4 	.word	0x200004a4

080072fc <vcom_DMA_TX_IRQHandler>:

void vcom_DMA_TX_IRQHandler(void)
{
 80072fc:	b508      	push	{r3, lr}
  HAL_DMA_IRQHandler(UartHandle.hdmatx);
 80072fe:	4b02      	ldr	r3, [pc, #8]	; (8007308 <vcom_DMA_TX_IRQHandler+0xc>)
 8007300:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8007302:	f7fb ff70 	bl	80031e6 <HAL_DMA_IRQHandler>
}
 8007306:	bd08      	pop	{r3, pc}
 8007308:	200004a4 	.word	0x200004a4

0800730c <vcom_IRQHandler>:

void vcom_IRQHandler(void)
{
 800730c:	b508      	push	{r3, lr}
  HAL_UART_IRQHandler(&UartHandle);
 800730e:	4802      	ldr	r0, [pc, #8]	; (8007318 <vcom_IRQHandler+0xc>)
 8007310:	f7fe f89a 	bl	8005448 <HAL_UART_IRQHandler>
}
 8007314:	bd08      	pop	{r3, pc}
 8007316:	bf00      	nop
 8007318:	200004a8 	.word	0x200004a8

0800731c <vcom_IoInit>:
  /*##-4- Disable the NVIC for DMA ###########################################*/
  HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
}

void vcom_IoInit(void)
{
 800731c:	b510      	push	{r4, lr}
 800731e:	b088      	sub	sp, #32
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8007320:	2300      	movs	r3, #0
 8007322:	9305      	str	r3, [sp, #20]
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8007324:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007328:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800732c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800732e:	f042 0201 	orr.w	r2, r2, #1
 8007332:	64da      	str	r2, [r3, #76]	; 0x4c
 8007334:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007336:	f002 0201 	and.w	r2, r2, #1
 800733a:	9201      	str	r2, [sp, #4]
 800733c:	9a01      	ldr	r2, [sp, #4]
  USARTx_RX_GPIO_CLK_ENABLE();
 800733e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007340:	f042 0201 	orr.w	r2, r2, #1
 8007344:	64da      	str	r2, [r3, #76]	; 0x4c
 8007346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007348:	f003 0301 	and.w	r3, r3, #1
 800734c:	9302      	str	r3, [sp, #8]
 800734e:	9b02      	ldr	r3, [sp, #8]
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8007350:	2304      	movs	r3, #4
 8007352:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8007354:	2302      	movs	r3, #2
 8007356:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8007358:	2303      	movs	r3, #3
 800735a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800735c:	2407      	movs	r4, #7
 800735e:	9407      	str	r4, [sp, #28]

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8007360:	a903      	add	r1, sp, #12
 8007362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007366:	f7fb ffa1 	bl	80032ac <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800736a:	2308      	movs	r3, #8
 800736c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 800736e:	9407      	str	r4, [sp, #28]

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8007370:	a903      	add	r1, sp, #12
 8007372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007376:	f7fb ff99 	bl	80032ac <HAL_GPIO_Init>
}
 800737a:	b008      	add	sp, #32
 800737c:	bd10      	pop	{r4, pc}
	...

08007380 <HAL_UART_MspInit>:
  if (huart->Instance == USARTx)
 8007380:	6802      	ldr	r2, [r0, #0]
 8007382:	4b30      	ldr	r3, [pc, #192]	; (8007444 <HAL_UART_MspInit+0xc4>)
 8007384:	429a      	cmp	r2, r3
 8007386:	d000      	beq.n	800738a <HAL_UART_MspInit+0xa>
 8007388:	4770      	bx	lr
{
 800738a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800738c:	b085      	sub	sp, #20
 800738e:	4605      	mov	r5, r0
    USARTx_TX_GPIO_CLK_ENABLE();
 8007390:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8007394:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007396:	f042 0201 	orr.w	r2, r2, #1
 800739a:	64da      	str	r2, [r3, #76]	; 0x4c
 800739c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800739e:	f002 0201 	and.w	r2, r2, #1
 80073a2:	9200      	str	r2, [sp, #0]
 80073a4:	9a00      	ldr	r2, [sp, #0]
    USARTx_RX_GPIO_CLK_ENABLE();
 80073a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073a8:	f042 0201 	orr.w	r2, r2, #1
 80073ac:	64da      	str	r2, [r3, #76]	; 0x4c
 80073ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073b0:	f002 0201 	and.w	r2, r2, #1
 80073b4:	9201      	str	r2, [sp, #4]
 80073b6:	9a01      	ldr	r2, [sp, #4]
    USARTx_CLK_ENABLE();
 80073b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80073ba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80073be:	659a      	str	r2, [r3, #88]	; 0x58
 80073c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80073c2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80073c6:	9202      	str	r2, [sp, #8]
 80073c8:	9a02      	ldr	r2, [sp, #8]
    DMAx_CLK_ENABLE();
 80073ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80073cc:	f042 0201 	orr.w	r2, r2, #1
 80073d0:	649a      	str	r2, [r3, #72]	; 0x48
 80073d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073d4:	f003 0301 	and.w	r3, r3, #1
 80073d8:	9303      	str	r3, [sp, #12]
 80073da:	9b03      	ldr	r3, [sp, #12]
    vcom_IoInit();
 80073dc:	f7ff ff9e 	bl	800731c <vcom_IoInit>
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 80073e0:	4c19      	ldr	r4, [pc, #100]	; (8007448 <HAL_UART_MspInit+0xc8>)
 80073e2:	4b1a      	ldr	r3, [pc, #104]	; (800744c <HAL_UART_MspInit+0xcc>)
 80073e4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80073e8:	2310      	movs	r3, #16
 80073ea:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80073ee:	2600      	movs	r6, #0
 80073f0:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80073f4:	2380      	movs	r3, #128	; 0x80
 80073f6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80073fa:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 80073fe:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
    hdma_tx.Init.Mode                = DMA_NORMAL;
 8007402:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8007406:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 800740a:	2302      	movs	r3, #2
 800740c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    HAL_DMA_Init(&hdma_tx);
 8007410:	f104 0784 	add.w	r7, r4, #132	; 0x84
 8007414:	4638      	mov	r0, r7
 8007416:	f7fb fe07 	bl	8003028 <HAL_DMA_Init>
    __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 800741a:	66af      	str	r7, [r5, #104]	; 0x68
 800741c:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8007420:	2201      	movs	r2, #1
 8007422:	4631      	mov	r1, r6
 8007424:	2011      	movs	r0, #17
 8007426:	f7fb fda5 	bl	8002f74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 800742a:	2011      	movs	r0, #17
 800742c:	f7fb fdd6 	bl	8002fdc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 8007430:	2201      	movs	r2, #1
 8007432:	4631      	mov	r1, r6
 8007434:	2026      	movs	r0, #38	; 0x26
 8007436:	f7fb fd9d 	bl	8002f74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 800743a:	2026      	movs	r0, #38	; 0x26
 800743c:	f7fb fdce 	bl	8002fdc <HAL_NVIC_EnableIRQ>
}
 8007440:	b005      	add	sp, #20
 8007442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007444:	40004400 	.word	0x40004400
 8007448:	200004a4 	.word	0x200004a4
 800744c:	40020080 	.word	0x40020080

08007450 <vcom_IoDeInit>:

void vcom_IoDeInit(void)
{
 8007450:	b510      	push	{r4, lr}
 8007452:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 8007454:	2300      	movs	r3, #0
 8007456:	9303      	str	r3, [sp, #12]
 8007458:	9304      	str	r3, [sp, #16]
 800745a:	9305      	str	r3, [sp, #20]

  USARTx_TX_GPIO_CLK_ENABLE();
 800745c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007460:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8007464:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007466:	f042 0201 	orr.w	r2, r2, #1
 800746a:	64da      	str	r2, [r3, #76]	; 0x4c
 800746c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8007476:	2303      	movs	r3, #3
 8007478:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pull = GPIO_NOPULL;

  GPIO_InitStructure.Pin =  USARTx_TX_PIN ;
 800747a:	ac06      	add	r4, sp, #24
 800747c:	2304      	movs	r3, #4
 800747e:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStructure);
 8007482:	4621      	mov	r1, r4
 8007484:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007488:	f7fb ff10 	bl	80032ac <HAL_GPIO_Init>

  GPIO_InitStructure.Pin =  USARTx_RX_PIN ;
 800748c:	2308      	movs	r3, #8
 800748e:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStructure);
 8007490:	4621      	mov	r1, r4
 8007492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007496:	f7fb ff09 	bl	80032ac <HAL_GPIO_Init>
}
 800749a:	b006      	add	sp, #24
 800749c:	bd10      	pop	{r4, pc}
	...

080074a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80074a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80074d8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80074a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80074a6:	e003      	b.n	80074b0 <LoopCopyDataInit>

080074a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80074a8:	4b0c      	ldr	r3, [pc, #48]	; (80074dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80074aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80074ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80074ae:	3104      	adds	r1, #4

080074b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80074b0:	480b      	ldr	r0, [pc, #44]	; (80074e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80074b2:	4b0c      	ldr	r3, [pc, #48]	; (80074e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80074b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80074b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80074b8:	d3f6      	bcc.n	80074a8 <CopyDataInit>
	ldr	r2, =_sbss
 80074ba:	4a0b      	ldr	r2, [pc, #44]	; (80074e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80074bc:	e002      	b.n	80074c4 <LoopFillZerobss>

080074be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80074be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80074c0:	f842 3b04 	str.w	r3, [r2], #4

080074c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80074c4:	4b09      	ldr	r3, [pc, #36]	; (80074ec <LoopForever+0x16>)
	cmp	r2, r3
 80074c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80074c8:	d3f9      	bcc.n	80074be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80074ca:	f000 f813 	bl	80074f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80074ce:	f000 f835 	bl	800753c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80074d2:	f7ff f84f 	bl	8006574 <main>

080074d6 <LoopForever>:

LoopForever:
    b LoopForever
 80074d6:	e7fe      	b.n	80074d6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80074d8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80074dc:	080083d0 	.word	0x080083d0
	ldr	r0, =_sdata
 80074e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80074e4:	200000a8 	.word	0x200000a8
	ldr	r2, =_sbss
 80074e8:	200000a8 	.word	0x200000a8
	ldr	r3, = _ebss
 80074ec:	20000674 	.word	0x20000674

080074f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80074f0:	e7fe      	b.n	80074f0 <ADC1_2_IRQHandler>
	...

080074f4 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80074f4:	490f      	ldr	r1, [pc, #60]	; (8007534 <SystemInit+0x40>)
 80074f6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80074fa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80074fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007502:	4b0d      	ldr	r3, [pc, #52]	; (8007538 <SystemInit+0x44>)
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	f042 0201 	orr.w	r2, r2, #1
 800750a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800750c:	2000      	movs	r0, #0
 800750e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8007516:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800751a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800751c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007520:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007528:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800752a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800752c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007530:	608b      	str	r3, [r1, #8]
#endif
}
 8007532:	4770      	bx	lr
 8007534:	e000ed00 	.word	0xe000ed00
 8007538:	40021000 	.word	0x40021000

0800753c <__libc_init_array>:
 800753c:	b570      	push	{r4, r5, r6, lr}
 800753e:	4e0d      	ldr	r6, [pc, #52]	; (8007574 <__libc_init_array+0x38>)
 8007540:	4c0d      	ldr	r4, [pc, #52]	; (8007578 <__libc_init_array+0x3c>)
 8007542:	1ba4      	subs	r4, r4, r6
 8007544:	10a4      	asrs	r4, r4, #2
 8007546:	2500      	movs	r5, #0
 8007548:	42a5      	cmp	r5, r4
 800754a:	d109      	bne.n	8007560 <__libc_init_array+0x24>
 800754c:	4e0b      	ldr	r6, [pc, #44]	; (800757c <__libc_init_array+0x40>)
 800754e:	4c0c      	ldr	r4, [pc, #48]	; (8007580 <__libc_init_array+0x44>)
 8007550:	f000 fdb2 	bl	80080b8 <_init>
 8007554:	1ba4      	subs	r4, r4, r6
 8007556:	10a4      	asrs	r4, r4, #2
 8007558:	2500      	movs	r5, #0
 800755a:	42a5      	cmp	r5, r4
 800755c:	d105      	bne.n	800756a <__libc_init_array+0x2e>
 800755e:	bd70      	pop	{r4, r5, r6, pc}
 8007560:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007564:	4798      	blx	r3
 8007566:	3501      	adds	r5, #1
 8007568:	e7ee      	b.n	8007548 <__libc_init_array+0xc>
 800756a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800756e:	4798      	blx	r3
 8007570:	3501      	adds	r5, #1
 8007572:	e7f2      	b.n	800755a <__libc_init_array+0x1e>
 8007574:	080083c0 	.word	0x080083c0
 8007578:	080083c0 	.word	0x080083c0
 800757c:	080083c0 	.word	0x080083c0
 8007580:	080083c4 	.word	0x080083c4

08007584 <memcpy>:
 8007584:	b510      	push	{r4, lr}
 8007586:	1e43      	subs	r3, r0, #1
 8007588:	440a      	add	r2, r1
 800758a:	4291      	cmp	r1, r2
 800758c:	d100      	bne.n	8007590 <memcpy+0xc>
 800758e:	bd10      	pop	{r4, pc}
 8007590:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007594:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007598:	e7f7      	b.n	800758a <memcpy+0x6>

0800759a <memset>:
 800759a:	4402      	add	r2, r0
 800759c:	4603      	mov	r3, r0
 800759e:	4293      	cmp	r3, r2
 80075a0:	d100      	bne.n	80075a4 <memset+0xa>
 80075a2:	4770      	bx	lr
 80075a4:	f803 1b01 	strb.w	r1, [r3], #1
 80075a8:	e7f9      	b.n	800759e <memset+0x4>

080075aa <strncmp>:
 80075aa:	b510      	push	{r4, lr}
 80075ac:	b16a      	cbz	r2, 80075ca <strncmp+0x20>
 80075ae:	3901      	subs	r1, #1
 80075b0:	1884      	adds	r4, r0, r2
 80075b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80075b6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d103      	bne.n	80075c6 <strncmp+0x1c>
 80075be:	42a0      	cmp	r0, r4
 80075c0:	d001      	beq.n	80075c6 <strncmp+0x1c>
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1f5      	bne.n	80075b2 <strncmp+0x8>
 80075c6:	1a98      	subs	r0, r3, r2
 80075c8:	bd10      	pop	{r4, pc}
 80075ca:	4610      	mov	r0, r2
 80075cc:	e7fc      	b.n	80075c8 <strncmp+0x1e>

080075ce <_vsniprintf_r>:
 80075ce:	b530      	push	{r4, r5, lr}
 80075d0:	1e14      	subs	r4, r2, #0
 80075d2:	4605      	mov	r5, r0
 80075d4:	b09b      	sub	sp, #108	; 0x6c
 80075d6:	4618      	mov	r0, r3
 80075d8:	da05      	bge.n	80075e6 <_vsniprintf_r+0x18>
 80075da:	238b      	movs	r3, #139	; 0x8b
 80075dc:	602b      	str	r3, [r5, #0]
 80075de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075e2:	b01b      	add	sp, #108	; 0x6c
 80075e4:	bd30      	pop	{r4, r5, pc}
 80075e6:	f44f 7302 	mov.w	r3, #520	; 0x208
 80075ea:	f8ad 300c 	strh.w	r3, [sp, #12]
 80075ee:	bf14      	ite	ne
 80075f0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80075f4:	4623      	moveq	r3, r4
 80075f6:	9302      	str	r3, [sp, #8]
 80075f8:	9305      	str	r3, [sp, #20]
 80075fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80075fe:	9100      	str	r1, [sp, #0]
 8007600:	9104      	str	r1, [sp, #16]
 8007602:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007606:	4602      	mov	r2, r0
 8007608:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800760a:	4669      	mov	r1, sp
 800760c:	4628      	mov	r0, r5
 800760e:	f000 f8cd 	bl	80077ac <_svfiprintf_r>
 8007612:	1c43      	adds	r3, r0, #1
 8007614:	bfbc      	itt	lt
 8007616:	238b      	movlt	r3, #139	; 0x8b
 8007618:	602b      	strlt	r3, [r5, #0]
 800761a:	2c00      	cmp	r4, #0
 800761c:	d0e1      	beq.n	80075e2 <_vsniprintf_r+0x14>
 800761e:	9b00      	ldr	r3, [sp, #0]
 8007620:	2200      	movs	r2, #0
 8007622:	701a      	strb	r2, [r3, #0]
 8007624:	e7dd      	b.n	80075e2 <_vsniprintf_r+0x14>
	...

08007628 <vsniprintf>:
 8007628:	b507      	push	{r0, r1, r2, lr}
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	4613      	mov	r3, r2
 800762e:	460a      	mov	r2, r1
 8007630:	4601      	mov	r1, r0
 8007632:	4803      	ldr	r0, [pc, #12]	; (8007640 <vsniprintf+0x18>)
 8007634:	6800      	ldr	r0, [r0, #0]
 8007636:	f7ff ffca 	bl	80075ce <_vsniprintf_r>
 800763a:	b003      	add	sp, #12
 800763c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007640:	20000040 	.word	0x20000040

08007644 <_malloc_r>:
 8007644:	b570      	push	{r4, r5, r6, lr}
 8007646:	1ccd      	adds	r5, r1, #3
 8007648:	f025 0503 	bic.w	r5, r5, #3
 800764c:	3508      	adds	r5, #8
 800764e:	2d0c      	cmp	r5, #12
 8007650:	bf38      	it	cc
 8007652:	250c      	movcc	r5, #12
 8007654:	2d00      	cmp	r5, #0
 8007656:	4606      	mov	r6, r0
 8007658:	db01      	blt.n	800765e <_malloc_r+0x1a>
 800765a:	42a9      	cmp	r1, r5
 800765c:	d903      	bls.n	8007666 <_malloc_r+0x22>
 800765e:	230c      	movs	r3, #12
 8007660:	6033      	str	r3, [r6, #0]
 8007662:	2000      	movs	r0, #0
 8007664:	bd70      	pop	{r4, r5, r6, pc}
 8007666:	f000 fb4a 	bl	8007cfe <__malloc_lock>
 800766a:	4a21      	ldr	r2, [pc, #132]	; (80076f0 <_malloc_r+0xac>)
 800766c:	6814      	ldr	r4, [r2, #0]
 800766e:	4621      	mov	r1, r4
 8007670:	b991      	cbnz	r1, 8007698 <_malloc_r+0x54>
 8007672:	4c20      	ldr	r4, [pc, #128]	; (80076f4 <_malloc_r+0xb0>)
 8007674:	6823      	ldr	r3, [r4, #0]
 8007676:	b91b      	cbnz	r3, 8007680 <_malloc_r+0x3c>
 8007678:	4630      	mov	r0, r6
 800767a:	f000 fb17 	bl	8007cac <_sbrk_r>
 800767e:	6020      	str	r0, [r4, #0]
 8007680:	4629      	mov	r1, r5
 8007682:	4630      	mov	r0, r6
 8007684:	f000 fb12 	bl	8007cac <_sbrk_r>
 8007688:	1c43      	adds	r3, r0, #1
 800768a:	d124      	bne.n	80076d6 <_malloc_r+0x92>
 800768c:	230c      	movs	r3, #12
 800768e:	6033      	str	r3, [r6, #0]
 8007690:	4630      	mov	r0, r6
 8007692:	f000 fb35 	bl	8007d00 <__malloc_unlock>
 8007696:	e7e4      	b.n	8007662 <_malloc_r+0x1e>
 8007698:	680b      	ldr	r3, [r1, #0]
 800769a:	1b5b      	subs	r3, r3, r5
 800769c:	d418      	bmi.n	80076d0 <_malloc_r+0x8c>
 800769e:	2b0b      	cmp	r3, #11
 80076a0:	d90f      	bls.n	80076c2 <_malloc_r+0x7e>
 80076a2:	600b      	str	r3, [r1, #0]
 80076a4:	50cd      	str	r5, [r1, r3]
 80076a6:	18cc      	adds	r4, r1, r3
 80076a8:	4630      	mov	r0, r6
 80076aa:	f000 fb29 	bl	8007d00 <__malloc_unlock>
 80076ae:	f104 000b 	add.w	r0, r4, #11
 80076b2:	1d23      	adds	r3, r4, #4
 80076b4:	f020 0007 	bic.w	r0, r0, #7
 80076b8:	1ac3      	subs	r3, r0, r3
 80076ba:	d0d3      	beq.n	8007664 <_malloc_r+0x20>
 80076bc:	425a      	negs	r2, r3
 80076be:	50e2      	str	r2, [r4, r3]
 80076c0:	e7d0      	b.n	8007664 <_malloc_r+0x20>
 80076c2:	428c      	cmp	r4, r1
 80076c4:	684b      	ldr	r3, [r1, #4]
 80076c6:	bf16      	itet	ne
 80076c8:	6063      	strne	r3, [r4, #4]
 80076ca:	6013      	streq	r3, [r2, #0]
 80076cc:	460c      	movne	r4, r1
 80076ce:	e7eb      	b.n	80076a8 <_malloc_r+0x64>
 80076d0:	460c      	mov	r4, r1
 80076d2:	6849      	ldr	r1, [r1, #4]
 80076d4:	e7cc      	b.n	8007670 <_malloc_r+0x2c>
 80076d6:	1cc4      	adds	r4, r0, #3
 80076d8:	f024 0403 	bic.w	r4, r4, #3
 80076dc:	42a0      	cmp	r0, r4
 80076de:	d005      	beq.n	80076ec <_malloc_r+0xa8>
 80076e0:	1a21      	subs	r1, r4, r0
 80076e2:	4630      	mov	r0, r6
 80076e4:	f000 fae2 	bl	8007cac <_sbrk_r>
 80076e8:	3001      	adds	r0, #1
 80076ea:	d0cf      	beq.n	800768c <_malloc_r+0x48>
 80076ec:	6025      	str	r5, [r4, #0]
 80076ee:	e7db      	b.n	80076a8 <_malloc_r+0x64>
 80076f0:	20000570 	.word	0x20000570
 80076f4:	20000574 	.word	0x20000574

080076f8 <__ssputs_r>:
 80076f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076fc:	688e      	ldr	r6, [r1, #8]
 80076fe:	429e      	cmp	r6, r3
 8007700:	4682      	mov	sl, r0
 8007702:	460c      	mov	r4, r1
 8007704:	4690      	mov	r8, r2
 8007706:	4699      	mov	r9, r3
 8007708:	d837      	bhi.n	800777a <__ssputs_r+0x82>
 800770a:	898a      	ldrh	r2, [r1, #12]
 800770c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007710:	d031      	beq.n	8007776 <__ssputs_r+0x7e>
 8007712:	6825      	ldr	r5, [r4, #0]
 8007714:	6909      	ldr	r1, [r1, #16]
 8007716:	1a6f      	subs	r7, r5, r1
 8007718:	6965      	ldr	r5, [r4, #20]
 800771a:	2302      	movs	r3, #2
 800771c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007720:	fb95 f5f3 	sdiv	r5, r5, r3
 8007724:	f109 0301 	add.w	r3, r9, #1
 8007728:	443b      	add	r3, r7
 800772a:	429d      	cmp	r5, r3
 800772c:	bf38      	it	cc
 800772e:	461d      	movcc	r5, r3
 8007730:	0553      	lsls	r3, r2, #21
 8007732:	d530      	bpl.n	8007796 <__ssputs_r+0x9e>
 8007734:	4629      	mov	r1, r5
 8007736:	f7ff ff85 	bl	8007644 <_malloc_r>
 800773a:	4606      	mov	r6, r0
 800773c:	b950      	cbnz	r0, 8007754 <__ssputs_r+0x5c>
 800773e:	230c      	movs	r3, #12
 8007740:	f8ca 3000 	str.w	r3, [sl]
 8007744:	89a3      	ldrh	r3, [r4, #12]
 8007746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800774a:	81a3      	strh	r3, [r4, #12]
 800774c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007754:	463a      	mov	r2, r7
 8007756:	6921      	ldr	r1, [r4, #16]
 8007758:	f7ff ff14 	bl	8007584 <memcpy>
 800775c:	89a3      	ldrh	r3, [r4, #12]
 800775e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007766:	81a3      	strh	r3, [r4, #12]
 8007768:	6126      	str	r6, [r4, #16]
 800776a:	6165      	str	r5, [r4, #20]
 800776c:	443e      	add	r6, r7
 800776e:	1bed      	subs	r5, r5, r7
 8007770:	6026      	str	r6, [r4, #0]
 8007772:	60a5      	str	r5, [r4, #8]
 8007774:	464e      	mov	r6, r9
 8007776:	454e      	cmp	r6, r9
 8007778:	d900      	bls.n	800777c <__ssputs_r+0x84>
 800777a:	464e      	mov	r6, r9
 800777c:	4632      	mov	r2, r6
 800777e:	4641      	mov	r1, r8
 8007780:	6820      	ldr	r0, [r4, #0]
 8007782:	f000 faa3 	bl	8007ccc <memmove>
 8007786:	68a3      	ldr	r3, [r4, #8]
 8007788:	1b9b      	subs	r3, r3, r6
 800778a:	60a3      	str	r3, [r4, #8]
 800778c:	6823      	ldr	r3, [r4, #0]
 800778e:	441e      	add	r6, r3
 8007790:	6026      	str	r6, [r4, #0]
 8007792:	2000      	movs	r0, #0
 8007794:	e7dc      	b.n	8007750 <__ssputs_r+0x58>
 8007796:	462a      	mov	r2, r5
 8007798:	f000 fb02 	bl	8007da0 <_realloc_r>
 800779c:	4606      	mov	r6, r0
 800779e:	2800      	cmp	r0, #0
 80077a0:	d1e2      	bne.n	8007768 <__ssputs_r+0x70>
 80077a2:	6921      	ldr	r1, [r4, #16]
 80077a4:	4650      	mov	r0, sl
 80077a6:	f000 faad 	bl	8007d04 <_free_r>
 80077aa:	e7c8      	b.n	800773e <__ssputs_r+0x46>

080077ac <_svfiprintf_r>:
 80077ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b0:	461d      	mov	r5, r3
 80077b2:	898b      	ldrh	r3, [r1, #12]
 80077b4:	061f      	lsls	r7, r3, #24
 80077b6:	b09d      	sub	sp, #116	; 0x74
 80077b8:	4680      	mov	r8, r0
 80077ba:	460c      	mov	r4, r1
 80077bc:	4616      	mov	r6, r2
 80077be:	d50f      	bpl.n	80077e0 <_svfiprintf_r+0x34>
 80077c0:	690b      	ldr	r3, [r1, #16]
 80077c2:	b96b      	cbnz	r3, 80077e0 <_svfiprintf_r+0x34>
 80077c4:	2140      	movs	r1, #64	; 0x40
 80077c6:	f7ff ff3d 	bl	8007644 <_malloc_r>
 80077ca:	6020      	str	r0, [r4, #0]
 80077cc:	6120      	str	r0, [r4, #16]
 80077ce:	b928      	cbnz	r0, 80077dc <_svfiprintf_r+0x30>
 80077d0:	230c      	movs	r3, #12
 80077d2:	f8c8 3000 	str.w	r3, [r8]
 80077d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077da:	e0c8      	b.n	800796e <_svfiprintf_r+0x1c2>
 80077dc:	2340      	movs	r3, #64	; 0x40
 80077de:	6163      	str	r3, [r4, #20]
 80077e0:	2300      	movs	r3, #0
 80077e2:	9309      	str	r3, [sp, #36]	; 0x24
 80077e4:	2320      	movs	r3, #32
 80077e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077ea:	2330      	movs	r3, #48	; 0x30
 80077ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077f0:	9503      	str	r5, [sp, #12]
 80077f2:	f04f 0b01 	mov.w	fp, #1
 80077f6:	4637      	mov	r7, r6
 80077f8:	463d      	mov	r5, r7
 80077fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80077fe:	b10b      	cbz	r3, 8007804 <_svfiprintf_r+0x58>
 8007800:	2b25      	cmp	r3, #37	; 0x25
 8007802:	d13e      	bne.n	8007882 <_svfiprintf_r+0xd6>
 8007804:	ebb7 0a06 	subs.w	sl, r7, r6
 8007808:	d00b      	beq.n	8007822 <_svfiprintf_r+0x76>
 800780a:	4653      	mov	r3, sl
 800780c:	4632      	mov	r2, r6
 800780e:	4621      	mov	r1, r4
 8007810:	4640      	mov	r0, r8
 8007812:	f7ff ff71 	bl	80076f8 <__ssputs_r>
 8007816:	3001      	adds	r0, #1
 8007818:	f000 80a4 	beq.w	8007964 <_svfiprintf_r+0x1b8>
 800781c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800781e:	4453      	add	r3, sl
 8007820:	9309      	str	r3, [sp, #36]	; 0x24
 8007822:	783b      	ldrb	r3, [r7, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 809d 	beq.w	8007964 <_svfiprintf_r+0x1b8>
 800782a:	2300      	movs	r3, #0
 800782c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007830:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007834:	9304      	str	r3, [sp, #16]
 8007836:	9307      	str	r3, [sp, #28]
 8007838:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800783c:	931a      	str	r3, [sp, #104]	; 0x68
 800783e:	462f      	mov	r7, r5
 8007840:	2205      	movs	r2, #5
 8007842:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007846:	4850      	ldr	r0, [pc, #320]	; (8007988 <_svfiprintf_r+0x1dc>)
 8007848:	f7f8 fcc2 	bl	80001d0 <memchr>
 800784c:	9b04      	ldr	r3, [sp, #16]
 800784e:	b9d0      	cbnz	r0, 8007886 <_svfiprintf_r+0xda>
 8007850:	06d9      	lsls	r1, r3, #27
 8007852:	bf44      	itt	mi
 8007854:	2220      	movmi	r2, #32
 8007856:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800785a:	071a      	lsls	r2, r3, #28
 800785c:	bf44      	itt	mi
 800785e:	222b      	movmi	r2, #43	; 0x2b
 8007860:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007864:	782a      	ldrb	r2, [r5, #0]
 8007866:	2a2a      	cmp	r2, #42	; 0x2a
 8007868:	d015      	beq.n	8007896 <_svfiprintf_r+0xea>
 800786a:	9a07      	ldr	r2, [sp, #28]
 800786c:	462f      	mov	r7, r5
 800786e:	2000      	movs	r0, #0
 8007870:	250a      	movs	r5, #10
 8007872:	4639      	mov	r1, r7
 8007874:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007878:	3b30      	subs	r3, #48	; 0x30
 800787a:	2b09      	cmp	r3, #9
 800787c:	d94d      	bls.n	800791a <_svfiprintf_r+0x16e>
 800787e:	b1b8      	cbz	r0, 80078b0 <_svfiprintf_r+0x104>
 8007880:	e00f      	b.n	80078a2 <_svfiprintf_r+0xf6>
 8007882:	462f      	mov	r7, r5
 8007884:	e7b8      	b.n	80077f8 <_svfiprintf_r+0x4c>
 8007886:	4a40      	ldr	r2, [pc, #256]	; (8007988 <_svfiprintf_r+0x1dc>)
 8007888:	1a80      	subs	r0, r0, r2
 800788a:	fa0b f000 	lsl.w	r0, fp, r0
 800788e:	4318      	orrs	r0, r3
 8007890:	9004      	str	r0, [sp, #16]
 8007892:	463d      	mov	r5, r7
 8007894:	e7d3      	b.n	800783e <_svfiprintf_r+0x92>
 8007896:	9a03      	ldr	r2, [sp, #12]
 8007898:	1d11      	adds	r1, r2, #4
 800789a:	6812      	ldr	r2, [r2, #0]
 800789c:	9103      	str	r1, [sp, #12]
 800789e:	2a00      	cmp	r2, #0
 80078a0:	db01      	blt.n	80078a6 <_svfiprintf_r+0xfa>
 80078a2:	9207      	str	r2, [sp, #28]
 80078a4:	e004      	b.n	80078b0 <_svfiprintf_r+0x104>
 80078a6:	4252      	negs	r2, r2
 80078a8:	f043 0302 	orr.w	r3, r3, #2
 80078ac:	9207      	str	r2, [sp, #28]
 80078ae:	9304      	str	r3, [sp, #16]
 80078b0:	783b      	ldrb	r3, [r7, #0]
 80078b2:	2b2e      	cmp	r3, #46	; 0x2e
 80078b4:	d10c      	bne.n	80078d0 <_svfiprintf_r+0x124>
 80078b6:	787b      	ldrb	r3, [r7, #1]
 80078b8:	2b2a      	cmp	r3, #42	; 0x2a
 80078ba:	d133      	bne.n	8007924 <_svfiprintf_r+0x178>
 80078bc:	9b03      	ldr	r3, [sp, #12]
 80078be:	1d1a      	adds	r2, r3, #4
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	9203      	str	r2, [sp, #12]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	bfb8      	it	lt
 80078c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80078cc:	3702      	adds	r7, #2
 80078ce:	9305      	str	r3, [sp, #20]
 80078d0:	4d2e      	ldr	r5, [pc, #184]	; (800798c <_svfiprintf_r+0x1e0>)
 80078d2:	7839      	ldrb	r1, [r7, #0]
 80078d4:	2203      	movs	r2, #3
 80078d6:	4628      	mov	r0, r5
 80078d8:	f7f8 fc7a 	bl	80001d0 <memchr>
 80078dc:	b138      	cbz	r0, 80078ee <_svfiprintf_r+0x142>
 80078de:	2340      	movs	r3, #64	; 0x40
 80078e0:	1b40      	subs	r0, r0, r5
 80078e2:	fa03 f000 	lsl.w	r0, r3, r0
 80078e6:	9b04      	ldr	r3, [sp, #16]
 80078e8:	4303      	orrs	r3, r0
 80078ea:	3701      	adds	r7, #1
 80078ec:	9304      	str	r3, [sp, #16]
 80078ee:	7839      	ldrb	r1, [r7, #0]
 80078f0:	4827      	ldr	r0, [pc, #156]	; (8007990 <_svfiprintf_r+0x1e4>)
 80078f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078f6:	2206      	movs	r2, #6
 80078f8:	1c7e      	adds	r6, r7, #1
 80078fa:	f7f8 fc69 	bl	80001d0 <memchr>
 80078fe:	2800      	cmp	r0, #0
 8007900:	d038      	beq.n	8007974 <_svfiprintf_r+0x1c8>
 8007902:	4b24      	ldr	r3, [pc, #144]	; (8007994 <_svfiprintf_r+0x1e8>)
 8007904:	bb13      	cbnz	r3, 800794c <_svfiprintf_r+0x1a0>
 8007906:	9b03      	ldr	r3, [sp, #12]
 8007908:	3307      	adds	r3, #7
 800790a:	f023 0307 	bic.w	r3, r3, #7
 800790e:	3308      	adds	r3, #8
 8007910:	9303      	str	r3, [sp, #12]
 8007912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007914:	444b      	add	r3, r9
 8007916:	9309      	str	r3, [sp, #36]	; 0x24
 8007918:	e76d      	b.n	80077f6 <_svfiprintf_r+0x4a>
 800791a:	fb05 3202 	mla	r2, r5, r2, r3
 800791e:	2001      	movs	r0, #1
 8007920:	460f      	mov	r7, r1
 8007922:	e7a6      	b.n	8007872 <_svfiprintf_r+0xc6>
 8007924:	2300      	movs	r3, #0
 8007926:	3701      	adds	r7, #1
 8007928:	9305      	str	r3, [sp, #20]
 800792a:	4619      	mov	r1, r3
 800792c:	250a      	movs	r5, #10
 800792e:	4638      	mov	r0, r7
 8007930:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007934:	3a30      	subs	r2, #48	; 0x30
 8007936:	2a09      	cmp	r2, #9
 8007938:	d903      	bls.n	8007942 <_svfiprintf_r+0x196>
 800793a:	2b00      	cmp	r3, #0
 800793c:	d0c8      	beq.n	80078d0 <_svfiprintf_r+0x124>
 800793e:	9105      	str	r1, [sp, #20]
 8007940:	e7c6      	b.n	80078d0 <_svfiprintf_r+0x124>
 8007942:	fb05 2101 	mla	r1, r5, r1, r2
 8007946:	2301      	movs	r3, #1
 8007948:	4607      	mov	r7, r0
 800794a:	e7f0      	b.n	800792e <_svfiprintf_r+0x182>
 800794c:	ab03      	add	r3, sp, #12
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	4622      	mov	r2, r4
 8007952:	4b11      	ldr	r3, [pc, #68]	; (8007998 <_svfiprintf_r+0x1ec>)
 8007954:	a904      	add	r1, sp, #16
 8007956:	4640      	mov	r0, r8
 8007958:	f3af 8000 	nop.w
 800795c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007960:	4681      	mov	r9, r0
 8007962:	d1d6      	bne.n	8007912 <_svfiprintf_r+0x166>
 8007964:	89a3      	ldrh	r3, [r4, #12]
 8007966:	065b      	lsls	r3, r3, #25
 8007968:	f53f af35 	bmi.w	80077d6 <_svfiprintf_r+0x2a>
 800796c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800796e:	b01d      	add	sp, #116	; 0x74
 8007970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007974:	ab03      	add	r3, sp, #12
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	4622      	mov	r2, r4
 800797a:	4b07      	ldr	r3, [pc, #28]	; (8007998 <_svfiprintf_r+0x1ec>)
 800797c:	a904      	add	r1, sp, #16
 800797e:	4640      	mov	r0, r8
 8007980:	f000 f882 	bl	8007a88 <_printf_i>
 8007984:	e7ea      	b.n	800795c <_svfiprintf_r+0x1b0>
 8007986:	bf00      	nop
 8007988:	08008380 	.word	0x08008380
 800798c:	08008386 	.word	0x08008386
 8007990:	0800838a 	.word	0x0800838a
 8007994:	00000000 	.word	0x00000000
 8007998:	080076f9 	.word	0x080076f9

0800799c <_printf_common>:
 800799c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079a0:	4691      	mov	r9, r2
 80079a2:	461f      	mov	r7, r3
 80079a4:	688a      	ldr	r2, [r1, #8]
 80079a6:	690b      	ldr	r3, [r1, #16]
 80079a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079ac:	4293      	cmp	r3, r2
 80079ae:	bfb8      	it	lt
 80079b0:	4613      	movlt	r3, r2
 80079b2:	f8c9 3000 	str.w	r3, [r9]
 80079b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079ba:	4606      	mov	r6, r0
 80079bc:	460c      	mov	r4, r1
 80079be:	b112      	cbz	r2, 80079c6 <_printf_common+0x2a>
 80079c0:	3301      	adds	r3, #1
 80079c2:	f8c9 3000 	str.w	r3, [r9]
 80079c6:	6823      	ldr	r3, [r4, #0]
 80079c8:	0699      	lsls	r1, r3, #26
 80079ca:	bf42      	ittt	mi
 80079cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80079d0:	3302      	addmi	r3, #2
 80079d2:	f8c9 3000 	strmi.w	r3, [r9]
 80079d6:	6825      	ldr	r5, [r4, #0]
 80079d8:	f015 0506 	ands.w	r5, r5, #6
 80079dc:	d107      	bne.n	80079ee <_printf_common+0x52>
 80079de:	f104 0a19 	add.w	sl, r4, #25
 80079e2:	68e3      	ldr	r3, [r4, #12]
 80079e4:	f8d9 2000 	ldr.w	r2, [r9]
 80079e8:	1a9b      	subs	r3, r3, r2
 80079ea:	42ab      	cmp	r3, r5
 80079ec:	dc28      	bgt.n	8007a40 <_printf_common+0xa4>
 80079ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80079f2:	6822      	ldr	r2, [r4, #0]
 80079f4:	3300      	adds	r3, #0
 80079f6:	bf18      	it	ne
 80079f8:	2301      	movne	r3, #1
 80079fa:	0692      	lsls	r2, r2, #26
 80079fc:	d42d      	bmi.n	8007a5a <_printf_common+0xbe>
 80079fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a02:	4639      	mov	r1, r7
 8007a04:	4630      	mov	r0, r6
 8007a06:	47c0      	blx	r8
 8007a08:	3001      	adds	r0, #1
 8007a0a:	d020      	beq.n	8007a4e <_printf_common+0xb2>
 8007a0c:	6823      	ldr	r3, [r4, #0]
 8007a0e:	68e5      	ldr	r5, [r4, #12]
 8007a10:	f8d9 2000 	ldr.w	r2, [r9]
 8007a14:	f003 0306 	and.w	r3, r3, #6
 8007a18:	2b04      	cmp	r3, #4
 8007a1a:	bf08      	it	eq
 8007a1c:	1aad      	subeq	r5, r5, r2
 8007a1e:	68a3      	ldr	r3, [r4, #8]
 8007a20:	6922      	ldr	r2, [r4, #16]
 8007a22:	bf0c      	ite	eq
 8007a24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a28:	2500      	movne	r5, #0
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	bfc4      	itt	gt
 8007a2e:	1a9b      	subgt	r3, r3, r2
 8007a30:	18ed      	addgt	r5, r5, r3
 8007a32:	f04f 0900 	mov.w	r9, #0
 8007a36:	341a      	adds	r4, #26
 8007a38:	454d      	cmp	r5, r9
 8007a3a:	d11a      	bne.n	8007a72 <_printf_common+0xd6>
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	e008      	b.n	8007a52 <_printf_common+0xb6>
 8007a40:	2301      	movs	r3, #1
 8007a42:	4652      	mov	r2, sl
 8007a44:	4639      	mov	r1, r7
 8007a46:	4630      	mov	r0, r6
 8007a48:	47c0      	blx	r8
 8007a4a:	3001      	adds	r0, #1
 8007a4c:	d103      	bne.n	8007a56 <_printf_common+0xba>
 8007a4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a56:	3501      	adds	r5, #1
 8007a58:	e7c3      	b.n	80079e2 <_printf_common+0x46>
 8007a5a:	18e1      	adds	r1, r4, r3
 8007a5c:	1c5a      	adds	r2, r3, #1
 8007a5e:	2030      	movs	r0, #48	; 0x30
 8007a60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a64:	4422      	add	r2, r4
 8007a66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a6e:	3302      	adds	r3, #2
 8007a70:	e7c5      	b.n	80079fe <_printf_common+0x62>
 8007a72:	2301      	movs	r3, #1
 8007a74:	4622      	mov	r2, r4
 8007a76:	4639      	mov	r1, r7
 8007a78:	4630      	mov	r0, r6
 8007a7a:	47c0      	blx	r8
 8007a7c:	3001      	adds	r0, #1
 8007a7e:	d0e6      	beq.n	8007a4e <_printf_common+0xb2>
 8007a80:	f109 0901 	add.w	r9, r9, #1
 8007a84:	e7d8      	b.n	8007a38 <_printf_common+0x9c>
	...

08007a88 <_printf_i>:
 8007a88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a8c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007a90:	460c      	mov	r4, r1
 8007a92:	7e09      	ldrb	r1, [r1, #24]
 8007a94:	b085      	sub	sp, #20
 8007a96:	296e      	cmp	r1, #110	; 0x6e
 8007a98:	4617      	mov	r7, r2
 8007a9a:	4606      	mov	r6, r0
 8007a9c:	4698      	mov	r8, r3
 8007a9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007aa0:	f000 80b3 	beq.w	8007c0a <_printf_i+0x182>
 8007aa4:	d822      	bhi.n	8007aec <_printf_i+0x64>
 8007aa6:	2963      	cmp	r1, #99	; 0x63
 8007aa8:	d036      	beq.n	8007b18 <_printf_i+0x90>
 8007aaa:	d80a      	bhi.n	8007ac2 <_printf_i+0x3a>
 8007aac:	2900      	cmp	r1, #0
 8007aae:	f000 80b9 	beq.w	8007c24 <_printf_i+0x19c>
 8007ab2:	2958      	cmp	r1, #88	; 0x58
 8007ab4:	f000 8083 	beq.w	8007bbe <_printf_i+0x136>
 8007ab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007abc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007ac0:	e032      	b.n	8007b28 <_printf_i+0xa0>
 8007ac2:	2964      	cmp	r1, #100	; 0x64
 8007ac4:	d001      	beq.n	8007aca <_printf_i+0x42>
 8007ac6:	2969      	cmp	r1, #105	; 0x69
 8007ac8:	d1f6      	bne.n	8007ab8 <_printf_i+0x30>
 8007aca:	6820      	ldr	r0, [r4, #0]
 8007acc:	6813      	ldr	r3, [r2, #0]
 8007ace:	0605      	lsls	r5, r0, #24
 8007ad0:	f103 0104 	add.w	r1, r3, #4
 8007ad4:	d52a      	bpl.n	8007b2c <_printf_i+0xa4>
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6011      	str	r1, [r2, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	da03      	bge.n	8007ae6 <_printf_i+0x5e>
 8007ade:	222d      	movs	r2, #45	; 0x2d
 8007ae0:	425b      	negs	r3, r3
 8007ae2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007ae6:	486f      	ldr	r0, [pc, #444]	; (8007ca4 <_printf_i+0x21c>)
 8007ae8:	220a      	movs	r2, #10
 8007aea:	e039      	b.n	8007b60 <_printf_i+0xd8>
 8007aec:	2973      	cmp	r1, #115	; 0x73
 8007aee:	f000 809d 	beq.w	8007c2c <_printf_i+0x1a4>
 8007af2:	d808      	bhi.n	8007b06 <_printf_i+0x7e>
 8007af4:	296f      	cmp	r1, #111	; 0x6f
 8007af6:	d020      	beq.n	8007b3a <_printf_i+0xb2>
 8007af8:	2970      	cmp	r1, #112	; 0x70
 8007afa:	d1dd      	bne.n	8007ab8 <_printf_i+0x30>
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	f043 0320 	orr.w	r3, r3, #32
 8007b02:	6023      	str	r3, [r4, #0]
 8007b04:	e003      	b.n	8007b0e <_printf_i+0x86>
 8007b06:	2975      	cmp	r1, #117	; 0x75
 8007b08:	d017      	beq.n	8007b3a <_printf_i+0xb2>
 8007b0a:	2978      	cmp	r1, #120	; 0x78
 8007b0c:	d1d4      	bne.n	8007ab8 <_printf_i+0x30>
 8007b0e:	2378      	movs	r3, #120	; 0x78
 8007b10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b14:	4864      	ldr	r0, [pc, #400]	; (8007ca8 <_printf_i+0x220>)
 8007b16:	e055      	b.n	8007bc4 <_printf_i+0x13c>
 8007b18:	6813      	ldr	r3, [r2, #0]
 8007b1a:	1d19      	adds	r1, r3, #4
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	6011      	str	r1, [r2, #0]
 8007b20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e08c      	b.n	8007c46 <_printf_i+0x1be>
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	6011      	str	r1, [r2, #0]
 8007b30:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b34:	bf18      	it	ne
 8007b36:	b21b      	sxthne	r3, r3
 8007b38:	e7cf      	b.n	8007ada <_printf_i+0x52>
 8007b3a:	6813      	ldr	r3, [r2, #0]
 8007b3c:	6825      	ldr	r5, [r4, #0]
 8007b3e:	1d18      	adds	r0, r3, #4
 8007b40:	6010      	str	r0, [r2, #0]
 8007b42:	0628      	lsls	r0, r5, #24
 8007b44:	d501      	bpl.n	8007b4a <_printf_i+0xc2>
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	e002      	b.n	8007b50 <_printf_i+0xc8>
 8007b4a:	0668      	lsls	r0, r5, #25
 8007b4c:	d5fb      	bpl.n	8007b46 <_printf_i+0xbe>
 8007b4e:	881b      	ldrh	r3, [r3, #0]
 8007b50:	4854      	ldr	r0, [pc, #336]	; (8007ca4 <_printf_i+0x21c>)
 8007b52:	296f      	cmp	r1, #111	; 0x6f
 8007b54:	bf14      	ite	ne
 8007b56:	220a      	movne	r2, #10
 8007b58:	2208      	moveq	r2, #8
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b60:	6865      	ldr	r5, [r4, #4]
 8007b62:	60a5      	str	r5, [r4, #8]
 8007b64:	2d00      	cmp	r5, #0
 8007b66:	f2c0 8095 	blt.w	8007c94 <_printf_i+0x20c>
 8007b6a:	6821      	ldr	r1, [r4, #0]
 8007b6c:	f021 0104 	bic.w	r1, r1, #4
 8007b70:	6021      	str	r1, [r4, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d13d      	bne.n	8007bf2 <_printf_i+0x16a>
 8007b76:	2d00      	cmp	r5, #0
 8007b78:	f040 808e 	bne.w	8007c98 <_printf_i+0x210>
 8007b7c:	4665      	mov	r5, ip
 8007b7e:	2a08      	cmp	r2, #8
 8007b80:	d10b      	bne.n	8007b9a <_printf_i+0x112>
 8007b82:	6823      	ldr	r3, [r4, #0]
 8007b84:	07db      	lsls	r3, r3, #31
 8007b86:	d508      	bpl.n	8007b9a <_printf_i+0x112>
 8007b88:	6923      	ldr	r3, [r4, #16]
 8007b8a:	6862      	ldr	r2, [r4, #4]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	bfde      	ittt	le
 8007b90:	2330      	movle	r3, #48	; 0x30
 8007b92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b96:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007b9a:	ebac 0305 	sub.w	r3, ip, r5
 8007b9e:	6123      	str	r3, [r4, #16]
 8007ba0:	f8cd 8000 	str.w	r8, [sp]
 8007ba4:	463b      	mov	r3, r7
 8007ba6:	aa03      	add	r2, sp, #12
 8007ba8:	4621      	mov	r1, r4
 8007baa:	4630      	mov	r0, r6
 8007bac:	f7ff fef6 	bl	800799c <_printf_common>
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	d14d      	bne.n	8007c50 <_printf_i+0x1c8>
 8007bb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bb8:	b005      	add	sp, #20
 8007bba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bbe:	4839      	ldr	r0, [pc, #228]	; (8007ca4 <_printf_i+0x21c>)
 8007bc0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007bc4:	6813      	ldr	r3, [r2, #0]
 8007bc6:	6821      	ldr	r1, [r4, #0]
 8007bc8:	1d1d      	adds	r5, r3, #4
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6015      	str	r5, [r2, #0]
 8007bce:	060a      	lsls	r2, r1, #24
 8007bd0:	d50b      	bpl.n	8007bea <_printf_i+0x162>
 8007bd2:	07ca      	lsls	r2, r1, #31
 8007bd4:	bf44      	itt	mi
 8007bd6:	f041 0120 	orrmi.w	r1, r1, #32
 8007bda:	6021      	strmi	r1, [r4, #0]
 8007bdc:	b91b      	cbnz	r3, 8007be6 <_printf_i+0x15e>
 8007bde:	6822      	ldr	r2, [r4, #0]
 8007be0:	f022 0220 	bic.w	r2, r2, #32
 8007be4:	6022      	str	r2, [r4, #0]
 8007be6:	2210      	movs	r2, #16
 8007be8:	e7b7      	b.n	8007b5a <_printf_i+0xd2>
 8007bea:	064d      	lsls	r5, r1, #25
 8007bec:	bf48      	it	mi
 8007bee:	b29b      	uxthmi	r3, r3
 8007bf0:	e7ef      	b.n	8007bd2 <_printf_i+0x14a>
 8007bf2:	4665      	mov	r5, ip
 8007bf4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bf8:	fb02 3311 	mls	r3, r2, r1, r3
 8007bfc:	5cc3      	ldrb	r3, [r0, r3]
 8007bfe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007c02:	460b      	mov	r3, r1
 8007c04:	2900      	cmp	r1, #0
 8007c06:	d1f5      	bne.n	8007bf4 <_printf_i+0x16c>
 8007c08:	e7b9      	b.n	8007b7e <_printf_i+0xf6>
 8007c0a:	6813      	ldr	r3, [r2, #0]
 8007c0c:	6825      	ldr	r5, [r4, #0]
 8007c0e:	6961      	ldr	r1, [r4, #20]
 8007c10:	1d18      	adds	r0, r3, #4
 8007c12:	6010      	str	r0, [r2, #0]
 8007c14:	0628      	lsls	r0, r5, #24
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	d501      	bpl.n	8007c1e <_printf_i+0x196>
 8007c1a:	6019      	str	r1, [r3, #0]
 8007c1c:	e002      	b.n	8007c24 <_printf_i+0x19c>
 8007c1e:	066a      	lsls	r2, r5, #25
 8007c20:	d5fb      	bpl.n	8007c1a <_printf_i+0x192>
 8007c22:	8019      	strh	r1, [r3, #0]
 8007c24:	2300      	movs	r3, #0
 8007c26:	6123      	str	r3, [r4, #16]
 8007c28:	4665      	mov	r5, ip
 8007c2a:	e7b9      	b.n	8007ba0 <_printf_i+0x118>
 8007c2c:	6813      	ldr	r3, [r2, #0]
 8007c2e:	1d19      	adds	r1, r3, #4
 8007c30:	6011      	str	r1, [r2, #0]
 8007c32:	681d      	ldr	r5, [r3, #0]
 8007c34:	6862      	ldr	r2, [r4, #4]
 8007c36:	2100      	movs	r1, #0
 8007c38:	4628      	mov	r0, r5
 8007c3a:	f7f8 fac9 	bl	80001d0 <memchr>
 8007c3e:	b108      	cbz	r0, 8007c44 <_printf_i+0x1bc>
 8007c40:	1b40      	subs	r0, r0, r5
 8007c42:	6060      	str	r0, [r4, #4]
 8007c44:	6863      	ldr	r3, [r4, #4]
 8007c46:	6123      	str	r3, [r4, #16]
 8007c48:	2300      	movs	r3, #0
 8007c4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c4e:	e7a7      	b.n	8007ba0 <_printf_i+0x118>
 8007c50:	6923      	ldr	r3, [r4, #16]
 8007c52:	462a      	mov	r2, r5
 8007c54:	4639      	mov	r1, r7
 8007c56:	4630      	mov	r0, r6
 8007c58:	47c0      	blx	r8
 8007c5a:	3001      	adds	r0, #1
 8007c5c:	d0aa      	beq.n	8007bb4 <_printf_i+0x12c>
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	079b      	lsls	r3, r3, #30
 8007c62:	d413      	bmi.n	8007c8c <_printf_i+0x204>
 8007c64:	68e0      	ldr	r0, [r4, #12]
 8007c66:	9b03      	ldr	r3, [sp, #12]
 8007c68:	4298      	cmp	r0, r3
 8007c6a:	bfb8      	it	lt
 8007c6c:	4618      	movlt	r0, r3
 8007c6e:	e7a3      	b.n	8007bb8 <_printf_i+0x130>
 8007c70:	2301      	movs	r3, #1
 8007c72:	464a      	mov	r2, r9
 8007c74:	4639      	mov	r1, r7
 8007c76:	4630      	mov	r0, r6
 8007c78:	47c0      	blx	r8
 8007c7a:	3001      	adds	r0, #1
 8007c7c:	d09a      	beq.n	8007bb4 <_printf_i+0x12c>
 8007c7e:	3501      	adds	r5, #1
 8007c80:	68e3      	ldr	r3, [r4, #12]
 8007c82:	9a03      	ldr	r2, [sp, #12]
 8007c84:	1a9b      	subs	r3, r3, r2
 8007c86:	42ab      	cmp	r3, r5
 8007c88:	dcf2      	bgt.n	8007c70 <_printf_i+0x1e8>
 8007c8a:	e7eb      	b.n	8007c64 <_printf_i+0x1dc>
 8007c8c:	2500      	movs	r5, #0
 8007c8e:	f104 0919 	add.w	r9, r4, #25
 8007c92:	e7f5      	b.n	8007c80 <_printf_i+0x1f8>
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1ac      	bne.n	8007bf2 <_printf_i+0x16a>
 8007c98:	7803      	ldrb	r3, [r0, #0]
 8007c9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c9e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ca2:	e76c      	b.n	8007b7e <_printf_i+0xf6>
 8007ca4:	08008391 	.word	0x08008391
 8007ca8:	080083a2 	.word	0x080083a2

08007cac <_sbrk_r>:
 8007cac:	b538      	push	{r3, r4, r5, lr}
 8007cae:	4c06      	ldr	r4, [pc, #24]	; (8007cc8 <_sbrk_r+0x1c>)
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	4605      	mov	r5, r0
 8007cb4:	4608      	mov	r0, r1
 8007cb6:	6023      	str	r3, [r4, #0]
 8007cb8:	f000 f9f0 	bl	800809c <_sbrk>
 8007cbc:	1c43      	adds	r3, r0, #1
 8007cbe:	d102      	bne.n	8007cc6 <_sbrk_r+0x1a>
 8007cc0:	6823      	ldr	r3, [r4, #0]
 8007cc2:	b103      	cbz	r3, 8007cc6 <_sbrk_r+0x1a>
 8007cc4:	602b      	str	r3, [r5, #0]
 8007cc6:	bd38      	pop	{r3, r4, r5, pc}
 8007cc8:	20000670 	.word	0x20000670

08007ccc <memmove>:
 8007ccc:	4288      	cmp	r0, r1
 8007cce:	b510      	push	{r4, lr}
 8007cd0:	eb01 0302 	add.w	r3, r1, r2
 8007cd4:	d807      	bhi.n	8007ce6 <memmove+0x1a>
 8007cd6:	1e42      	subs	r2, r0, #1
 8007cd8:	4299      	cmp	r1, r3
 8007cda:	d00a      	beq.n	8007cf2 <memmove+0x26>
 8007cdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ce0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007ce4:	e7f8      	b.n	8007cd8 <memmove+0xc>
 8007ce6:	4283      	cmp	r3, r0
 8007ce8:	d9f5      	bls.n	8007cd6 <memmove+0xa>
 8007cea:	1881      	adds	r1, r0, r2
 8007cec:	1ad2      	subs	r2, r2, r3
 8007cee:	42d3      	cmn	r3, r2
 8007cf0:	d100      	bne.n	8007cf4 <memmove+0x28>
 8007cf2:	bd10      	pop	{r4, pc}
 8007cf4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cf8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007cfc:	e7f7      	b.n	8007cee <memmove+0x22>

08007cfe <__malloc_lock>:
 8007cfe:	4770      	bx	lr

08007d00 <__malloc_unlock>:
 8007d00:	4770      	bx	lr
	...

08007d04 <_free_r>:
 8007d04:	b538      	push	{r3, r4, r5, lr}
 8007d06:	4605      	mov	r5, r0
 8007d08:	2900      	cmp	r1, #0
 8007d0a:	d045      	beq.n	8007d98 <_free_r+0x94>
 8007d0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d10:	1f0c      	subs	r4, r1, #4
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	bfb8      	it	lt
 8007d16:	18e4      	addlt	r4, r4, r3
 8007d18:	f7ff fff1 	bl	8007cfe <__malloc_lock>
 8007d1c:	4a1f      	ldr	r2, [pc, #124]	; (8007d9c <_free_r+0x98>)
 8007d1e:	6813      	ldr	r3, [r2, #0]
 8007d20:	4610      	mov	r0, r2
 8007d22:	b933      	cbnz	r3, 8007d32 <_free_r+0x2e>
 8007d24:	6063      	str	r3, [r4, #4]
 8007d26:	6014      	str	r4, [r2, #0]
 8007d28:	4628      	mov	r0, r5
 8007d2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d2e:	f7ff bfe7 	b.w	8007d00 <__malloc_unlock>
 8007d32:	42a3      	cmp	r3, r4
 8007d34:	d90c      	bls.n	8007d50 <_free_r+0x4c>
 8007d36:	6821      	ldr	r1, [r4, #0]
 8007d38:	1862      	adds	r2, r4, r1
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	bf04      	itt	eq
 8007d3e:	681a      	ldreq	r2, [r3, #0]
 8007d40:	685b      	ldreq	r3, [r3, #4]
 8007d42:	6063      	str	r3, [r4, #4]
 8007d44:	bf04      	itt	eq
 8007d46:	1852      	addeq	r2, r2, r1
 8007d48:	6022      	streq	r2, [r4, #0]
 8007d4a:	6004      	str	r4, [r0, #0]
 8007d4c:	e7ec      	b.n	8007d28 <_free_r+0x24>
 8007d4e:	4613      	mov	r3, r2
 8007d50:	685a      	ldr	r2, [r3, #4]
 8007d52:	b10a      	cbz	r2, 8007d58 <_free_r+0x54>
 8007d54:	42a2      	cmp	r2, r4
 8007d56:	d9fa      	bls.n	8007d4e <_free_r+0x4a>
 8007d58:	6819      	ldr	r1, [r3, #0]
 8007d5a:	1858      	adds	r0, r3, r1
 8007d5c:	42a0      	cmp	r0, r4
 8007d5e:	d10b      	bne.n	8007d78 <_free_r+0x74>
 8007d60:	6820      	ldr	r0, [r4, #0]
 8007d62:	4401      	add	r1, r0
 8007d64:	1858      	adds	r0, r3, r1
 8007d66:	4282      	cmp	r2, r0
 8007d68:	6019      	str	r1, [r3, #0]
 8007d6a:	d1dd      	bne.n	8007d28 <_free_r+0x24>
 8007d6c:	6810      	ldr	r0, [r2, #0]
 8007d6e:	6852      	ldr	r2, [r2, #4]
 8007d70:	605a      	str	r2, [r3, #4]
 8007d72:	4401      	add	r1, r0
 8007d74:	6019      	str	r1, [r3, #0]
 8007d76:	e7d7      	b.n	8007d28 <_free_r+0x24>
 8007d78:	d902      	bls.n	8007d80 <_free_r+0x7c>
 8007d7a:	230c      	movs	r3, #12
 8007d7c:	602b      	str	r3, [r5, #0]
 8007d7e:	e7d3      	b.n	8007d28 <_free_r+0x24>
 8007d80:	6820      	ldr	r0, [r4, #0]
 8007d82:	1821      	adds	r1, r4, r0
 8007d84:	428a      	cmp	r2, r1
 8007d86:	bf04      	itt	eq
 8007d88:	6811      	ldreq	r1, [r2, #0]
 8007d8a:	6852      	ldreq	r2, [r2, #4]
 8007d8c:	6062      	str	r2, [r4, #4]
 8007d8e:	bf04      	itt	eq
 8007d90:	1809      	addeq	r1, r1, r0
 8007d92:	6021      	streq	r1, [r4, #0]
 8007d94:	605c      	str	r4, [r3, #4]
 8007d96:	e7c7      	b.n	8007d28 <_free_r+0x24>
 8007d98:	bd38      	pop	{r3, r4, r5, pc}
 8007d9a:	bf00      	nop
 8007d9c:	20000570 	.word	0x20000570

08007da0 <_realloc_r>:
 8007da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da2:	4607      	mov	r7, r0
 8007da4:	4614      	mov	r4, r2
 8007da6:	460e      	mov	r6, r1
 8007da8:	b921      	cbnz	r1, 8007db4 <_realloc_r+0x14>
 8007daa:	4611      	mov	r1, r2
 8007dac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007db0:	f7ff bc48 	b.w	8007644 <_malloc_r>
 8007db4:	b922      	cbnz	r2, 8007dc0 <_realloc_r+0x20>
 8007db6:	f7ff ffa5 	bl	8007d04 <_free_r>
 8007dba:	4625      	mov	r5, r4
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dc0:	f000 f814 	bl	8007dec <_malloc_usable_size_r>
 8007dc4:	42a0      	cmp	r0, r4
 8007dc6:	d20f      	bcs.n	8007de8 <_realloc_r+0x48>
 8007dc8:	4621      	mov	r1, r4
 8007dca:	4638      	mov	r0, r7
 8007dcc:	f7ff fc3a 	bl	8007644 <_malloc_r>
 8007dd0:	4605      	mov	r5, r0
 8007dd2:	2800      	cmp	r0, #0
 8007dd4:	d0f2      	beq.n	8007dbc <_realloc_r+0x1c>
 8007dd6:	4631      	mov	r1, r6
 8007dd8:	4622      	mov	r2, r4
 8007dda:	f7ff fbd3 	bl	8007584 <memcpy>
 8007dde:	4631      	mov	r1, r6
 8007de0:	4638      	mov	r0, r7
 8007de2:	f7ff ff8f 	bl	8007d04 <_free_r>
 8007de6:	e7e9      	b.n	8007dbc <_realloc_r+0x1c>
 8007de8:	4635      	mov	r5, r6
 8007dea:	e7e7      	b.n	8007dbc <_realloc_r+0x1c>

08007dec <_malloc_usable_size_r>:
 8007dec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007df0:	1f18      	subs	r0, r3, #4
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	bfbc      	itt	lt
 8007df6:	580b      	ldrlt	r3, [r1, r0]
 8007df8:	18c0      	addlt	r0, r0, r3
 8007dfa:	4770      	bx	lr
 8007dfc:	0000      	movs	r0, r0
	...

08007e00 <ceil>:
 8007e00:	ec51 0b10 	vmov	r0, r1, d0
 8007e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e08:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007e0c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007e10:	2e13      	cmp	r6, #19
 8007e12:	460c      	mov	r4, r1
 8007e14:	ee10 5a10 	vmov	r5, s0
 8007e18:	4680      	mov	r8, r0
 8007e1a:	dc30      	bgt.n	8007e7e <ceil+0x7e>
 8007e1c:	2e00      	cmp	r6, #0
 8007e1e:	da12      	bge.n	8007e46 <ceil+0x46>
 8007e20:	a333      	add	r3, pc, #204	; (adr r3, 8007ef0 <ceil+0xf0>)
 8007e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e26:	f7f8 fa29 	bl	800027c <__adddf3>
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	f7f8 fe6b 	bl	8000b08 <__aeabi_dcmpgt>
 8007e32:	b128      	cbz	r0, 8007e40 <ceil+0x40>
 8007e34:	2c00      	cmp	r4, #0
 8007e36:	db55      	blt.n	8007ee4 <ceil+0xe4>
 8007e38:	432c      	orrs	r4, r5
 8007e3a:	d057      	beq.n	8007eec <ceil+0xec>
 8007e3c:	4c2e      	ldr	r4, [pc, #184]	; (8007ef8 <ceil+0xf8>)
 8007e3e:	2500      	movs	r5, #0
 8007e40:	4621      	mov	r1, r4
 8007e42:	4628      	mov	r0, r5
 8007e44:	e025      	b.n	8007e92 <ceil+0x92>
 8007e46:	4f2d      	ldr	r7, [pc, #180]	; (8007efc <ceil+0xfc>)
 8007e48:	4137      	asrs	r7, r6
 8007e4a:	ea01 0307 	and.w	r3, r1, r7
 8007e4e:	4303      	orrs	r3, r0
 8007e50:	d01f      	beq.n	8007e92 <ceil+0x92>
 8007e52:	a327      	add	r3, pc, #156	; (adr r3, 8007ef0 <ceil+0xf0>)
 8007e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e58:	f7f8 fa10 	bl	800027c <__adddf3>
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	2300      	movs	r3, #0
 8007e60:	f7f8 fe52 	bl	8000b08 <__aeabi_dcmpgt>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	d0eb      	beq.n	8007e40 <ceil+0x40>
 8007e68:	2c00      	cmp	r4, #0
 8007e6a:	bfc2      	ittt	gt
 8007e6c:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8007e70:	fa43 f606 	asrgt.w	r6, r3, r6
 8007e74:	19a4      	addgt	r4, r4, r6
 8007e76:	ea24 0407 	bic.w	r4, r4, r7
 8007e7a:	2500      	movs	r5, #0
 8007e7c:	e7e0      	b.n	8007e40 <ceil+0x40>
 8007e7e:	2e33      	cmp	r6, #51	; 0x33
 8007e80:	dd0b      	ble.n	8007e9a <ceil+0x9a>
 8007e82:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007e86:	d104      	bne.n	8007e92 <ceil+0x92>
 8007e88:	ee10 2a10 	vmov	r2, s0
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	f7f8 f9f5 	bl	800027c <__adddf3>
 8007e92:	ec41 0b10 	vmov	d0, r0, r1
 8007e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e9a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007e9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ea2:	fa23 f707 	lsr.w	r7, r3, r7
 8007ea6:	4207      	tst	r7, r0
 8007ea8:	d0f3      	beq.n	8007e92 <ceil+0x92>
 8007eaa:	a311      	add	r3, pc, #68	; (adr r3, 8007ef0 <ceil+0xf0>)
 8007eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb0:	f7f8 f9e4 	bl	800027c <__adddf3>
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	f7f8 fe26 	bl	8000b08 <__aeabi_dcmpgt>
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	d0bf      	beq.n	8007e40 <ceil+0x40>
 8007ec0:	2c00      	cmp	r4, #0
 8007ec2:	dd02      	ble.n	8007eca <ceil+0xca>
 8007ec4:	2e14      	cmp	r6, #20
 8007ec6:	d103      	bne.n	8007ed0 <ceil+0xd0>
 8007ec8:	3401      	adds	r4, #1
 8007eca:	ea25 0507 	bic.w	r5, r5, r7
 8007ece:	e7b7      	b.n	8007e40 <ceil+0x40>
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007ed6:	fa03 f606 	lsl.w	r6, r3, r6
 8007eda:	4435      	add	r5, r6
 8007edc:	4545      	cmp	r5, r8
 8007ede:	bf38      	it	cc
 8007ee0:	18e4      	addcc	r4, r4, r3
 8007ee2:	e7f2      	b.n	8007eca <ceil+0xca>
 8007ee4:	2500      	movs	r5, #0
 8007ee6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007eea:	e7a9      	b.n	8007e40 <ceil+0x40>
 8007eec:	4625      	mov	r5, r4
 8007eee:	e7a7      	b.n	8007e40 <ceil+0x40>
 8007ef0:	8800759c 	.word	0x8800759c
 8007ef4:	7e37e43c 	.word	0x7e37e43c
 8007ef8:	3ff00000 	.word	0x3ff00000
 8007efc:	000fffff 	.word	0x000fffff

08007f00 <floor>:
 8007f00:	ec51 0b10 	vmov	r0, r1, d0
 8007f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f08:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007f0c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007f10:	2e13      	cmp	r6, #19
 8007f12:	460c      	mov	r4, r1
 8007f14:	ee10 5a10 	vmov	r5, s0
 8007f18:	4680      	mov	r8, r0
 8007f1a:	dc34      	bgt.n	8007f86 <floor+0x86>
 8007f1c:	2e00      	cmp	r6, #0
 8007f1e:	da16      	bge.n	8007f4e <floor+0x4e>
 8007f20:	a335      	add	r3, pc, #212	; (adr r3, 8007ff8 <floor+0xf8>)
 8007f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f26:	f7f8 f9a9 	bl	800027c <__adddf3>
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	f7f8 fdeb 	bl	8000b08 <__aeabi_dcmpgt>
 8007f32:	b148      	cbz	r0, 8007f48 <floor+0x48>
 8007f34:	2c00      	cmp	r4, #0
 8007f36:	da59      	bge.n	8007fec <floor+0xec>
 8007f38:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007f3c:	4a30      	ldr	r2, [pc, #192]	; (8008000 <floor+0x100>)
 8007f3e:	432b      	orrs	r3, r5
 8007f40:	2500      	movs	r5, #0
 8007f42:	42ab      	cmp	r3, r5
 8007f44:	bf18      	it	ne
 8007f46:	4614      	movne	r4, r2
 8007f48:	4621      	mov	r1, r4
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	e025      	b.n	8007f9a <floor+0x9a>
 8007f4e:	4f2d      	ldr	r7, [pc, #180]	; (8008004 <floor+0x104>)
 8007f50:	4137      	asrs	r7, r6
 8007f52:	ea01 0307 	and.w	r3, r1, r7
 8007f56:	4303      	orrs	r3, r0
 8007f58:	d01f      	beq.n	8007f9a <floor+0x9a>
 8007f5a:	a327      	add	r3, pc, #156	; (adr r3, 8007ff8 <floor+0xf8>)
 8007f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f60:	f7f8 f98c 	bl	800027c <__adddf3>
 8007f64:	2200      	movs	r2, #0
 8007f66:	2300      	movs	r3, #0
 8007f68:	f7f8 fdce 	bl	8000b08 <__aeabi_dcmpgt>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	d0eb      	beq.n	8007f48 <floor+0x48>
 8007f70:	2c00      	cmp	r4, #0
 8007f72:	bfbe      	ittt	lt
 8007f74:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007f78:	fa43 f606 	asrlt.w	r6, r3, r6
 8007f7c:	19a4      	addlt	r4, r4, r6
 8007f7e:	ea24 0407 	bic.w	r4, r4, r7
 8007f82:	2500      	movs	r5, #0
 8007f84:	e7e0      	b.n	8007f48 <floor+0x48>
 8007f86:	2e33      	cmp	r6, #51	; 0x33
 8007f88:	dd0b      	ble.n	8007fa2 <floor+0xa2>
 8007f8a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007f8e:	d104      	bne.n	8007f9a <floor+0x9a>
 8007f90:	ee10 2a10 	vmov	r2, s0
 8007f94:	460b      	mov	r3, r1
 8007f96:	f7f8 f971 	bl	800027c <__adddf3>
 8007f9a:	ec41 0b10 	vmov	d0, r0, r1
 8007f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fa2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007fa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007faa:	fa23 f707 	lsr.w	r7, r3, r7
 8007fae:	4207      	tst	r7, r0
 8007fb0:	d0f3      	beq.n	8007f9a <floor+0x9a>
 8007fb2:	a311      	add	r3, pc, #68	; (adr r3, 8007ff8 <floor+0xf8>)
 8007fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb8:	f7f8 f960 	bl	800027c <__adddf3>
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	f7f8 fda2 	bl	8000b08 <__aeabi_dcmpgt>
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	d0bf      	beq.n	8007f48 <floor+0x48>
 8007fc8:	2c00      	cmp	r4, #0
 8007fca:	da02      	bge.n	8007fd2 <floor+0xd2>
 8007fcc:	2e14      	cmp	r6, #20
 8007fce:	d103      	bne.n	8007fd8 <floor+0xd8>
 8007fd0:	3401      	adds	r4, #1
 8007fd2:	ea25 0507 	bic.w	r5, r5, r7
 8007fd6:	e7b7      	b.n	8007f48 <floor+0x48>
 8007fd8:	2301      	movs	r3, #1
 8007fda:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007fde:	fa03 f606 	lsl.w	r6, r3, r6
 8007fe2:	4435      	add	r5, r6
 8007fe4:	4545      	cmp	r5, r8
 8007fe6:	bf38      	it	cc
 8007fe8:	18e4      	addcc	r4, r4, r3
 8007fea:	e7f2      	b.n	8007fd2 <floor+0xd2>
 8007fec:	2500      	movs	r5, #0
 8007fee:	462c      	mov	r4, r5
 8007ff0:	e7aa      	b.n	8007f48 <floor+0x48>
 8007ff2:	bf00      	nop
 8007ff4:	f3af 8000 	nop.w
 8007ff8:	8800759c 	.word	0x8800759c
 8007ffc:	7e37e43c 	.word	0x7e37e43c
 8008000:	bff00000 	.word	0xbff00000
 8008004:	000fffff 	.word	0x000fffff

08008008 <round>:
 8008008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800a:	ec57 6b10 	vmov	r6, r7, d0
 800800e:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8008012:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8008016:	2c13      	cmp	r4, #19
 8008018:	463b      	mov	r3, r7
 800801a:	463d      	mov	r5, r7
 800801c:	dc17      	bgt.n	800804e <round+0x46>
 800801e:	2c00      	cmp	r4, #0
 8008020:	da09      	bge.n	8008036 <round+0x2e>
 8008022:	3401      	adds	r4, #1
 8008024:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8008028:	d103      	bne.n	8008032 <round+0x2a>
 800802a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800802e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008032:	2100      	movs	r1, #0
 8008034:	e02c      	b.n	8008090 <round+0x88>
 8008036:	4a18      	ldr	r2, [pc, #96]	; (8008098 <round+0x90>)
 8008038:	4122      	asrs	r2, r4
 800803a:	4217      	tst	r7, r2
 800803c:	d100      	bne.n	8008040 <round+0x38>
 800803e:	b19e      	cbz	r6, 8008068 <round+0x60>
 8008040:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008044:	4123      	asrs	r3, r4
 8008046:	442b      	add	r3, r5
 8008048:	ea23 0302 	bic.w	r3, r3, r2
 800804c:	e7f1      	b.n	8008032 <round+0x2a>
 800804e:	2c33      	cmp	r4, #51	; 0x33
 8008050:	dd0d      	ble.n	800806e <round+0x66>
 8008052:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8008056:	d107      	bne.n	8008068 <round+0x60>
 8008058:	4630      	mov	r0, r6
 800805a:	4639      	mov	r1, r7
 800805c:	ee10 2a10 	vmov	r2, s0
 8008060:	f7f8 f90c 	bl	800027c <__adddf3>
 8008064:	4606      	mov	r6, r0
 8008066:	460f      	mov	r7, r1
 8008068:	ec47 6b10 	vmov	d0, r6, r7
 800806c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800806e:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8008072:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008076:	40d0      	lsrs	r0, r2
 8008078:	4206      	tst	r6, r0
 800807a:	d0f5      	beq.n	8008068 <round+0x60>
 800807c:	2201      	movs	r2, #1
 800807e:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8008082:	fa02 f404 	lsl.w	r4, r2, r4
 8008086:	1931      	adds	r1, r6, r4
 8008088:	bf28      	it	cs
 800808a:	189b      	addcs	r3, r3, r2
 800808c:	ea21 0100 	bic.w	r1, r1, r0
 8008090:	461f      	mov	r7, r3
 8008092:	460e      	mov	r6, r1
 8008094:	e7e8      	b.n	8008068 <round+0x60>
 8008096:	bf00      	nop
 8008098:	000fffff 	.word	0x000fffff

0800809c <_sbrk>:
 800809c:	4b04      	ldr	r3, [pc, #16]	; (80080b0 <_sbrk+0x14>)
 800809e:	6819      	ldr	r1, [r3, #0]
 80080a0:	4602      	mov	r2, r0
 80080a2:	b909      	cbnz	r1, 80080a8 <_sbrk+0xc>
 80080a4:	4903      	ldr	r1, [pc, #12]	; (80080b4 <_sbrk+0x18>)
 80080a6:	6019      	str	r1, [r3, #0]
 80080a8:	6818      	ldr	r0, [r3, #0]
 80080aa:	4402      	add	r2, r0
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	4770      	bx	lr
 80080b0:	20000578 	.word	0x20000578
 80080b4:	20000678 	.word	0x20000678

080080b8 <_init>:
 80080b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ba:	bf00      	nop
 80080bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080be:	bc08      	pop	{r3}
 80080c0:	469e      	mov	lr, r3
 80080c2:	4770      	bx	lr

080080c4 <_fini>:
 80080c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080c6:	bf00      	nop
 80080c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ca:	bc08      	pop	{r3}
 80080cc:	469e      	mov	lr, r3
 80080ce:	4770      	bx	lr
